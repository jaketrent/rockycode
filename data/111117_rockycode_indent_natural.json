[
  {
    "pk": 19, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "article", 
      "name": "article", 
      "app_label": "blog"
    }
  }, 
  {
    "pk": 18, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "collection", 
      "name": "collection", 
      "app_label": "blog"
    }
  }, 
  {
    "pk": 5, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "contenttype", 
      "name": "content type", 
      "app_label": "contenttypes"
    }
  }, 
  {
    "pk": 21, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "flatpage", 
      "name": "flat page", 
      "app_label": "flatpages"
    }
  },
  {
    "pk": 2, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "group", 
      "name": "group", 
      "app_label": "auth"
    }
  }, 
  {
    "pk": 8, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "logentry", 
      "name": "log entry", 
      "app_label": "admin"
    }
  }, 
  {
    "pk": 4, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "message", 
      "name": "message", 
      "app_label": "auth"
    }
  }, 
  {
    "pk": 1, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "permission", 
      "name": "permission", 
      "app_label": "auth"
    }
  },
  {
    "pk": 20, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "profile", 
      "name": "profile", 
      "app_label": "blog"
    }
  }, 
  {
    "pk": 6, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "session", 
      "name": "session", 
      "app_label": "sessions"
    }
  }, 
  {
    "pk": 7, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "site", 
      "name": "site", 
      "app_label": "sites"
    }
  }, 
  {
    "pk": 9, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "tag", 
      "name": "tag", 
      "app_label": "tagging"
    }
  }, 
  {
    "pk": 10, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "taggeditem", 
      "name": "tagged item", 
      "app_label": "tagging"
    }
  }, 
  {
    "pk": 17, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "template", 
      "name": "template", 
      "app_label": "blog"
    }
  }, 
  {
    "pk": 3, 
    "model": "contenttypes.contenttype", 
    "fields": {
      "model": "user", 
      "name": "user", 
      "app_label": "auth"
    }
  },
  {
    "pk": 1, 
    "model": "sites.site", 
    "fields": {
      "domain": "rockycode.com", 
      "name": "rockycode.com"
    }
  },
  {
    "pk": 86, 
    "model": "tagging.tag", 
    "fields": {
      "name": ".net"
    }
  }, 
  {
    "pk": 120, 
    "model": "tagging.tag", 
    "fields": {
      "name": ".net4"
    }
  }, 
  {
    "pk": 46, 
    "model": "tagging.tag", 
    "fields": {
      "name": "a4j"
    }
  }, 
  {
    "pk": 147, 
    "model": "tagging.tag", 
    "fields": {
      "name": "aes"
    }
  }, 
  {
    "pk": 107, 
    "model": "tagging.tag", 
    "fields": {
      "name": "agile"
    }
  }, 
  {
    "pk": 77, 
    "model": "tagging.tag", 
    "fields": {
      "name": "ajax"
    }
  }, 
  {
    "pk": 59, 
    "model": "tagging.tag", 
    "fields": {
      "name": "apache"
    }
  }, 
  {
    "pk": 160, 
    "model": "tagging.tag", 
    "fields": {
      "name": "automation"
    }
  }, 
  {
    "pk": 31, 
    "model": "tagging.tag", 
    "fields": {
      "name": "bash"
    }
  }, 
  {
    "pk": 104, 
    "model": "tagging.tag", 
    "fields": {
      "name": "blog"
    }
  }, 
  {
    "pk": 148, 
    "model": "tagging.tag", 
    "fields": {
      "name": "bouncy castle"
    }
  }, 
  {
    "pk": 99, 
    "model": "tagging.tag", 
    "fields": {
      "name": "browser"
    }
  }, 
  {
    "pk": 72, 
    "model": "tagging.tag", 
    "fields": {
      "name": "captcha"
    }
  }, 
  {
    "pk": 124, 
    "model": "tagging.tag", 
    "fields": {
      "name": "career-building"
    }
  }, 
  {
    "pk": 89, 
    "model": "tagging.tag", 
    "fields": {
      "name": "categories"
    }
  }, 
  {
    "pk": 97, 
    "model": "tagging.tag", 
    "fields": {
      "name": "ccnet"
    }
  }, 
  {
    "pk": 128, 
    "model": "tagging.tag", 
    "fields": {
      "name": "cdrom"
    }
  }, 
  {
    "pk": 152, 
    "model": "tagging.tag", 
    "fields": {
      "name": "chat"
    }
  }, 
  {
    "pk": 43, 
    "model": "tagging.tag", 
    "fields": {
      "name": "compiz"
    }
  }, 
  {
    "pk": 12, 
    "model": "tagging.tag", 
    "fields": {
      "name": "concurrency"
    }
  }, 
  {
    "pk": 95, 
    "model": "tagging.tag", 
    "fields": {
      "name": "confs"
    }
  }, 
  {
    "pk": 143, 
    "model": "tagging.tag", 
    "fields": {
      "name": "convention"
    }
  }, 
  {
    "pk": 163, 
    "model": "tagging.tag", 
    "fields": {
      "name": "cookiecontainer"
    }
  }, 
  {
    "pk": 129, 
    "model": "tagging.tag", 
    "fields": {
      "name": "copy"
    }
  }, 
  {
    "pk": 130, 
    "model": "tagging.tag", 
    "fields": {
      "name": "create"
    }
  }, 
  {
    "pk": 144, 
    "model": "tagging.tag", 
    "fields": {
      "name": "cross-browser"
    }
  }, 
  {
    "pk": 82, 
    "model": "tagging.tag", 
    "fields": {
      "name": "cruisecontrol.net"
    }
  }, 
  {
    "pk": 18, 
    "model": "tagging.tag", 
    "fields": {
      "name": "crystal-reports"
    }
  }, 
  {
    "pk": 79, 
    "model": "tagging.tag", 
    "fields": {
      "name": "csharp"
    }
  }, 
  {
    "pk": 57, 
    "model": "tagging.tag", 
    "fields": {
      "name": "css"
    }
  }, 
  {
    "pk": 116, 
    "model": "tagging.tag", 
    "fields": {
      "name": "custom"
    }
  }, 
  {
    "pk": 55, 
    "model": "tagging.tag", 
    "fields": {
      "name": "customization"
    }
  }, 
  {
    "pk": 139, 
    "model": "tagging.tag", 
    "fields": {
      "name": "davmail"
    }
  }, 
  {
    "pk": 151, 
    "model": "tagging.tag", 
    "fields": {
      "name": "debugging"
    }
  }, 
  {
    "pk": 35, 
    "model": "tagging.tag", 
    "fields": {
      "name": "deployment"
    }
  }, 
  {
    "pk": 125, 
    "model": "tagging.tag", 
    "fields": {
      "name": "design"
    }
  }, 
  {
    "pk": 22, 
    "model": "tagging.tag", 
    "fields": {
      "name": "displays"
    }
  }, 
  {
    "pk": 13, 
    "model": "tagging.tag", 
    "fields": {
      "name": "django"
    }
  }, 
  {
    "pk": 135, 
    "model": "tagging.tag", 
    "fields": {
      "name": "django-piston"
    }
  }, 
  {
    "pk": 23, 
    "model": "tagging.tag", 
    "fields": {
      "name": "dvd"
    }
  }, 
  {
    "pk": 25, 
    "model": "tagging.tag", 
    "fields": {
      "name": "easymock"
    }
  }, 
  {
    "pk": 146, 
    "model": "tagging.tag", 
    "fields": {
      "name": "encryption"
    }
  }, 
  {
    "pk": 27, 
    "model": "tagging.tag", 
    "fields": {
      "name": "engineering"
    }
  }, 
  {
    "pk": 126, 
    "model": "tagging.tag", 
    "fields": {
      "name": "evolution"
    }
  }, 
  {
    "pk": 140, 
    "model": "tagging.tag", 
    "fields": {
      "name": "exchange"
    }
  }, 
  {
    "pk": 122, 
    "model": "tagging.tag", 
    "fields": {
      "name": "external"
    }
  }, 
  {
    "pk": 16, 
    "model": "tagging.tag", 
    "fields": {
      "name": "facelets"
    }
  }, 
  {
    "pk": 111, 
    "model": "tagging.tag", 
    "fields": {
      "name": "forms"
    }
  }, 
  {
    "pk": 53, 
    "model": "tagging.tag", 
    "fields": {
      "name": "functional-testing"
    }
  }, 
  {
    "pk": 101, 
    "model": "tagging.tag", 
    "fields": {
      "name": "generics"
    }
  }, 
  {
    "pk": 96, 
    "model": "tagging.tag", 
    "fields": {
      "name": "groovy"
    }
  }, 
  {
    "pk": 5, 
    "model": "tagging.tag", 
    "fields": {
      "name": "hibernate"
    }
  }, 
  {
    "pk": 39, 
    "model": "tagging.tag", 
    "fields": {
      "name": "hql"
    }
  }, 
  {
    "pk": 56, 
    "model": "tagging.tag", 
    "fields": {
      "name": "html"
    }
  }, 
  {
    "pk": 157, 
    "model": "tagging.tag", 
    "fields": {
      "name": "http"
    }
  }, 
  {
    "pk": 165, 
    "model": "tagging.tag", 
    "fields": {
      "name": "i18n"
    }
  }, 
  {
    "pk": 36, 
    "model": "tagging.tag", 
    "fields": {
      "name": "ide"
    }
  }, 
  {
    "pk": 69, 
    "model": "tagging.tag", 
    "fields": {
      "name": "ie"
    }
  }, 
  {
    "pk": 145, 
    "model": "tagging.tag", 
    "fields": {
      "name": "iframe"
    }
  }, 
  {
    "pk": 131, 
    "model": "tagging.tag", 
    "fields": {
      "name": "image"
    }
  }, 
  {
    "pk": 58, 
    "model": "tagging.tag", 
    "fields": {
      "name": "images"
    }
  }, 
  {
    "pk": 37, 
    "model": "tagging.tag", 
    "fields": {
      "name": "intellij"
    }
  }, 
  {
    "pk": 28, 
    "model": "tagging.tag", 
    "fields": {
      "name": "ioc"
    }
  }, 
  {
    "pk": 132, 
    "model": "tagging.tag", 
    "fields": {
      "name": "iso"
    }
  }, 
  {
    "pk": 4, 
    "model": "tagging.tag", 
    "fields": {
      "name": "java"
    }
  }, 
  {
    "pk": 1, 
    "model": "tagging.tag", 
    "fields": {
      "name": "javascript"
    }
  }, 
  {
    "pk": 34, 
    "model": "tagging.tag", 
    "fields": {
      "name": "jpa"
    }
  }, 
  {
    "pk": 40, 
    "model": "tagging.tag", 
    "fields": {
      "name": "jpql"
    }
  }, 
  {
    "pk": 38, 
    "model": "tagging.tag", 
    "fields": {
      "name": "jquery"
    }
  }, 
  {
    "pk": 166, 
    "model": "tagging.tag", 
    "fields": {
      "name": "jquery-mobile"
    }
  }, 
  {
    "pk": 136, 
    "model": "tagging.tag", 
    "fields": {
      "name": "jquery-templates"
    }
  }, 
  {
    "pk": 85, 
    "model": "tagging.tag", 
    "fields": {
      "name": "js"
    }
  }, 
  {
    "pk": 17, 
    "model": "tagging.tag", 
    "fields": {
      "name": "jsf"
    }
  }, 
  {
    "pk": 137, 
    "model": "tagging.tag", 
    "fields": {
      "name": "json"
    }
  }, 
  {
    "pk": 156, 
    "model": "tagging.tag", 
    "fields": {
      "name": "jsp"
    }
  }, 
  {
    "pk": 20, 
    "model": "tagging.tag", 
    "fields": {
      "name": "jython"
    }
  }, 
  {
    "pk": 80, 
    "model": "tagging.tag", 
    "fields": {
      "name": "linq"
    }
  }, 
  {
    "pk": 2, 
    "model": "tagging.tag", 
    "fields": {
      "name": "linux"
    }
  }, 
  {
    "pk": 9, 
    "model": "tagging.tag", 
    "fields": {
      "name": "markdown"
    }
  }, 
  {
    "pk": 47, 
    "model": "tagging.tag", 
    "fields": {
      "name": "marklogic"
    }
  }, 
  {
    "pk": 8, 
    "model": "tagging.tag", 
    "fields": {
      "name": "maven"
    }
  }, 
  {
    "pk": 49, 
    "model": "tagging.tag", 
    "fields": {
      "name": "mysql"
    }
  }, 
  {
    "pk": 81, 
    "model": "tagging.tag", 
    "fields": {
      "name": "nant"
    }
  }, 
  {
    "pk": 7, 
    "model": "tagging.tag", 
    "fields": {
      "name": "networking"
    }
  }, 
  {
    "pk": 142, 
    "model": "tagging.tag", 
    "fields": {
      "name": "nginx"
    }
  }, 
  {
    "pk": 90, 
    "model": "tagging.tag", 
    "fields": {
      "name": "nunit"
    }
  }, 
  {
    "pk": 121, 
    "model": "tagging.tag", 
    "fields": {
      "name": "onthefly"
    }
  }, 
  {
    "pk": 65, 
    "model": "tagging.tag", 
    "fields": {
      "name": "open-office"
    }
  }, 
  {
    "pk": 14, 
    "model": "tagging.tag", 
    "fields": {
      "name": "oracle"
    }
  }, 
  {
    "pk": 6, 
    "model": "tagging.tag", 
    "fields": {
      "name": "orm"
    }
  }, 
  {
    "pk": 112, 
    "model": "tagging.tag", 
    "fields": {
      "name": "pair programming"
    }
  }, 
  {
    "pk": 119, 
    "model": "tagging.tag", 
    "fields": {
      "name": "pair-programming"
    }
  }, 
  {
    "pk": 21, 
    "model": "tagging.tag", 
    "fields": {
      "name": "pdf"
    }
  }, 
  {
    "pk": 50, 
    "model": "tagging.tag", 
    "fields": {
      "name": "performance"
    }
  }, 
  {
    "pk": 60, 
    "model": "tagging.tag", 
    "fields": {
      "name": "php"
    }
  }, 
  {
    "pk": 153, 
    "model": "tagging.tag", 
    "fields": {
      "name": "pidgin"
    }
  }, 
  {
    "pk": 73, 
    "model": "tagging.tag", 
    "fields": {
      "name": "pil"
    }
  }, 
  {
    "pk": 117, 
    "model": "tagging.tag", 
    "fields": {
      "name": "plugin"
    }
  }, 
  {
    "pk": 94, 
    "model": "tagging.tag", 
    "fields": {
      "name": "plugins"
    }
  }, 
  {
    "pk": 92, 
    "model": "tagging.tag", 
    "fields": {
      "name": "png"
    }
  }, 
  {
    "pk": 159, 
    "model": "tagging.tag", 
    "fields": {
      "name": "ppa"
    }
  }, 
  {
    "pk": 113, 
    "model": "tagging.tag", 
    "fields": {
      "name": "project management"
    }
  }, 
  {
    "pk": 106, 
    "model": "tagging.tag", 
    "fields": {
      "name": "project-management"
    }
  }, 
  {
    "pk": 162, 
    "model": "tagging.tag", 
    "fields": {
      "name": "properties"
    }
  }, 
  {
    "pk": 10, 
    "model": "tagging.tag", 
    "fields": {
      "name": "pygments"
    }
  }, 
  {
    "pk": 11, 
    "model": "tagging.tag", 
    "fields": {
      "name": "python"
    }
  }, 
  {
    "pk": 161, 
    "model": "tagging.tag", 
    "fields": {
      "name": "qa"
    }
  }, 
  {
    "pk": 110, 
    "model": "tagging.tag", 
    "fields": {
      "name": "radio"
    }
  }, 
  {
    "pk": 30, 
    "model": "tagging.tag", 
    "fields": {
      "name": "reflection"
    }
  }, 
  {
    "pk": 54, 
    "model": "tagging.tag", 
    "fields": {
      "name": "requirements"
    }
  }, 
  {
    "pk": 158, 
    "model": "tagging.tag", 
    "fields": {
      "name": "responsive-design"
    }
  }, 
  {
    "pk": 48, 
    "model": "tagging.tag", 
    "fields": {
      "name": "samba"
    }
  }, 
  {
    "pk": 138, 
    "model": "tagging.tag", 
    "fields": {
      "name": "sammyjs"
    }
  }, 
  {
    "pk": 108, 
    "model": "tagging.tag", 
    "fields": {
      "name": "savetime"
    }
  }, 
  {
    "pk": 154, 
    "model": "tagging.tag", 
    "fields": {
      "name": "scalability"
    }
  }, 
  {
    "pk": 45, 
    "model": "tagging.tag", 
    "fields": {
      "name": "seam"
    }
  }, 
  {
    "pk": 41, 
    "model": "tagging.tag", 
    "fields": {
      "name": "security"
    }
  }, 
  {
    "pk": 61, 
    "model": "tagging.tag", 
    "fields": {
      "name": "seo"
    }
  }, 
  {
    "pk": 93, 
    "model": "tagging.tag", 
    "fields": {
      "name": "sort"
    }
  }, 
  {
    "pk": 52, 
    "model": "tagging.tag", 
    "fields": {
      "name": "souit"
    }
  }, 
  {
    "pk": 74, 
    "model": "tagging.tag", 
    "fields": {
      "name": "spam-filter"
    }
  }, 
  {
    "pk": 29, 
    "model": "tagging.tag", 
    "fields": {
      "name": "spring"
    }
  }, 
  {
    "pk": 15, 
    "model": "tagging.tag", 
    "fields": {
      "name": "sql"
    }
  }, 
  {
    "pk": 64, 
    "model": "tagging.tag", 
    "fields": {
      "name": "sql-developer"
    }
  }, 
  {
    "pk": 32, 
    "model": "tagging.tag", 
    "fields": {
      "name": "ssh"
    }
  }, 
  {
    "pk": 19, 
    "model": "tagging.tag", 
    "fields": {
      "name": "storage"
    }
  }, 
  {
    "pk": 66, 
    "model": "tagging.tag", 
    "fields": {
      "name": "svn"
    }
  }, 
  {
    "pk": 44, 
    "model": "tagging.tag", 
    "fields": {
      "name": "swing"
    }
  }, 
  {
    "pk": 68, 
    "model": "tagging.tag", 
    "fields": {
      "name": "synergy"
    }
  }, 
  {
    "pk": 167, 
    "model": "tagging.tag", 
    "fields": {
      "name": "tdd"
    }
  }, 
  {
    "pk": 118, 
    "model": "tagging.tag", 
    "fields": {
      "name": "teamcity"
    }
  }, 
  {
    "pk": 42, 
    "model": "tagging.tag", 
    "fields": {
      "name": "testng"
    }
  }, 
  {
    "pk": 149, 
    "model": "tagging.tag", 
    "fields": {
      "name": "tomcat"
    }
  }, 
  {
    "pk": 155, 
    "model": "tagging.tag", 
    "fields": {
      "name": "transactions"
    }
  }, 
  {
    "pk": 105, 
    "model": "tagging.tag", 
    "fields": {
      "name": "trigger"
    }
  }, 
  {
    "pk": 127, 
    "model": "tagging.tag", 
    "fields": {
      "name": "typing"
    }
  }, 
  {
    "pk": 3, 
    "model": "tagging.tag", 
    "fields": {
      "name": "ubuntu"
    }
  }, 
  {
    "pk": 26, 
    "model": "tagging.tag", 
    "fields": {
      "name": "unit-testing"
    }
  }, 
  {
    "pk": 91, 
    "model": "tagging.tag", 
    "fields": {
      "name": "unittest"
    }
  }, 
  {
    "pk": 98, 
    "model": "tagging.tag", 
    "fields": {
      "name": "urlscan"
    }
  }, 
  {
    "pk": 123, 
    "model": "tagging.tag", 
    "fields": {
      "name": "variable"
    }
  }, 
  {
    "pk": 67, 
    "model": "tagging.tag", 
    "fields": {
      "name": "vcs"
    }
  }, 
  {
    "pk": 24, 
    "model": "tagging.tag", 
    "fields": {
      "name": "video"
    }
  }, 
  {
    "pk": 62, 
    "model": "tagging.tag", 
    "fields": {
      "name": "virtualbox"
    }
  }, 
  {
    "pk": 63, 
    "model": "tagging.tag", 
    "fields": {
      "name": "vm"
    }
  }, 
  {
    "pk": 71, 
    "model": "tagging.tag", 
    "fields": {
      "name": "vpn"
    }
  }, 
  {
    "pk": 84, 
    "model": "tagging.tag", 
    "fields": {
      "name": "watin"
    }
  }, 
  {
    "pk": 100, 
    "model": "tagging.tag", 
    "fields": {
      "name": "web"
    }
  }, 
  {
    "pk": 70, 
    "model": "tagging.tag", 
    "fields": {
      "name": "web-browser"
    }
  }, 
  {
    "pk": 164, 
    "model": "tagging.tag", 
    "fields": {
      "name": "webclient"
    }
  }, 
  {
    "pk": 115, 
    "model": "tagging.tag", 
    "fields": {
      "name": "webdav"
    }
  }, 
  {
    "pk": 141, 
    "model": "tagging.tag", 
    "fields": {
      "name": "webdriver"
    }
  }, 
  {
    "pk": 51, 
    "model": "tagging.tag", 
    "fields": {
      "name": "webflow"
    }
  }, 
  {
    "pk": 87, 
    "model": "tagging.tag", 
    "fields": {
      "name": "webservice"
    }
  }, 
  {
    "pk": 114, 
    "model": "tagging.tag", 
    "fields": {
      "name": "windows7"
    }
  }, 
  {
    "pk": 150, 
    "model": "tagging.tag", 
    "fields": {
      "name": "wireshark"
    }
  }, 
  {
    "pk": 88, 
    "model": "tagging.tag", 
    "fields": {
      "name": "wsdl"
    }
  }, 
  {
    "pk": 133, 
    "model": "tagging.tag", 
    "fields": {
      "name": "xml"
    }
  }, 
  {
    "pk": 109, 
    "model": "tagging.tag", 
    "fields": {
      "name": "xmlcomments"
    }
  }, 
  {
    "pk": 78, 
    "model": "tagging.tag", 
    "fields": {
      "name": "xquery"
    }
  }, 
  {
    "pk": 134, 
    "model": "tagging.tag", 
    "fields": {
      "name": "xsd"
    }
  }, 
  {
    "pk": 33, 
    "model": "tagging.tag", 
    "fields": {
      "name": "xserver"
    }
  }, 
  {
    "pk": 83, 
    "model": "tagging.tag", 
    "fields": {
      "name": "xsl"
    }
  }, 
  {
    "pk": 1, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 300, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 2, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 104, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 3, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 104, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 4, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 189, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 5, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 5, 
      "object_id": 122, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 6, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 122, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 7, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 6, 
      "object_id": 122, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 8, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 305, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 9, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 7, 
      "object_id": 305, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 10, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 305, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 11, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 265, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 12, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 8, 
      "object_id": 265, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 13, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 9, 
      "object_id": 96, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 14, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 10, 
      "object_id": 96, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 15, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 11, 
      "object_id": 96, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 16, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 12, 
      "object_id": 195, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 17, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 195, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 18, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 13, 
      "object_id": 158, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 19, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 11, 
      "object_id": 158, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 20, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 14, 
      "object_id": 191, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 21, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 15, 
      "object_id": 191, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 22, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 16, 
      "object_id": 150, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 23, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 150, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 24, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 17, 
      "object_id": 150, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 25, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 18, 
      "object_id": 125, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 26, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 125, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 27, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 125, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 28, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 19, 
      "object_id": 99, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 29, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 13, 
      "object_id": 282, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 30, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 11, 
      "object_id": 282, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 31, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 13, 
      "object_id": 309, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 32, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 309, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 33, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 20, 
      "object_id": 309, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 34, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 11, 
      "object_id": 309, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 35, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 13, 
      "object_id": 114, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 36, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 114, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 37, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 11, 
      "object_id": 114, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 38, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 114, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 39, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 13, 
      "object_id": 123, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 40, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 11, 
      "object_id": 123, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 41, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 118, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 42, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 21, 
      "object_id": 118, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 43, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 118, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 44, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 22, 
      "object_id": 100, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 45, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 100, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 46, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 100, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 47, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 23, 
      "object_id": 103, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 48, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 103, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 49, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 103, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 50, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 24, 
      "object_id": 103, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 51, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 25, 
      "object_id": 227, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 52, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 227, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 53, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 26, 
      "object_id": 227, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 54, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 27, 
      "object_id": 288, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 55, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 28, 
      "object_id": 254, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 56, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 254, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 57, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 29, 
      "object_id": 254, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 58, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 210, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 59, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 30, 
      "object_id": 210, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 60, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 26, 
      "object_id": 210, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 61, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 16, 
      "object_id": 178, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 62, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 178, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 63, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 17, 
      "object_id": 178, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 64, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 31, 
      "object_id": 255, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 65, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 13, 
      "object_id": 255, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 66, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 11, 
      "object_id": 255, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 67, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 7, 
      "object_id": 272, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 68, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 32, 
      "object_id": 266, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 69, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 33, 
      "object_id": 266, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 70, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 5, 
      "object_id": 247, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 71, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 34, 
      "object_id": 247, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 72, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 6, 
      "object_id": 247, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 73, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 5, 
      "object_id": 119, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 74, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 34, 
      "object_id": 119, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 75, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 6, 
      "object_id": 119, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 76, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 5, 
      "object_id": 156, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 77, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 34, 
      "object_id": 156, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 78, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 6, 
      "object_id": 156, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 79, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 35, 
      "object_id": 108, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 80, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 36, 
      "object_id": 108, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 81, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 37, 
      "object_id": 108, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 82, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 106, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 83, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 106, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 84, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 17, 
      "object_id": 106, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 85, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 5, 
      "object_id": 190, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 86, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 39, 
      "object_id": 190, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 87, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 34, 
      "object_id": 190, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 88, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 40, 
      "object_id": 190, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 89, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 302, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 90, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 302, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 91, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 302, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 92, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 261, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 93, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 261, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 94, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 41, 
      "object_id": 261, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 95, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 261, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 96, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 36, 
      "object_id": 127, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 97, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 37, 
      "object_id": 127, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 98, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 127, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 99, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 37, 
      "object_id": 102, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 100, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 102, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 101, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 102, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 102, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 37, 
      "object_id": 111, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 103, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 8, 
      "object_id": 111, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 104, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 183, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 105, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 30, 
      "object_id": 183, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 106, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 42, 
      "object_id": 183, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 107, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 26, 
      "object_id": 183, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 108, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 43, 
      "object_id": 224, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 109, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 224, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 110, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 44, 
      "object_id": 224, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 111, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 5, 
      "object_id": 117, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 112, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 117, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 113, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 17, 
      "object_id": 117, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 114, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 45, 
      "object_id": 117, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 115, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 29, 
      "object_id": 117, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 116, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 145, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 117, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 17, 
      "object_id": 145, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 118, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 16, 
      "object_id": 128, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 119, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 17, 
      "object_id": 128, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 120, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 46, 
      "object_id": 151, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 121, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 16, 
      "object_id": 151, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 122, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 17, 
      "object_id": 151, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 123, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 107, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 124, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 107, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 125, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 107, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 126, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 17, 
      "object_id": 107, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 127, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 205, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 128, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 205, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 129, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 205, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 130, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 7, 
      "object_id": 137, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 131, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 7, 
      "object_id": 264, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 132, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 48, 
      "object_id": 264, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 133, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 19, 
      "object_id": 264, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 134, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 113, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 135, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 49, 
      "object_id": 113, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 136, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 15, 
      "object_id": 113, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 137, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 113, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 138, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 14, 
      "object_id": 262, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 139, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 50, 
      "object_id": 262, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 140, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 15, 
      "object_id": 262, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 141, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 110, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 142, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 17, 
      "object_id": 110, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 143, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 278, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 144, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 29, 
      "object_id": 278, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 145, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 51, 
      "object_id": 278, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 146, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 258, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 147, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 258, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 148, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 52, 
      "object_id": 258, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 149, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 257, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 150, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 257, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 151, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 52, 
      "object_id": 257, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 152, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 53, 
      "object_id": 243, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 153, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 54, 
      "object_id": 243, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 154, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 55, 
      "object_id": 248, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 155, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 248, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 156, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 248, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 157, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 56, 
      "object_id": 260, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 158, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 260, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 159, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 57, 
      "object_id": 159, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 160, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 58, 
      "object_id": 159, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 161, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 59, 
      "object_id": 121, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 162, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 121, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 163, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 60, 
      "object_id": 121, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 164, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 121, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 165, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 61, 
      "object_id": 97, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 166, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 62, 
      "object_id": 124, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 167, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 63, 
      "object_id": 124, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 168, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 15, 
      "object_id": 182, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 169, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 64, 
      "object_id": 182, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 212, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 311, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 171, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 101, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 172, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 64, 
      "object_id": 101, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 173, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 101, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 174, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 66, 
      "object_id": 112, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 175, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 67, 
      "object_id": 112, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 176, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 66, 
      "object_id": 126, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 177, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 67, 
      "object_id": 126, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 178, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 306, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 179, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 68, 
      "object_id": 306, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 180, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 306, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 181, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 14, 
      "object_id": 120, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 182, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 15, 
      "object_id": 120, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 183, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 69, 
      "object_id": 299, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 184, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 299, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 185, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 70, 
      "object_id": 299, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 186, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 116, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 187, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 116, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 188, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 149, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 189, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 30, 
      "object_id": 149, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 190, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 253, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 191, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 50, 
      "object_id": 253, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 192, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 105, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 193, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 105, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 194, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 62, 
      "object_id": 105, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 195, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 63, 
      "object_id": 105, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 196, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 109, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 197, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 109, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 198, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 71, 
      "object_id": 109, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 199, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 72, 
      "object_id": 98, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 200, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 13, 
      "object_id": 98, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 201, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 73, 
      "object_id": 98, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 202, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 11, 
      "object_id": 98, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 203, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 74, 
      "object_id": 98, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 211, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 65, 
      "object_id": 249, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 206, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 77, 
      "object_id": 310, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 207, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 69, 
      "object_id": 310, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 208, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 310, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 209, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 310, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 210, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 310, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 213, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 80, 
      "object_id": 311, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 214, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 81, 
      "object_id": 311, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 215, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 312, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 216, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 312, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 217, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 82, 
      "object_id": 313, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 218, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 83, 
      "object_id": 313, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 219, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 314, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 220, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 69, 
      "object_id": 314, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 221, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 21, 
      "object_id": 314, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 222, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 84, 
      "object_id": 314, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 223, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 315, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 309, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 315, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 225, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 86, 
      "object_id": 316, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 226, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 316, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 227, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 87, 
      "object_id": 316, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 228, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 88, 
      "object_id": 316, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 229, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 86, 
      "object_id": 317, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 230, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 317, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 231, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 82, 
      "object_id": 317, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 232, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 81, 
      "object_id": 317, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 233, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 318, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 234, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 89, 
      "object_id": 318, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 235, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 90, 
      "object_id": 318, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 236, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 91, 
      "object_id": 318, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 237, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 58, 
      "object_id": 319, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 238, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 92, 
      "object_id": 319, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 239, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 320, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 240, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 80, 
      "object_id": 320, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 241, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 93, 
      "object_id": 320, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 242, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 321, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 307, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 321, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 244, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 94, 
      "object_id": 321, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 245, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 77, 
      "object_id": 322, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 246, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 322, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 308, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 322, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 248, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 94, 
      "object_id": 322, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 249, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 323, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 250, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 50, 
      "object_id": 323, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 251, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 323, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 252, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 95, 
      "object_id": 324, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 253, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 96, 
      "object_id": 325, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 254, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 326, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 255, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 326, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 256, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 325, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 257, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 327, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 258, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 327, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 259, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 97, 
      "object_id": 328, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 260, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 98, 
      "object_id": 328, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 262, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 99, 
      "object_id": 329, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 263, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 100, 
      "object_id": 329, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 264, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 96, 
      "object_id": 332, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 265, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 331, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 266, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 330, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 267, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 101, 
      "object_id": 333, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 268, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 333, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 272, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 100, 
      "object_id": 335, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 271, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 104, 
      "object_id": 335, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 273, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 97, 
      "object_id": 336, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 274, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 105, 
      "object_id": 336, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 275, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 337, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 276, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 90, 
      "object_id": 337, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 277, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 106, 
      "object_id": 338, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 278, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 54, 
      "object_id": 338, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 279, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 107, 
      "object_id": 339, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 280, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 106, 
      "object_id": 339, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 281, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 340, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 282, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 108, 
      "object_id": 340, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 283, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 109, 
      "object_id": 340, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 284, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 341, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 286, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 111, 
      "object_id": 341, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 287, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 107, 
      "object_id": 342, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 304, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 119, 
      "object_id": 342, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 303, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 106, 
      "object_id": 342, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 290, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 68, 
      "object_id": 343, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 291, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 114, 
      "object_id": 343, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 292, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 344, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 293, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 115, 
      "object_id": 344, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 310, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 346, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 306, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 94, 
      "object_id": 345, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 296, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 118, 
      "object_id": 345, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 305, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 114, 
      "object_id": 344, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 311, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 346, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 312, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 94, 
      "object_id": 346, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 313, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 120, 
      "object_id": 347, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 314, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 90, 
      "object_id": 347, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 315, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 81, 
      "object_id": 348, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 316, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 90, 
      "object_id": 348, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 344, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 357, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 318, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 118, 
      "object_id": 348, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 319, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 114, 
      "object_id": 349, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 320, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 122, 
      "object_id": 350, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 321, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 350, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 322, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 123, 
      "object_id": 350, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 323, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 350, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 324, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 312, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 325, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 312, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 326, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 124, 
      "object_id": 352, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 327, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 125, 
      "object_id": 352, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 328, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 126, 
      "object_id": 352, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 329, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 353, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 330, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 353, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 331, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 124, 
      "object_id": 354, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 332, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 125, 
      "object_id": 354, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 333, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 126, 
      "object_id": 354, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 334, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 355, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 335, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 127, 
      "object_id": 355, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 336, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 355, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 348, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 77, 
      "object_id": 358, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 347, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 134, 
      "object_id": 357, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 346, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 357, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 340, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 23, 
      "object_id": 356, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 345, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 133, 
      "object_id": 357, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 342, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 132, 
      "object_id": 356, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 343, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 356, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 349, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 13, 
      "object_id": 358, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 350, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 135, 
      "object_id": 358, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 351, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 136, 
      "object_id": 358, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 352, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 137, 
      "object_id": 358, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 353, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 138, 
      "object_id": 358, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 354, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 139, 
      "object_id": 359, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 355, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 140, 
      "object_id": 359, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 356, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 359, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 357, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 359, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 358, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 360, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 359, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 8, 
      "object_id": 360, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 360, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 360, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 361, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 77, 
      "object_id": 361, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 362, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 361, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 363, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 361, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 364, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 84, 
      "object_id": 361, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 365, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 141, 
      "object_id": 361, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 366, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 362, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 367, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 41, 
      "object_id": 362, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 368, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 362, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 369, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 363, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 370, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 142, 
      "object_id": 365, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 371, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 60, 
      "object_id": 365, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 372, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 365, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 373, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 366, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 374, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 366, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 375, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 33, 
      "object_id": 366, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 376, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 143, 
      "object_id": 367, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 377, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 55, 
      "object_id": 367, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 378, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 106, 
      "object_id": 367, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 379, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 368, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 380, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 368, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 381, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 144, 
      "object_id": 369, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 382, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 57, 
      "object_id": 369, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 383, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 56, 
      "object_id": 369, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 384, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 145, 
      "object_id": 369, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 385, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 146, 
      "object_id": 370, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 386, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 370, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 387, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 147, 
      "object_id": 371, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 388, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 148, 
      "object_id": 371, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 389, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 146, 
      "object_id": 371, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 390, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 4, 
      "object_id": 371, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 391, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 149, 
      "object_id": 371, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 392, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 150, 
      "object_id": 371, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 393, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 151, 
      "object_id": 372, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 394, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 37, 
      "object_id": 372, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 395, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 149, 
      "object_id": 372, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 396, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 152, 
      "object_id": 374, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 397, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 146, 
      "object_id": 374, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 398, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 153, 
      "object_id": 374, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 399, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 41, 
      "object_id": 374, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 400, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 375, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 401, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 50, 
      "object_id": 375, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 402, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 375, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 403, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 154, 
      "object_id": 375, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 404, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 376, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 405, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 155, 
      "object_id": 376, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 406, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 376, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 407, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 156, 
      "object_id": 377, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 408, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 50, 
      "object_id": 377, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 409, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 377, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 410, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 378, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 411, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 26, 
      "object_id": 378, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 412, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 378, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 413, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 95, 
      "object_id": 379, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 414, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 379, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 415, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 364, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 416, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 364, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 417, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 99, 
      "object_id": 380, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 418, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 157, 
      "object_id": 380, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 419, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 380, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 420, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 380, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 421, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 57, 
      "object_id": 381, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 422, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 125, 
      "object_id": 381, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 423, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 56, 
      "object_id": 381, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 424, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 158, 
      "object_id": 381, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 425, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 382, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 428, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 7, 
      "object_id": 382, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 427, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 382, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 429, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 383, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 430, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 26, 
      "object_id": 383, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 431, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 383, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 432, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 384, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 433, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 26, 
      "object_id": 384, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 434, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 384, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 435, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 160, 
      "object_id": 385, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 436, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 161, 
      "object_id": 385, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 437, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 84, 
      "object_id": 385, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 438, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 141, 
      "object_id": 385, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 439, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 37, 
      "object_id": 386, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 440, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 2, 
      "object_id": 386, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 441, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 3, 
      "object_id": 386, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 442, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 86, 
      "object_id": 387, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 443, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 387, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 444, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 80, 
      "object_id": 387, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 445, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 14, 
      "object_id": 387, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 446, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 388, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 447, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 162, 
      "object_id": 388, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 448, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 30, 
      "object_id": 388, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 449, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 163, 
      "object_id": 389, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 450, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 79, 
      "object_id": 389, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 451, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 164, 
      "object_id": 389, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 452, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 165, 
      "object_id": 391, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 453, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 391, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 454, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 391, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 455, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 391, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 456, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 27, 
      "object_id": 392, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 457, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 106, 
      "object_id": 392, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 458, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 1, 
      "object_id": 393, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 459, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 38, 
      "object_id": 393, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 460, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 166, 
      "object_id": 393, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 461, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 47, 
      "object_id": 394, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 462, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 167, 
      "object_id": 394, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 463, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 26, 
      "object_id": 394, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 464, 
    "model": "tagging.taggeditem", 
    "fields": {
      "tag": 78, 
      "object_id": 394, 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 1, 
    "model": "blog.template", 
    "fields": {
      "title_slug": "blog", 
      "title": "Blog", 
      "date_updated": "2010-04-21 22:01:47", 
      "active": true, 
      "detail_path": "/home/jtsnakec/django-projects/rockycode/templates/collections/blog_detail.html", 
      "date_created": "2010-04-21 22:01:47", 
      "list_path": "/home/jtsnakec/django-projects/rockycode/templates/collections/blog_list.html"
    }
  }, 
  {
    "pk": 1, 
    "model": "blog.collection", 
    "fields": {
      "description": "", 
      "title_slug": "blog", 
      "title": "Blog", 
      "date_updated": "2010-04-21 22:01:52", 
      "template": 1, 
      "active": true, 
      "date_created": "2010-04-21 22:01:52", 
      "fake_sort": 100
    }
  }, 
  {
    "pk": 300, 
    "model": "blog.article", 
    "fields": {
      "body": "For instance, often these models have data that needs to be shown onscreen to update the ui.  The fields are simple there -- whoa, available!  So much easier than Java -- to iterate through:\r\n\r\n<code class=\"javascript\">\r\nfor (field in obj) { /* ... */ }\r\n</code>\r\n\r\nOnce we can iterate through the fields, then we can throw them out onto the page.  One way that I like to do this is by careful naming of page elements to correspond to field names in the object.  \r\n\r\nSo, here's a full-length demo (using jquery):\r\n\r\n<code class=\"javascript\">\r\n\r\nvar pojso = {\r\n  id: 3,\r\n  name: 'Call me Ishmael!'\r\n};\r\n\r\nfunction updateUI(obj) {\r\n  for (field in obj) {\r\n    $('#ui-' + field).html(obj[field]);\r\n  }\r\n}\r\n\r\n// normally, put this in an event handler\r\nupdateUI(pojso);\r\n</code>\r\n\r\n<code class=\"html\">\r\n<!-- the islands to be updated -->\r\n\r\n<div id=\"ui-id\"></div>\r\n<div id=\"ui-name\"></div>\r\n\r\n</code>\r\n\r\nNow can I have my Christmas anagrams and go home?\r\n\r\n<h3>Update</h3>\r\nNow, while this post is still young and tender, I want to make a final point of recording how to execute a function within an object.  Let's say that pojso became a little less plain and simple:\r\n\r\n<code class=\"javascript\">\r\nvar nijso = {\r\n  id: 3,\r\n  name: 'New and improved',\r\n  action: function () { \r\n    alert('Souit action!');\r\n  }\r\n}\r\n</code>\r\n\r\nNow, in order to execute the new action function with the name (this would probably come in handy if you only had the name in some sort of programmatic instance, like executing all/a set of functions on the object in a loop, try this:\r\n\r\n<code class=\"javascript\">\r\nnijso['action'](); // this would get you an alert\r\n</code>", 
      "date_published": "2009-12-18 13:27:39", 
      "image_path": null, 
      "title_slug": "access-js-object-fields", 
      "rendered_body": "For instance, often these models have data that needs to be shown onscreen to update the ui.  The fields are simple there -- whoa, available!  So much easier than Java -- to iterate through:\r\n\r\n<code class=\"javascript\">\r\nfor (field in obj) { /* ... */ }\r\n</code>\r\n\r\nOnce we can iterate through the fields, then we can throw them out onto the page.  One way that I like to do this is by careful naming of page elements to correspond to field names in the object.  \r\n\r\nSo, here's a full-length demo (using jquery):\r\n\r\n<code class=\"javascript\">\r\n\r\nvar pojso = {\r\n  id: 3,\r\n  name: 'Call me Ishmael!'\r\n};\r\n\r\nfunction updateUI(obj) {\r\n  for (field in obj) {\r\n    $('#ui-' + field).html(obj[field]);\r\n  }\r\n}\r\n\r\n// normally, put this in an event handler\r\nupdateUI(pojso);\r\n</code>\r\n\r\n<code class=\"html\">\r\n<!-- the islands to be updated -->\r\n\r\n<div id=\"ui-id\"></div>\r\n<div id=\"ui-name\"></div>\r\n\r\n</code>\r\n\r\nNow can I have my Christmas anagrams and go home?\r\n\r\n<h3>Update</h3>\r\nNow, while this post is still young and tender, I want to make a final point of recording how to execute a function within an object.  Let's say that pojso became a little less plain and simple:\r\n\r\n<code class=\"javascript\">\r\nvar nijso = {\r\n  id: 3,\r\n  name: 'New and improved',\r\n  action: function () { \r\n    alert('Souit action!');\r\n  }\r\n}\r\n</code>\r\n\r\nNow, in order to execute the new action function with the name (this would probably come in handy if you only had the name in some sort of programmatic instance, like executing all/a set of functions on the object in a loop, try this:\r\n\r\n<code class=\"javascript\">\r\nnijso['action'](); // this would get you an alert\r\n</code>", 
      "date_updated": "2010-05-04 12:04:45", 
      "demo": null, 
      "markup": "h", 
      "title": "Access JS object fields", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Sometimes it is useful to be able to iterate through the fields in a javascript object and use the values kept therein for something spectacular.  I've found this to be the case for POJSOs (+S = 'Script') that I pass down to the client with new-found data from the backend.\r\n\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-12-18 13:28:33",  
      "tags": "javascript"
    }
  }, 
  {
    "pk": 315, 
    "model": "blog.article", 
    "fields": {
      "body": ".. code-block:: javascript\r\n\r\n  $(\"#peace\").addClass('be-still');\r\n  // or\r\n  $(\"#peace\").removeClass('be-still');\r\n\r\nAnd now for raw power and lack of ease and grace:\r\n\r\n.. code-block:: javascript\r\n\r\n  document.getElementById(\"peace\").className = \"be-still\";\r\n\r\nIf you want to add or remove your own, you have to write that goodness, and here's one implementation example for your souit pleasure:\r\n\r\n.. code-block:: javascript\r\n\r\n  function hasClass(ele,cls) {\r\n    return ele.className.match(new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)'));\r\n  }\r\n\r\n  function addClass(ele,cls) {\r\n    if (!hasClass(ele,cls)) ele.className += \" \"+cls;\r\n  }\r\n\r\n  function removeClass(ele,cls) {\r\n    if (hasClass(ele,cls)) {\r\n        var reg = new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)');\r\n        ele.className=ele.className.replace(reg,' ');\r\n    }\r\n  }\r\n\r\nCalled like:\r\n\r\n.. code-block:: javascript\r\n\r\n  var ele = document.getElementById(\"peace\");\r\n  addClass(ele, \"be-still\");\r\n  // or\r\n  removeClass(ele, \"be-still\");\r\n\r\n", 
      "date_published": "2010-05-19 11:19:29", 
      "image_path": "", 
      "title_slug": "addremove-classes-raw-javascript", 
      "rendered_body": "<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&quot;#peace&quot;</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s1\">&#39;be-still&#39;</span><span class=\"p\">);</span>\n<span class=\"c\">// or</span>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&quot;#peace&quot;</span><span class=\"p\">).</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s1\">&#39;be-still&#39;</span><span class=\"p\">);</span>\n</pre></div>\n</div><p>And now for raw power and lack of ease and grace:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">&quot;peace&quot;</span><span class=\"p\">).</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;be-still&quot;</span><span class=\"o\">;</span>\n</pre></div>\n</div><p>If you want to add or remove your own, you have to write that goodness, and here's one implementation example for your souit pleasure:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kd\">function</span> <span class=\"nx\">hasClass</span><span class=\"p\">(</span><span class=\"nx\">ele</span><span class=\"o\">,</span><span class=\"nx\">cls</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">ele</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"s1\">&#39;(\\\\s|^)&#39;</span><span class=\"o\">+</span><span class=\"nx\">cls</span><span class=\"o\">+</span><span class=\"s1\">&#39;(\\\\s|$)&#39;</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"nx\">ele</span><span class=\"o\">,</span><span class=\"nx\">cls</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">hasClass</span><span class=\"p\">(</span><span class=\"nx\">ele</span><span class=\"o\">,</span><span class=\"nx\">cls</span><span class=\"p\">))</span> <span class=\"nx\">ele</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot; &quot;</span><span class=\"o\">+</span><span class=\"nx\">cls</span><span class=\"o\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"nx\">ele</span><span class=\"o\">,</span><span class=\"nx\">cls</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">hasClass</span><span class=\"p\">(</span><span class=\"nx\">ele</span><span class=\"o\">,</span><span class=\"nx\">cls</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">reg</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"s1\">&#39;(\\\\s|^)&#39;</span><span class=\"o\">+</span><span class=\"nx\">cls</span><span class=\"o\">+</span><span class=\"s1\">&#39;(\\\\s|$)&#39;</span><span class=\"p\">);</span>\n      <span class=\"nx\">ele</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"nx\">ele</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">reg</span><span class=\"o\">,</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div><p>Called like:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">ele</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">&quot;peace&quot;</span><span class=\"p\">);</span>\n<span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"nx\">ele</span><span class=\"o\">,</span> <span class=\"s2\">&quot;be-still&quot;</span><span class=\"p\">);</span>\n<span class=\"c\">// or</span>\n<span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"nx\">ele</span><span class=\"o\">,</span> <span class=\"s2\">&quot;be-still&quot;</span><span class=\"p\">);</span>\n</pre></div>\n</div>", 
      "date_updated": "2010-10-10 09:50:57", 
      "demo": "", 
      "markup": "r", 
      "title": "Add/Remove Classes with Raw Javascript", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Jquery and other sweeto js frameworks have some awesomeness to help you change the css classes of various elements on the page with ease and grace.  They have some very convenient functions to add and remove classes.  These are uber-useful and highly recommended for saving you precious time and jiggawatts, but if you don't have jquery available to you, sometimes you may want to do this in raw javascript.  ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-05-19 11:20:21", 
       
      "tags": "javascript jquery"
    }
  }, 
  {
    "pk": 371, 
    "model": "blog.article", 
    "fields": {
      "body": "Why Java\r\n-----------\r\n\r\nWe do a fair amount of our development on MarkLogic lately.  Our app right now happens to be heaped in XQuery.  When we learned that we had to interface with an external system passing AES-encrypted payloads, I did a quick looksy into what was needed for AES encryption.  Turns out that AES is rather complicated to implement.  So easy, even a `stick figure <http://www.moserware.com/2009/09/stick-figure-guide-to-advanced.html>`_ can do it.  :)  If you want a nice (but dry) higher level overview of AES, `Patrick Townsend <http://www.youtube.com/watch?v=Xna-qBWgn90>`_ can provide.  But the bottom line was that it couldn't be implemented in MarkLogic because the only hash function we had available was `xdmp:md5 <http://developer.marklogic.com/pubs/4.2/apidocs/Ext-1.html#xdmp:md5>`_.  And Java already had a nice AES encryption provider, `Bouncy Castle <http://www.bouncycastle.org/>`_.  So, it was Java Webservice time...\r\n\r\nIllegal Key Size Jar Fix\r\n---------------------------\r\n\r\nThe first issue I ran into was this exception:\r\n\r\n.. code-block:: java\r\n\r\n  java.security.InvalidKeyException:Illegal Key Size\r\n\r\nThat is solved in an earlier `article about JCE jars <http://rockycode.com/blog/java-encryption-illegal-key-size/>`_.\r\n\r\nFinally, I was able to encrypt my payload using AES-192 but then when I sentthe data to the receiver, they weren't able to decrypt it.  Something was wrong again.\r\n\r\nClasspath Resource or Not?  Not!\r\n---------------------------------------\r\n\r\nFirst, I found out that when I put my key in as a classpath resource, the key was changed at build time.  When it got deployed to target it went from 40 bytes to 69 bytes:\r\n\r\n.. code-block:: bash\r\n\r\n  -rw-r--r-- 1 me me 69 2011-04-12 08:05 after.key\r\n  -rw-r--r-- 1 me me 40 2011-04-12 08:05 before.key\r\n\r\nSo, leave the key outside the classpath.  And put it in WEB-INF if you don't want it accessible over the network.  Then use the servlet context to load the file.  I happen to be in Spring3 land:\r\n\r\n.. code-block:: java\r\n\r\n  import javax.servlet.ServletContext;\r\n\r\n  // ..\r\n\r\n  @Autowired\r\n  ServletContext servletContext;\r\n\r\n  private File getKeyFile() {\r\n    String path = servletContext.getRealPath(\"/WEB-INF/key\");\r\n    return new File(path);\r\n  }\r\n\r\nEncrypted Payload on the Wire(shark)\r\n--------------------------------------------\r\n\r\nBut, it turned out that the receiver still couldn't decrypt what I encrypted, even though we were fairly certain that our keys were either the same or generated in the same fashion (same passphrase, etc).  So, I ran some code provided by another app that encrypts data to send to the same receiver.  I set the debugger so I could grab their generated cipher text and then send it myself.  When I did this, it still didn't work!  Then I busted out Wireshark:\r\n\r\n.. code-block:: bash\r\n\r\n  sudo apt-get install wireshark\r\n\r\n(I love package managers!)  And I found that the cipher text going over the wire was different than what I had grabbed in the debugger.  When comparing the two, I found the length of the payload over the wire was longer than in the debugger.  For instance, the char \"+2\" was changed to \"%2B2\".  Different encoding!  So, then I made sure that I was using the proper encoding:\r\n\r\n.. code-block:: java\r\n\r\n  import java.net.URLEncoder;\r\n\r\n  public String encrypt() {\r\n    // .. encryption impl\r\n    return URLEncoder.encode(cipherText, \"UTF-8\");\r\n  }\r\n\r\nServletContext in a WAR deployment\r\n-------------------------------------------\r\n\r\nFinally!  I was able to pass an encrypted payload to the receiver in my local environment.  But when I deployed to Tomcat as a war file, suddently my key was unable to be found in WEB-INF.  I discovered that:\r\n\r\n.. code-block:: java\r\n\r\n  servletContext.getRealPath(\"/WEB-INF/key\")\r\n\r\nDoesn't work in a war deploy.  From the Javadoc:\r\n\r\n.. code-block:: javadoc\r\n\r\n  The real path returned will be in a form\r\n  appropriate to the computer and operating system on\r\n  which the servlet container is running, including the\r\n  proper path separators. This method returns <code>null</code>\r\n  if the servlet container cannot translate the virtual path\r\n  to a real path for any reason (such as when the content is\r\n  being made available from a <code>.war</code> archive\r\n\r\nSo, the Tomcat deploy had to be adjusted via the server.xml:\r\n\r\n.. code-block:: xml\r\n\r\n  <Host name=\"localhost\" appBase=\"webapps\" unpackWARs=\"true\" \r\n\r\nOnce the WAR was exploded in the webapps directory, the key file was findable again.  But now I begin to learn that it's best to put such secret keys in a `KeyStore <http://download.oracle.com/javase/6/docs/api/java/security/KeyStore.html>`_.  \r\n\r\nValidate the BouncyCastle Provider\r\n-----------------------------------------\r\n\r\nStill the battle rages.  Now there was a new champion of evil to vanquish... Now that I could actually find the key and start encrypting in the deployed environment, this beast reared its ugly head:\r\n\r\n.. code-block:: java\r\n \r\n  java.security.NoSuchAlgorithmException: PBEWithSHAAndTwofish-CBC SecretKeyFactory not available\r\n\r\nLame!  Googling this exception landed us on some sweet `BouncyCastle setup tutorials <http://sce.uhcl.edu/yang/teaching/JDK_JCE_environment_Configuration.htm>`_.  Apparently your BouncyCastle version needs to match your JDK version.  So, we made the necessary adjustments in our pom:\r\n\r\n.. code-block:: xml\r\n\r\n  <dependency>\r\n    <groupId>bouncycastle</groupId>\r\n    <artifactId>bcprov-jdk16</artifactId>\r\n    <version>140</version>\r\n  </dependency>\r\n\r\n(There are more recent versions that might be in your `Maven repo <http://repo2.maven.org/maven2/org/bouncycastle/>`_.)\r\n\r\nStill it wasn't enough.  The exception persisted and so did we.  Hours later our energy wained, but Spencer came to reinforce us and we were able to hook up a remote debugger to our deployed app.  We were obviously adding the BouncyCastle provider in our code, so that looked good:\r\n\r\n.. code-block:: java\r\n\r\n  Security.addProvider(new BouncyCastleProvider());\r\n\r\nBut when we went to use it:\r\n\r\n.. code-block:: java\r\n\r\n  factory = SecretKeyFactory.getInstance(\"PBEWithSHAAndTwofish-CBC\");\r\n\r\nIt blew some serious chunks.  On our remote debugger, when we tried to retrieve the BouncyCastle provider ourself:\r\n\r\n.. code-block:: java\r\n\r\n  SecretKeyFactory.getInstance(\"PBEWithSHAAndTwofish-CBC\", new BouncyCastleProvider())\r\n\r\nWe got a new clue:\r\n\r\n.. code-block:: java\r\n\r\n  java.lang.SecurityException: JCE cannot authenticate the provider BC\r\n\r\n  .. caused by ..\r\n\r\n  java.util.jar.JarException: Cannot parse file\r\n\r\nThe jar was the one deployed in WEB-INF/lib.  Well, somehow that clicked in our good friend, Spencer's, mind because he immediately changed our deployment to Tomcat so that instead of the bcprov-jdk16-140.jar being deployed to WEB-INF/lib, he deployed it to <TOMCAT_HOME>/applib.  The apparent difference is that when the jar is in applib, it's loaded by Tomcat's class loader.  When it's in WEB-INF/lib, it's loaded by the app's class loader, which apparently wasn't cutting it.  \r\nTo get our BouncyCastle jar not to deploy to WEB-INF/lib, we had to change our dependency:\r\n\r\n.. code-block:: xml\r\n\r\n  <dependency>\r\n    <groupId>bouncycastle</groupId>\r\n    <artifactId>bcprov-jdk16</artifactId>\r\n    <version>140</version>\r\n    <scope>provided</scope>\r\n  </dependency>\r\n\r\nFrom the `Maven Docs <http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html>`_:\r\n\r\n  This is much like compile, but indicates you expect the JDK or a container to provide the dependency at runtime. For example, when building a web application for the Java Enterprise Edition, you would set the dependency on the Servlet API and related Java EE APIs to scope provided because the web container provides those classes. This scope is only available on the compilation and test classpath, and is not transitive.\r\n\r\nSince we are deploying bcprov-jdk16-140.jar to applib by another means, this scope is perfect for us.  It also seems that there are other ways around this particular problem, such as defining BouncyCastle as a provider on your JVM via editing the `security.provider <http://www.randombugs.com/java/javalangsecurityexception-jce-authenticate-provider-bc.html>`_ file.\r\n\r\nWell, now it works.  It was a serious adventure -- even an odyssey.  I need a nap.\r\n", 
      "date_published": "2011-04-12 16:24:46", 
      "image_path": "", 
      "title_slug": "aes-encryption-java-bouncy-castle", 
      "rendered_body": "<div class=\"section\" id=\"why-java\">\n<h1>Why Java</h1>\n<p>We do a fair amount of our development on MarkLogic lately.  Our app right now happens to be heaped in XQuery.  When we learned that we had to interface with an external system passing AES-encrypted payloads, I did a quick looksy into what was needed for AES encryption.  Turns out that AES is rather complicated to implement.  So easy, even a <a class=\"reference external\" href=\"http://www.moserware.com/2009/09/stick-figure-guide-to-advanced.html\">stick figure</a> can do it.  :)  If you want a nice (but dry) higher level overview of AES, <a class=\"reference external\" href=\"http://www.youtube.com/watch?v=Xna-qBWgn90\">Patrick Townsend</a> can provide.  But the bottom line was that it couldn't be implemented in MarkLogic because the only hash function we had available was <a class=\"reference external\" href=\"http://developer.marklogic.com/pubs/4.2/apidocs/Ext-1.html#xdmp:md5\">xdmp:md5</a>.  And Java already had a nice AES encryption provider, <a class=\"reference external\" href=\"http://www.bouncycastle.org/\">Bouncy Castle</a>.  So, it was Java Webservice time...</p>\n</div>\n<div class=\"section\" id=\"illegal-key-size-jar-fix\">\n<h1>Illegal Key Size Jar Fix</h1>\n<p>The first issue I ran into was this exception:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">security</span><span class=\"o\">.</span><span class=\"na\">InvalidKeyException</span><span class=\"o\">:</span><span class=\"n\">Illegal</span> <span class=\"n\">Key</span> <span class=\"n\">Size</span>\n</pre></div>\n</div><p>That is solved in an earlier <a class=\"reference external\" href=\"http://rockycode.com/blog/java-encryption-illegal-key-size/\">article about JCE jars</a>.</p>\n<p>Finally, I was able to encrypt my payload using AES-192 but then when I sentthe data to the receiver, they weren't able to decrypt it.  Something was wrong again.</p>\n</div>\n<div class=\"section\" id=\"classpath-resource-or-not-not\">\n<h1>Classpath Resource or Not?  Not!</h1>\n<p>First, I found out that when I put my key in as a classpath resource, the key was changed at build time.  When it got deployed to target it went from 40 bytes to 69 bytes:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>-rw-r--r-- 1 me me 69 2011-04-12 08:05 after.key\n-rw-r--r-- 1 me me 40 2011-04-12 08:05 before.key\n</pre></div>\n</div><p>So, leave the key outside the classpath.  And put it in WEB-INF if you don't want it accessible over the network.  Then use the servlet context to load the file.  I happen to be in Spring3 land:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">javax.servlet.ServletContext</span><span class=\"o\">;</span>\n\n<span class=\"c1\">// ..</span>\n\n<span class=\"nd\">@Autowired</span>\n<span class=\"n\">ServletContext</span> <span class=\"n\">servletContext</span><span class=\"o\">;</span>\n\n<span class=\"kd\">private</span> <span class=\"n\">File</span> <span class=\"nf\">getKeyFile</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"n\">String</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">servletContext</span><span class=\"o\">.</span><span class=\"na\">getRealPath</span><span class=\"o\">(</span><span class=\"s\">&quot;/WEB-INF/key&quot;</span><span class=\"o\">);</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">File</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div></div>\n<div class=\"section\" id=\"encrypted-payload-on-the-wire-shark\">\n<h1>Encrypted Payload on the Wire(shark)</h1>\n<p>But, it turned out that the receiver still couldn't decrypt what I encrypted, even though we were fairly certain that our keys were either the same or generated in the same fashion (same passphrase, etc).  So, I ran some code provided by another app that encrypts data to send to the same receiver.  I set the debugger so I could grab their generated cipher text and then send it myself.  When I did this, it still didn't work!  Then I busted out Wireshark:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo apt-get install wireshark\n</pre></div>\n</div><p>(I love package managers!)  And I found that the cipher text going over the wire was different than what I had grabbed in the debugger.  When comparing the two, I found the length of the payload over the wire was longer than in the debugger.  For instance, the char &quot;+2&quot; was changed to &quot;%2B2&quot;.  Different encoding!  So, then I made sure that I was using the proper encoding:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">java.net.URLEncoder</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">encrypt</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"c1\">// .. encryption impl</span>\n  <span class=\"k\">return</span> <span class=\"n\">URLEncoder</span><span class=\"o\">.</span><span class=\"na\">encode</span><span class=\"o\">(</span><span class=\"n\">cipherText</span><span class=\"o\">,</span> <span class=\"s\">&quot;UTF-8&quot;</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div></div>\n<div class=\"section\" id=\"servletcontext-in-a-war-deployment\">\n<h1>ServletContext in a WAR deployment</h1>\n<p>Finally!  I was able to pass an encrypted payload to the receiver in my local environment.  But when I deployed to Tomcat as a war file, suddently my key was unable to be found in WEB-INF.  I discovered that:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"n\">servletContext</span><span class=\"o\">.</span><span class=\"na\">getRealPath</span><span class=\"o\">(</span><span class=\"s\">&quot;/WEB-INF/key&quot;</span><span class=\"o\">)</span>\n</pre></div>\n</div><p>Doesn't work in a war deploy.  From the Javadoc:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>The real path returned will be in a form\nappropriate to the computer and operating system on\nwhich the servlet container is running, including the\nproper path separators. This method returns &lt;code&gt;null&lt;/code&gt;\nif the servlet container cannot translate the virtual path\nto a real path for any reason (such as when the content is\nbeing made available from a &lt;code&gt;.war&lt;/code&gt; archive\n</pre></div>\n</div><p>So, the Tomcat deploy had to be adjusted via the server.xml:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;Host</span> <span class=\"na\">name=</span><span class=\"s\">&quot;localhost&quot;</span> <span class=\"na\">appBase=</span><span class=\"s\">&quot;webapps&quot;</span> <span class=\"na\">unpackWARs=</span><span class=\"s\">&quot;true&quot;</span>\n</pre></div>\n</div><p>Once the WAR was exploded in the webapps directory, the key file was findable again.  But now I begin to learn that it's best to put such secret keys in a <a class=\"reference external\" href=\"http://download.oracle.com/javase/6/docs/api/java/security/KeyStore.html\">KeyStore</a>.</p>\n</div>\n<div class=\"section\" id=\"validate-the-bouncycastle-provider\">\n<h1>Validate the BouncyCastle Provider</h1>\n<p>Still the battle rages.  Now there was a new champion of evil to vanquish... Now that I could actually find the key and start encrypting in the deployed environment, this beast reared its ugly head:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">security</span><span class=\"o\">.</span><span class=\"na\">NoSuchAlgorithmException</span><span class=\"o\">:</span> <span class=\"n\">PBEWithSHAAndTwofish</span><span class=\"o\">-</span><span class=\"n\">CBC</span> <span class=\"n\">SecretKeyFactory</span> <span class=\"n\">not</span> <span class=\"n\">available</span>\n</pre></div>\n</div><p>Lame!  Googling this exception landed us on some sweet <a class=\"reference external\" href=\"http://sce.uhcl.edu/yang/teaching/JDK_JCE_environment_Configuration.htm\">BouncyCastle setup tutorials</a>.  Apparently your BouncyCastle version needs to match your JDK version.  So, we made the necessary adjustments in our pom:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;dependency&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>bouncycastle<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>bcprov-jdk16<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>140<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</pre></div>\n</div><p>(There are more recent versions that might be in your <a class=\"reference external\" href=\"http://repo2.maven.org/maven2/org/bouncycastle/\">Maven repo</a>.)</p>\n<p>Still it wasn't enough.  The exception persisted and so did we.  Hours later our energy wained, but Spencer came to reinforce us and we were able to hook up a remote debugger to our deployed app.  We were obviously adding the BouncyCastle provider in our code, so that looked good:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"n\">Security</span><span class=\"o\">.</span><span class=\"na\">addProvider</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">BouncyCastleProvider</span><span class=\"o\">());</span>\n</pre></div>\n</div><p>But when we went to use it:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">SecretKeyFactory</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">(</span><span class=\"s\">&quot;PBEWithSHAAndTwofish-CBC&quot;</span><span class=\"o\">);</span>\n</pre></div>\n</div><p>It blew some serious chunks.  On our remote debugger, when we tried to retrieve the BouncyCastle provider ourself:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"n\">SecretKeyFactory</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">(</span><span class=\"s\">&quot;PBEWithSHAAndTwofish-CBC&quot;</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">BouncyCastleProvider</span><span class=\"o\">())</span>\n</pre></div>\n</div><p>We got a new clue:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">lang</span><span class=\"o\">.</span><span class=\"na\">SecurityException</span><span class=\"o\">:</span> <span class=\"n\">JCE</span> <span class=\"n\">cannot</span> <span class=\"n\">authenticate</span> <span class=\"n\">the</span> <span class=\"n\">provider</span> <span class=\"n\">BC</span>\n\n<span class=\"o\">..</span> <span class=\"n\">caused</span> <span class=\"n\">by</span> <span class=\"o\">..</span>\n\n<span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">util</span><span class=\"o\">.</span><span class=\"na\">jar</span><span class=\"o\">.</span><span class=\"na\">JarException</span><span class=\"o\">:</span> <span class=\"n\">Cannot</span> <span class=\"n\">parse</span> <span class=\"n\">file</span>\n</pre></div>\n</div><p>The jar was the one deployed in WEB-INF/lib.  Well, somehow that clicked in our good friend, Spencer's, mind because he immediately changed our deployment to Tomcat so that instead of the bcprov-jdk16-140.jar being deployed to WEB-INF/lib, he deployed it to &lt;TOMCAT_HOME&gt;/applib.  The apparent difference is that when the jar is in applib, it's loaded by Tomcat's class loader.  When it's in WEB-INF/lib, it's loaded by the app's class loader, which apparently wasn't cutting it.\nTo get our BouncyCastle jar not to deploy to WEB-INF/lib, we had to change our dependency:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;dependency&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>bouncycastle<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>bcprov-jdk16<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>140<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;scope&gt;</span>provided<span class=\"nt\">&lt;/scope&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</pre></div>\n</div><p>From the <a class=\"reference external\" href=\"http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html\">Maven Docs</a>:</p>\n<blockquote>\nThis is much like compile, but indicates you expect the JDK or a container to provide the dependency at runtime. For example, when building a web application for the Java Enterprise Edition, you would set the dependency on the Servlet API and related Java EE APIs to scope provided because the web container provides those classes. This scope is only available on the compilation and test classpath, and is not transitive.</blockquote>\n<p>Since we are deploying bcprov-jdk16-140.jar to applib by another means, this scope is perfect for us.  It also seems that there are other ways around this particular problem, such as defining BouncyCastle as a provider on your JVM via editing the <a class=\"reference external\" href=\"http://www.randombugs.com/java/javalangsecurityexception-jce-authenticate-provider-bc.html\">security.provider</a> file.</p>\n<p>Well, now it works.  It was a serious adventure -- even an odyssey.  I need a nap.</p>\n</div>\n", 
      "date_updated": "2011-04-14 15:55:05", 
      "demo": "", 
      "markup": "r", 
      "title": "AES Encryption Odyssey in Java with Bouncy Castle", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Recently, I've been working on a project where I've tried to use AES encryption for the first time.  I didn't have to implement it myself, thank goodness, but I still ran into a few snags.  Perhaps you can avoid my pitfalls and rise to new greatness on the peaks of glory and fortitude!  This article title sounds like a laundry detergent.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-04-12 16:27:12", 
       
      "tags": "aes, bouncy castle, encryption, java, tomcat, wireshark"
    }
  }, 
  {
    "pk": 104, 
    "model": "blog.article", 
    "fields": {
      "body": "I love the volume control scheme for Vista that allows one to adjust the volume on a per-application basis.  It turns out that this functionality is also available for Linux!\r\n\r\nApparently, the future of audio for Linux is found in Pulseaudio.  My Hardy Heron install came with it preloaded, but in case you don't have it,\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install pulseaudio\r\n</code>\r\n\r\nIn order to get the individual program audio control, you also need this package:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install pavucontrol\r\n</code>\r\n\r\nOnce you've got it, just run it:\r\n\r\n<code class=\"bash\">\r\n./pavucontrol &\r\n</code>\r\n\r\nThe playback tab will show the playback streams available.  Nothing showed up here automagically for me.  Apparently the control has to catch another application \"in the act\" of producing sound in order to recognize the stream.  So, I booted up Kaffeine and played a bit of a DVD, and there it was -- bam! -- Kaffeine audio stream appeared!", 
      "date_published": "2008-11-18 14:56:42", 
      "image_path": null, 
      "title_slug": "application-audio-control-ubuntu", 
      "rendered_body": "I love the volume control scheme for Vista that allows one to adjust the volume on a per-application basis.  It turns out that this functionality is also available for Linux!\r\n\r\nApparently, the future of audio for Linux is found in Pulseaudio.  My Hardy Heron install came with it preloaded, but in case you don't have it,\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install pulseaudio\r\n</code>\r\n\r\nIn order to get the individual program audio control, you also need this package:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install pavucontrol\r\n</code>\r\n\r\nOnce you've got it, just run it:\r\n\r\n<code class=\"bash\">\r\n./pavucontrol &\r\n</code>\r\n\r\nThe playback tab will show the playback streams available.  Nothing showed up here automagically for me.  Apparently the control has to catch another application \"in the act\" of producing sound in order to recognize the stream.  So, I booted up Kaffeine and played a bit of a DVD, and there it was -- bam! -- Kaffeine audio stream appeared!", 
      "date_updated": "2010-05-04 12:04:45", 
      "demo": null, 
      "markup": "h", 
      "title": "Application Audio Control in Ubuntu", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I love the volume control scheme for Vista that allows one to adjust the volume on a per-application basis.  It turns out that this functionality is also available for Linux!", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 14:58:00", 
       
      "tags": "linux ubuntu"
    }
  }, 
  {
    "pk": 189, 
    "model": "blog.article", 
    "fields": {
      "body": "I like to use Arrays.asList as a nice one-line List creation tool.  But, it turns out that many operations, such as add() and remove() are unusable on the List that is returned.  The List returned is actually of type java.util.Arrays$ArrayList, a private static inner class of Arrays.  \r\n\r\nI was seeing this stack trace:\r\n\r\n<code class=\"java\">\r\njava.lang.UnsupportedOperationException\r\n\tat java.util.AbstractList.remove(AbstractList.java:172)\r\n\tat com.jtsnake.test.LettersBean.loadLetterOptions(LettersBean.java:554)\r\n\tat com.jtsnake.test.LettersBeanTest.testLoadLetterOptions(LettersBeanTest.java:974)\r\n</code>\r\n\r\nSo, if removals are something you want to do, this won't work:\r\n\r\n\r\n<code class=\"java\">\r\nList < LetterOption > list = Arrays.asList(new LetterOption());\r\nlist.remove(0);\r\n</code>\r\n\r\nInstead, you'll have to resort to the old-fashioned multi-liner:\r\n<code class=\"java\">\r\nList < LetterOption > list = new ArrayList < LetterOption > ();\r\nlist.add(new LetterOption());\r\nlist.remove(0);\r\n</code>\r\n\r\nI guess if you want flexible lists, you'll have to use Python after all.\r\n", 
      "date_published": "2009-04-29 09:29:35", 
      "image_path": null, 
      "title_slug": "arraysaslist-returns-immutable-list", 
      "rendered_body": "I like to use Arrays.asList as a nice one-line List creation tool.  But, it turns out that many operations, such as add() and remove() are unusable on the List that is returned.  The List returned is actually of type java.util.Arrays$ArrayList, a private static inner class of Arrays.  \r\n\r\nI was seeing this stack trace:\r\n\r\n<code class=\"java\">\r\njava.lang.UnsupportedOperationException\r\n\tat java.util.AbstractList.remove(AbstractList.java:172)\r\n\tat com.jtsnake.test.LettersBean.loadLetterOptions(LettersBean.java:554)\r\n\tat com.jtsnake.test.LettersBeanTest.testLoadLetterOptions(LettersBeanTest.java:974)\r\n</code>\r\n\r\nSo, if removals are something you want to do, this won't work:\r\n\r\n\r\n<code class=\"java\">\r\nList < LetterOption > list = Arrays.asList(new LetterOption());\r\nlist.remove(0);\r\n</code>\r\n\r\nInstead, you'll have to resort to the old-fashioned multi-liner:\r\n<code class=\"java\">\r\nList < LetterOption > list = new ArrayList < LetterOption > ();\r\nlist.add(new LetterOption());\r\nlist.remove(0);\r\n</code>\r\n\r\nI guess if you want flexible lists, you'll have to use Python after all.\r\n", 
      "date_updated": "2010-05-04 12:04:45", 
      "demo": null, 
      "markup": "h", 
      "title": "Arrays.asList returns immutable List", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I was having problems doing operations on a java.util.List object returned by Arrays.asList() method call.   The specific exception was a java.lang.UnsupportedOperationException.  I soon found out why this was a problem.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-04-29 09:36:25", 
       
      "tags": "java"
    }
  }, 
  {
    "pk": 314, 
    "model": "blog.article", 
    "fields": {
      "body": "I was trying to automate some tests that included a PDF loaded inside an IE 7 window. Using conventional methods, I could not attach to this new window, thus couldn't control whether it was done loading, or close it for that matter.\r\n\r\nI tried attaching by title/url to no avail.  So, I looped through all IE windows open and it wasn't there.\r\n\r\nI found this post (<a href=\"http://stackoverflow.com/questions/1191897/how-to-check-if-pdf-was-successfully-opened-in-the-browser-using-watin\">PDF with WatiN</a>). \r\n\r\nIt allows me to get information from that window and close it without any problems. I can also check to see if the window is still busy (aka loading).  WatiN uses the SHDocVw dll, but doesn't wrap these other \"IE\" windows into the IECollection, thus not being able to access it. Bypass the IECollection to get to the window you need.\r\n\r\n<code class=\"java\">\r\npublic static void closePDFInIE(string partialPDFUrl)\r\n        {\r\n            ShellWindows shellWindows = new ShellWindowsClass();\r\n\r\n            string filename;\r\n\r\n            foreach (InternetExplorer ie in shellWindows)\r\n            {\r\n                filename = Path.GetFileNameWithoutExtension(ie.FullName).ToLower();\r\n\r\n                if (filename.Equals(\"iexplore\") && ie.LocationURL.Contains(partialPDFUrl))\r\n                {\r\n                    int i = 0;\r\n                    bool hasLoaded = false;\r\n                    do\r\n                    {\r\n                        if (!ie.Busy)\r\n                        {\r\n                            hasLoaded = true;\r\n                        }\r\n                        else\r\n                        {\r\n                            i++;\r\n                            Thread.Sleep(1000);\r\n                        }\r\n                    } while (!hasLoaded || i == 25); //only wait 25 seconds, then move on.\r\n                    ie.Quit();\r\n                }\r\n            }\r\n        }\r\n</code>", 
      "date_published": "2010-05-17 07:25:29", 
      "image_path": "", 
      "title_slug": "attaching-pdf-window-ie-using-watin", 
      "rendered_body": "I was trying to automate some tests that included a PDF loaded inside an IE 7 window. Using conventional methods, I could not attach to this new window, thus couldn't control whether it was done loading, or close it for that matter.\r\n\r\nI tried attaching by title/url to no avail.  So, I looped through all IE windows open and it wasn't there.\r\n\r\nI found this post (<a href=\"http://stackoverflow.com/questions/1191897/how-to-check-if-pdf-was-successfully-opened-in-the-browser-using-watin\">PDF with WatiN</a>). \r\n\r\nIt allows me to get information from that window and close it without any problems. I can also check to see if the window is still busy (aka loading).  WatiN uses the SHDocVw dll, but doesn't wrap these other \"IE\" windows into the IECollection, thus not being able to access it. Bypass the IECollection to get to the window you need.\r\n\r\n<code class=\"java\">\r\npublic static void closePDFInIE(string partialPDFUrl)\r\n        {\r\n            ShellWindows shellWindows = new ShellWindowsClass();\r\n\r\n            string filename;\r\n\r\n            foreach (InternetExplorer ie in shellWindows)\r\n            {\r\n                filename = Path.GetFileNameWithoutExtension(ie.FullName).ToLower();\r\n\r\n                if (filename.Equals(\"iexplore\") && ie.LocationURL.Contains(partialPDFUrl))\r\n                {\r\n                    int i = 0;\r\n                    bool hasLoaded = false;\r\n                    do\r\n                    {\r\n                        if (!ie.Busy)\r\n                        {\r\n                            hasLoaded = true;\r\n                        }\r\n                        else\r\n                        {\r\n                            i++;\r\n                            Thread.Sleep(1000);\r\n                        }\r\n                    } while (!hasLoaded || i == 25); //only wait 25 seconds, then move on.\r\n                    ie.Quit();\r\n                }\r\n            }\r\n        }\r\n</code>", 
      "date_updated": "2010-05-17 07:29:01", 
      "demo": "", 
      "markup": "h", 
      "title": "Attaching to PDF Window in IE using WatiN", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I was trying to automate some tests that included a PDF loaded inside an IE 7 window. Using conventional methods, I could not attach to this new window, thus couldn't control whether it was done loading, or close it for that matter.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-05-17 07:27:09", 
       
      "tags": "csharp ie pdf watin"
    }
  }, 
  {
    "pk": 122, 
    "model": "blog.article", 
    "fields": {
      "body": "The interceptor configuration:\r\n\r\n<h3>persistence.xml</h3>\r\nYou'll find many docs that exist online showing how to configure Hibernate Interceptors.  Virtually none described anything that I had available to me.  In this app, we don't control the SessionFactory or Session's, the two most popular methods of registering your Interceptor.  We only configure the EntityManagerFactory.  I found only one <a href=\"http://www.hibernate.org/hib_docs/entitymanager/reference/en/html/configuration.html\">doc</a> that describes the property available.  Here it is implemented:\r\n<code class=\"xml\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\r\n\tversion=\"1.0\">\r\n\t<persistence-unit name=\"com.jtsnake.tracker\" transaction-type=\"JTA\">\r\n\t\t<!-- ... model objects listed ... -->\r\n\t\t<class>com.jtsnake.tracker.model.Person</class>\r\n        <exclude-unlisted-classes/>\r\n        <properties>\r\n            <property name=\"hibernate.ejb.interceptor\" value=\"com.jtsnake.tracker.util.HistoryInterceptor\" />\r\n        </properties>\r\n\t</persistence-unit>\r\n</persistence>\r\n</code>\r\n\r\n<h3>HistoryInterceptor.java</h3>\r\n\r\nYou'll want to notice a few things:\r\n<ul>\r\n<li>The 'instanceof Historical' is merely an optimization (see below).</li>\r\n<li>FacesContext is required as a workaround for dependency injection.  I couldn't get Spring to auto-inject dependencies as normally done in other classes.  If anyone knows another way, please <a href=\"#commentform\">let me know</a>, because I don't like this method.  All of these dependencies were defined as spring beans elsewhere.  You'll only have available to you what you would have on a JSF page via EL, as seen in the \"#{springBean}\" expressions.</li>\r\n<li>You may not need to save all of this data, which means that you could simplify the logic in this class.</li>\r\n<li>I could not do a regular entity object .save() for the history entry.  It wasn't available.  I had to make a direct table insert.  I did try the JPA method, however, but I kept getting the SequenceGenerator to fire, selecting nextval's again and again, but the history record was never written.  I, therefore, fell back on direct table insertion.</li>\r\n<li>One thing that tripped me up was the SimpleJdbcTemplate.  Previously, I have just used the JdbcTemplate.  Here, you don't have to specify <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/sql/Types.html\">Types</a>, but you'll want to make sure that the types (that will be determined automagically by the platform) of the objects you use for parameters in your insert  map strictly to the database column types.  A useful doc was found <a href=\"http://java.sun.com/j2se/1.5.0/docs/guide/jdbc/getstart/mapping.html\">here</a>.</li>\r\n</ul>\r\n\r\n<code class=\"java\">\r\npackage com.jtsnake.tracker.util;\r\n\r\nimport org.hibernate.CallbackException;\r\nimport org.hibernate.EmptyInterceptor;\r\nimport org.hibernate.type.Type;\r\nimport com.jtsnake.tracker.model.Historical;\r\nimport com.jtsnake.tracker.model.PieceOfHistory;\r\nimport com.jtsnake.tracker.model.HistoryChangeType;\r\nimport org.springframework.transaction.TransactionStatus;\r\nimport org.springframework.transaction.support.TransactionCallbackWithoutResult;\r\nimport org.springframework.transaction.support.TransactionTemplate;\r\nimport org.springframework.jdbc.core.simple.SimpleJdbcTemplate;\r\nimport org.springframework.dao.DataAccessException;\r\n\r\nimport javax.el.ValueExpression;\r\nimport javax.faces.context.FacesContext;\r\nimport javax.persistence.Column;\r\nimport java.io.Serializable;\r\nimport java.lang.reflect.Field;\r\nimport java.util.Date;\r\n\r\npublic class HistoryInterceptor extends EmptyInterceptor {\r\n\r\n    @Override\r\n    public boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState, String[] propertyNames, Type[] types) throws CallbackException {\r\n\r\n        if (entity instanceof Historical) {\r\n\r\n            FacesContext fc = FacesContext.getCurrentInstance();\r\n\r\n            if(fc == null) {\r\n                throw new RuntimeException(\"No FacesContext available. HistoryInterceptor currently only works in faces requests.\");\r\n            }\r\n\r\n            ValueExpression jdbcVe = fc.getApplication().getExpressionFactory().createValueExpression(fc.getELContext(), \"#{simpleJdbcTemplate}\", SimpleJdbcTemplate.class);\r\n            final SimpleJdbcTemplate simpleJdbcTemplate = (SimpleJdbcTemplate) jdbcVe.getValue(fc.getELContext());\r\n\r\n            ValueExpression txVe = fc.getApplication().getExpressionFactory().createValueExpression(fc.getELContext(), \"#{transactionTemplate}\", TransactionTemplate.class);\r\n            TransactionTemplate transactionTemplate = (TransactionTemplate) txVe.getValue(fc.getELContext());\r\n\r\n\t\t\t/** ... more dependencies ... */\r\n\r\n            for (Field f : entity.getClass().getDeclaredFields()) {\r\n                if (f.isAnnotationPresent(PieceOfHistory.class)) {\r\n                    String fieldName = f.getName();\r\n                    for (int i = 0; i < propertyNames.length; ++i) {\r\n                        if (propertyNames[i].equals(fieldName)) {\r\n                            if (isChanged(currentState[i], previousState[i]))  {\r\n                                HistoryChangeType type = f.getAnnotation(PieceOfHistory.class).type();\r\n                                saveHistoryEntry(simpleJdbcTemplate,\r\n                                                 transactionTemplate,\r\n                                                 getNullSafeString(previousState[i]),\r\n                                                 getNullSafeString(currentState[i]),\r\n                                                 username,\r\n                                                 type.toString(),\r\n                                                 getColumnName(f),\r\n                                                 type.getDefaultMessage(),\r\n                                                 getNullSafeLong(personId));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    String getColumnName(Field f) {\r\n        String colName = f.getName();\r\n        if (f.isAnnotationPresent(Column.class)) {\r\n            colName = f.getAnnotation(Column.class).name();\r\n        }\r\n        return colName;\r\n    }\r\n\r\n    boolean isChanged(Object currentState, Object previousState) {\r\n        return (previousState == null && currentState != null) // nothing to something\r\n            || (previousState != null && currentState == null) // something to nothing\r\n            || (previousState != null && !previousState.equals(currentState)); // something to something else\r\n    }\r\n\r\n    String getNullSafeString(Object obj) {\r\n        return obj != null ? obj.toString() : \"NULL\";\r\n    }\r\n\r\n    Long getNullSafeLong(Long l) {\r\n        return l != null ? l : 0L;\r\n    }\r\n\r\n    void saveHistoryEntry(final SimpleJdbcTemplate simpleJdbcTemplate,\r\n                          TransactionTemplate transactionTemplate,\r\n                          final String oldValue,\r\n                          final String newValue,\r\n                          final String username,\r\n                          final String changeType,\r\n                          final String columnName,\r\n                          final String changeMessage,\r\n                          final Long personId) {\r\n        transactionTemplate.execute(new TransactionCallbackWithoutResult() {\r\n\r\n\t@Override\r\n\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\r\n               java.sql.Date date = new java.sql.Date(new Date().getTime());\r\n               simpleJdbcTemplate.update(\r\n                    \"insert into mssw.person_history \" +\r\n                        \"(           person_id \" +\r\n                        \",           modified_date \" +\r\n                        \",           username \" +\r\n                        \",           type \" +\r\n                        \",           msg \" +\r\n                        \",           old \" +\r\n                        \",           new \" +\r\n                        \",           col_name \" +\r\n                        \") values (  ?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8 ) \",\r\n                        personId, date, username, changeType, changeMessage, oldValue, newValue, columnName);\r\n            }\r\n\t});\r\n    }\r\n\r\n}\r\n</code>\r\n\r\nThe interceptor uses some other classes and interfaces to do it's work:  The check for Historical interface is only an optimization, allowing the code inside to only spin on modifications to classes of interest and not all changes.\r\n\r\n<h3>Historical.java</h3>\r\n<code class=\"java\">\r\npackage com.jtsnake.tracker.model;\r\n\r\npublic interface Historical {\r\n    // marker interface only\r\n}\r\n</code>\r\n\r\nThe PieceOfHistory interface (don't you love the names based on cliche's) is to mark those fields that need to have their changes tracked:\r\n\r\n<h3>PieceOfHistory.java</h3>\r\n<code class=\"java\">\r\npackage com.jtsnake.tracker.model;\r\n\r\nimport java.lang.annotation.ElementType;\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\nimport java.lang.annotation.Target;\r\n\r\n@Target({ElementType.FIELD})\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface PieceOfHistory {\r\n    HistoryChangeType type();\r\n}\r\n</code>\r\n\r\nImportant pieces of data are marked in the entity models.  Here's one: Person.java.  Here, you can see that the preferredFirstName field was marked with the PieceOfHistory interface, where the type (a HistoryChangeType to show category) of change is specified.\r\n\r\n<h3>Person.java</h3>\r\n<code class=\"java\">\r\npackage com.jtsnake.tracker.model;\r\n\r\n@Entity\r\n@Table(name=\"person\")\r\n@SuppressWarnings(\"serial\")\r\npublic class Person implements Serializable, Historical {\r\n\r\n\t@Id\r\n\t@Column(name=\"id\")\r\n\tprivate Long id;\r\n\r\n    @Length(max = 255, message = \"Preferred first name length must be between 0 and 255.\")\r\n    @Column(name = \"pref_first\")\r\n    @PieceOfHistory(type = HistoryChangeType.PREFERRED_NAME_CHANGE)\r\n    private String preferredFirstName;\r\n\r\n    /** ... other fields ... */\r\n</code>\r\n\r\nCategorizations are made according a previously determined enum type:\r\n\r\n<h3>HistoryChangeType.java</h3>\r\n<code class=\"java\">\r\npackage com.jtsnake.tracker.model;\r\n\r\npublic enum HistoryChangeType {\r\n\r\n    PREFERRED_NAME_CHANGE,\r\n    TYPE,\r\n    STATUS;\r\n}\r\n</code>\r\n\r\nThere it is!  That's all, and you've got one snappin' audit history tracker.\r\n\r\nI would only go the Hibernate Interceptor route if you need the old vs. new values.  All other requirements can be met through the less-complicated and more available JPA EntityListeners.\r\n\r\n\r\n", 
      "date_published": "2008-10-20 15:17:17", 
      "image_path": "", 
      "title_slug": "audit-history-hibernate-interceptor", 
      "rendered_body": "The interceptor configuration:\r\n\r\n<h3>persistence.xml</h3>\r\nYou'll find many docs that exist online showing how to configure Hibernate Interceptors.  Virtually none described anything that I had available to me.  In this app, we don't control the SessionFactory or Session's, the two most popular methods of registering your Interceptor.  We only configure the EntityManagerFactory.  I found only one <a href=\"http://www.hibernate.org/hib_docs/entitymanager/reference/en/html/configuration.html\">doc</a> that describes the property available.  Here it is implemented:\r\n<code class=\"xml\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\r\n\tversion=\"1.0\">\r\n\t<persistence-unit name=\"com.jtsnake.tracker\" transaction-type=\"JTA\">\r\n\t\t<!-- ... model objects listed ... -->\r\n\t\t<class>com.jtsnake.tracker.model.Person</class>\r\n        <exclude-unlisted-classes/>\r\n        <properties>\r\n            <property name=\"hibernate.ejb.interceptor\" value=\"com.jtsnake.tracker.util.HistoryInterceptor\" />\r\n        </properties>\r\n\t</persistence-unit>\r\n</persistence>\r\n</code>\r\n\r\n<h3>HistoryInterceptor.java</h3>\r\n\r\nYou'll want to notice a few things:\r\n<ul>\r\n<li>The 'instanceof Historical' is merely an optimization (see below).</li>\r\n<li>FacesContext is required as a workaround for dependency injection.  I couldn't get Spring to auto-inject dependencies as normally done in other classes.  If anyone knows another way, please <a href=\"#commentform\">let me know</a>, because I don't like this method.  All of these dependencies were defined as spring beans elsewhere.  You'll only have available to you what you would have on a JSF page via EL, as seen in the \"#{springBean}\" expressions.</li>\r\n<li>You may not need to save all of this data, which means that you could simplify the logic in this class.</li>\r\n<li>I could not do a regular entity object .save() for the history entry.  It wasn't available.  I had to make a direct table insert.  I did try the JPA method, however, but I kept getting the SequenceGenerator to fire, selecting nextval's again and again, but the history record was never written.  I, therefore, fell back on direct table insertion.</li>\r\n<li>One thing that tripped me up was the SimpleJdbcTemplate.  Previously, I have just used the JdbcTemplate.  Here, you don't have to specify <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/sql/Types.html\">Types</a>, but you'll want to make sure that the types (that will be determined automagically by the platform) of the objects you use for parameters in your insert  map strictly to the database column types.  A useful doc was found <a href=\"http://java.sun.com/j2se/1.5.0/docs/guide/jdbc/getstart/mapping.html\">here</a>.</li>\r\n</ul>\r\n\r\n<code class=\"java\">\r\npackage com.jtsnake.tracker.util;\r\n\r\nimport org.hibernate.CallbackException;\r\nimport org.hibernate.EmptyInterceptor;\r\nimport org.hibernate.type.Type;\r\nimport com.jtsnake.tracker.model.Historical;\r\nimport com.jtsnake.tracker.model.PieceOfHistory;\r\nimport com.jtsnake.tracker.model.HistoryChangeType;\r\nimport org.springframework.transaction.TransactionStatus;\r\nimport org.springframework.transaction.support.TransactionCallbackWithoutResult;\r\nimport org.springframework.transaction.support.TransactionTemplate;\r\nimport org.springframework.jdbc.core.simple.SimpleJdbcTemplate;\r\nimport org.springframework.dao.DataAccessException;\r\n\r\nimport javax.el.ValueExpression;\r\nimport javax.faces.context.FacesContext;\r\nimport javax.persistence.Column;\r\nimport java.io.Serializable;\r\nimport java.lang.reflect.Field;\r\nimport java.util.Date;\r\n\r\npublic class HistoryInterceptor extends EmptyInterceptor {\r\n\r\n    @Override\r\n    public boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState, String[] propertyNames, Type[] types) throws CallbackException {\r\n\r\n        if (entity instanceof Historical) {\r\n\r\n            FacesContext fc = FacesContext.getCurrentInstance();\r\n\r\n            if(fc == null) {\r\n                throw new RuntimeException(\"No FacesContext available. HistoryInterceptor currently only works in faces requests.\");\r\n            }\r\n\r\n            ValueExpression jdbcVe = fc.getApplication().getExpressionFactory().createValueExpression(fc.getELContext(), \"#{simpleJdbcTemplate}\", SimpleJdbcTemplate.class);\r\n            final SimpleJdbcTemplate simpleJdbcTemplate = (SimpleJdbcTemplate) jdbcVe.getValue(fc.getELContext());\r\n\r\n            ValueExpression txVe = fc.getApplication().getExpressionFactory().createValueExpression(fc.getELContext(), \"#{transactionTemplate}\", TransactionTemplate.class);\r\n            TransactionTemplate transactionTemplate = (TransactionTemplate) txVe.getValue(fc.getELContext());\r\n\r\n\t\t\t/** ... more dependencies ... */\r\n\r\n            for (Field f : entity.getClass().getDeclaredFields()) {\r\n                if (f.isAnnotationPresent(PieceOfHistory.class)) {\r\n                    String fieldName = f.getName();\r\n                    for (int i = 0; i < propertyNames.length; ++i) {\r\n                        if (propertyNames[i].equals(fieldName)) {\r\n                            if (isChanged(currentState[i], previousState[i]))  {\r\n                                HistoryChangeType type = f.getAnnotation(PieceOfHistory.class).type();\r\n                                saveHistoryEntry(simpleJdbcTemplate,\r\n                                                 transactionTemplate,\r\n                                                 getNullSafeString(previousState[i]),\r\n                                                 getNullSafeString(currentState[i]),\r\n                                                 username,\r\n                                                 type.toString(),\r\n                                                 getColumnName(f),\r\n                                                 type.getDefaultMessage(),\r\n                                                 getNullSafeLong(personId));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    String getColumnName(Field f) {\r\n        String colName = f.getName();\r\n        if (f.isAnnotationPresent(Column.class)) {\r\n            colName = f.getAnnotation(Column.class).name();\r\n        }\r\n        return colName;\r\n    }\r\n\r\n    boolean isChanged(Object currentState, Object previousState) {\r\n        return (previousState == null && currentState != null) // nothing to something\r\n            || (previousState != null && currentState == null) // something to nothing\r\n            || (previousState != null && !previousState.equals(currentState)); // something to something else\r\n    }\r\n\r\n    String getNullSafeString(Object obj) {\r\n        return obj != null ? obj.toString() : \"NULL\";\r\n    }\r\n\r\n    Long getNullSafeLong(Long l) {\r\n        return l != null ? l : 0L;\r\n    }\r\n\r\n    void saveHistoryEntry(final SimpleJdbcTemplate simpleJdbcTemplate,\r\n                          TransactionTemplate transactionTemplate,\r\n                          final String oldValue,\r\n                          final String newValue,\r\n                          final String username,\r\n                          final String changeType,\r\n                          final String columnName,\r\n                          final String changeMessage,\r\n                          final Long personId) {\r\n        transactionTemplate.execute(new TransactionCallbackWithoutResult() {\r\n\r\n\t@Override\r\n\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\r\n               java.sql.Date date = new java.sql.Date(new Date().getTime());\r\n               simpleJdbcTemplate.update(\r\n                    \"insert into mssw.person_history \" +\r\n                        \"(           person_id \" +\r\n                        \",           modified_date \" +\r\n                        \",           username \" +\r\n                        \",           type \" +\r\n                        \",           msg \" +\r\n                        \",           old \" +\r\n                        \",           new \" +\r\n                        \",           col_name \" +\r\n                        \") values (  ?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8 ) \",\r\n                        personId, date, username, changeType, changeMessage, oldValue, newValue, columnName);\r\n            }\r\n\t});\r\n    }\r\n\r\n}\r\n</code>\r\n\r\nThe interceptor uses some other classes and interfaces to do it's work:  The check for Historical interface is only an optimization, allowing the code inside to only spin on modifications to classes of interest and not all changes.\r\n\r\n<h3>Historical.java</h3>\r\n<code class=\"java\">\r\npackage com.jtsnake.tracker.model;\r\n\r\npublic interface Historical {\r\n    // marker interface only\r\n}\r\n</code>\r\n\r\nThe PieceOfHistory interface (don't you love the names based on cliche's) is to mark those fields that need to have their changes tracked:\r\n\r\n<h3>PieceOfHistory.java</h3>\r\n<code class=\"java\">\r\npackage com.jtsnake.tracker.model;\r\n\r\nimport java.lang.annotation.ElementType;\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\nimport java.lang.annotation.Target;\r\n\r\n@Target({ElementType.FIELD})\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface PieceOfHistory {\r\n    HistoryChangeType type();\r\n}\r\n</code>\r\n\r\nImportant pieces of data are marked in the entity models.  Here's one: Person.java.  Here, you can see that the preferredFirstName field was marked with the PieceOfHistory interface, where the type (a HistoryChangeType to show category) of change is specified.\r\n\r\n<h3>Person.java</h3>\r\n<code class=\"java\">\r\npackage com.jtsnake.tracker.model;\r\n\r\n@Entity\r\n@Table(name=\"person\")\r\n@SuppressWarnings(\"serial\")\r\npublic class Person implements Serializable, Historical {\r\n\r\n\t@Id\r\n\t@Column(name=\"id\")\r\n\tprivate Long id;\r\n\r\n    @Length(max = 255, message = \"Preferred first name length must be between 0 and 255.\")\r\n    @Column(name = \"pref_first\")\r\n    @PieceOfHistory(type = HistoryChangeType.PREFERRED_NAME_CHANGE)\r\n    private String preferredFirstName;\r\n\r\n    /** ... other fields ... */\r\n</code>\r\n\r\nCategorizations are made according a previously determined enum type:\r\n\r\n<h3>HistoryChangeType.java</h3>\r\n<code class=\"java\">\r\npackage com.jtsnake.tracker.model;\r\n\r\npublic enum HistoryChangeType {\r\n\r\n    PREFERRED_NAME_CHANGE,\r\n    TYPE,\r\n    STATUS;\r\n}\r\n</code>\r\n\r\nThere it is!  That's all, and you've got one snappin' audit history tracker.\r\n\r\nI would only go the Hibernate Interceptor route if you need the old vs. new values.  All other requirements can be met through the less-complicated and more available JPA EntityListeners.\r\n\r\n\r\n", 
      "date_updated": "2010-09-04 18:00:07", 
      "demo": "", 
      "markup": "h", 
      "title": "Audit History with Hibernate Interceptor", 
      "source_path": "", 
      "collection": 1, 
      "summary": "The goal:\r\nCreate a history audit tool that:\r\n<ul>\r\n<li>Fires automatically</li>\r\n<li>Tracks only selected fields</li>\r\n<li>Categorizes those fields</li>\r\n<li>Saves old vs. new data</li>\r\n</ul> \r\n\r\nIssues we'll cover:\r\n<ul>\r\n<li>Interceptor config</li>\r\n<li>Data types</li>\r\n<li>Dependency Injection</li>\r\n<li>Alternate EntityListeners</li>\r\n</ul>\r\n\r\nOne solution:\r\nThe one option that I found that met all these requirements was the Hibernate Interceptor.  There may be better alternatives for you if your requirements differ.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:18:32", 
       
      "tags": "hibernate java orm"
    }
  }, 
  {
    "pk": 342, 
    "model": "blog.article", 
    "fields": {
      "body": "<div style=\"width:425px\" id=\"__ss_5324753\"><strong style=\"display:block;margin:12px 0 4px\"><a href=\"http://www.slideshare.net/rockycode/breaking-down-knowledge-silos\" title=\"Breaking Down Knowledge Silos\">Breaking Down Knowledge Silos</a></strong><object id=\"__sse5324753\" width=\"425\" height=\"355\"><param name=\"movie\" value=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=breakingdownknowledgesilos-100930104326-phpapp02&rel=0&stripped_title=breaking-down-knowledge-silos&userName=rockycode\" /><param name=\"allowFullScreen\" value=\"true\"/><param name=\"allowScriptAccess\" value=\"always\"/><embed name=\"__sse5324753\" src=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=breakingdownknowledgesilos-100930104326-phpapp02&rel=0&stripped_title=breaking-down-knowledge-silos&userName=rockycode\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"425\" height=\"355\"></embed></object><div style=\"padding:5px 0 12px\">View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=\"http://www.slideshare.net/rockycode\">rockycode</a>.</div></div>\r\n\r\nThis presentation was given to our group of developers at an offsite.  I worked with many of these developers on relatively closely related projects.  The catalyst for this presentation was my observation that team dynamics on my current project plus at least the previous four had somehow or another encourage some amount of knowledge siloing.  This fact has at various times become inconvenient for me personally and by extension my current and previous projects.  \r\n\r\n<h2>Some silos from my past</h2>\r\n\r\n<ul>\r\n<li>I knew something that no one else knew (at least at one point) and was approached about it months later and asked to explain it to a new developer.  There was no one left close to the project to help this person come up to speed.  If I had imparted this knowledge in closer time proximity to the original construction of the code, the likelihood of a maintenance developer sharing my knowledge would possibly be higher.</li>\r\n\r\n<li>I came onto a project that was about 3/4 complete.  I was tasked to implement various new features that spanned the application.  For specific portions of the app, there were often very specific, singular persons that I sought out in order to get a feel for the code more quickly.  If these people were unavailable or over-burdened, as was often the case, I was left to do the detective work that necessarily was more inefficient and took more time.  Perhaps if more people were educated on various portions of the app, more fellow developers would have sufficient knowledge to give assistance.</li>\r\n\r\n<li>A developer on a project that I recently rolled off of was on an extended vacation.  He had worked on a complicated portion of the app that I had been less-than-eager to touch (and possible trigger massive explosions).  While he was gone, there was an issue and I was asked to consult on the solution.  My inexperience with this portion of the software was weighed with what turned out to be a low level of urgency, and we decided to wait until the original developer returned to face this issue.  Perhaps if I had dug into this code earlier in the presence of the original developer, the issue would have been dispatched more quickly when it arose amongst limited resources.</li>\r\n\r\n<li>I recently completed the point-0 version release of a software project.  This project was on an aggressive schedule that the developers responded to by each scrambling to get features of the software complete, often in isolation from other developers.  The result ended up to be ok.  The product shipped complete, but the innards of the software were often inconsistent in their style, how they flowed and handled problems, and the DRY principle was broken several times through recreated business logic.  Perhaps if the developers had spent more time in communication about their solutions to separate features, a more consistent, stable, safe, non-repetitive product would have been created.</li>\r\n\r\n<li>I was recently on a project where, and I've done this several times myself, one person had (fantastically) tackled numerous hard portions of the development by himself.  These pieces were so complicated, in fact, that they were bug-prone.  On several occasions, when there were problems with these modules, this one developer was always called upon, sometimes late at night or on the weekend, to resolve them.  This led to a burn(-ing, then -nt out) developer.  Perhaps if more fellow developers had been pulled in to assist with those modules, more people would have been able to share the load troubleshooting more easily.</li>\r\n</ul>\r\n\r\nWell, these are some of my experiences.  I feel that knowledge siloing probably negatively affected each of these scenarios in some degree.  I feel that each challenge was, in the end, overcome.  I think that speaks to the caliber of individual developers that I've worked with being able to adapt to their ever-changing, imperfect environments that they are asked to work in.  At the same time, I feel that we can often make situations a little easier on ourselves if we're introspective enough to ask the right questions to help guide ourselves out of knowledge silos.  Here are some potentials:\r\n\r\n<h2>How to choose your pair</h2>\r\n\r\n<ul>\r\n<li>What don't I know about?</li>\r\n<li>What's high risk?</li>\r\n<li>What's highest priority?</li>\r\n<li>What's the hardest/easiest? Why?</li>\r\n<li>What has the least/most bugs? Why?</li>\r\n<li>What's behind/ahead of schedule?  Why?</li>\r\n</ul>\r\n\r\nOnce we ask those questions, let's use the answers to help us:\r\n\r\n<h2>Silos in our future</h2>\r\n\r\n<ul>\r\n<li>Consider how you can open knowledge silos you've been privy to</li>\r\n<li>Consider what silos you don't but should probably know something about</li>\r\n<li>Consider how you'll influence the organization to form fewer silos</li>\r\n</ul>", 
      "date_published": "2010-09-30 09:47:37", 
      "image_path": "", 
      "title_slug": "breaking-down-knowledge-silos", 
      "rendered_body": "<div style=\"width:425px\" id=\"__ss_5324753\"><strong style=\"display:block;margin:12px 0 4px\"><a href=\"http://www.slideshare.net/rockycode/breaking-down-knowledge-silos\" title=\"Breaking Down Knowledge Silos\">Breaking Down Knowledge Silos</a></strong><object id=\"__sse5324753\" width=\"425\" height=\"355\"><param name=\"movie\" value=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=breakingdownknowledgesilos-100930104326-phpapp02&rel=0&stripped_title=breaking-down-knowledge-silos&userName=rockycode\" /><param name=\"allowFullScreen\" value=\"true\"/><param name=\"allowScriptAccess\" value=\"always\"/><embed name=\"__sse5324753\" src=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=breakingdownknowledgesilos-100930104326-phpapp02&rel=0&stripped_title=breaking-down-knowledge-silos&userName=rockycode\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"425\" height=\"355\"></embed></object><div style=\"padding:5px 0 12px\">View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=\"http://www.slideshare.net/rockycode\">rockycode</a>.</div></div>\r\n\r\nThis presentation was given to our group of developers at an offsite.  I worked with many of these developers on relatively closely related projects.  The catalyst for this presentation was my observation that team dynamics on my current project plus at least the previous four had somehow or another encourage some amount of knowledge siloing.  This fact has at various times become inconvenient for me personally and by extension my current and previous projects.  \r\n\r\n<h2>Some silos from my past</h2>\r\n\r\n<ul>\r\n<li>I knew something that no one else knew (at least at one point) and was approached about it months later and asked to explain it to a new developer.  There was no one left close to the project to help this person come up to speed.  If I had imparted this knowledge in closer time proximity to the original construction of the code, the likelihood of a maintenance developer sharing my knowledge would possibly be higher.</li>\r\n\r\n<li>I came onto a project that was about 3/4 complete.  I was tasked to implement various new features that spanned the application.  For specific portions of the app, there were often very specific, singular persons that I sought out in order to get a feel for the code more quickly.  If these people were unavailable or over-burdened, as was often the case, I was left to do the detective work that necessarily was more inefficient and took more time.  Perhaps if more people were educated on various portions of the app, more fellow developers would have sufficient knowledge to give assistance.</li>\r\n\r\n<li>A developer on a project that I recently rolled off of was on an extended vacation.  He had worked on a complicated portion of the app that I had been less-than-eager to touch (and possible trigger massive explosions).  While he was gone, there was an issue and I was asked to consult on the solution.  My inexperience with this portion of the software was weighed with what turned out to be a low level of urgency, and we decided to wait until the original developer returned to face this issue.  Perhaps if I had dug into this code earlier in the presence of the original developer, the issue would have been dispatched more quickly when it arose amongst limited resources.</li>\r\n\r\n<li>I recently completed the point-0 version release of a software project.  This project was on an aggressive schedule that the developers responded to by each scrambling to get features of the software complete, often in isolation from other developers.  The result ended up to be ok.  The product shipped complete, but the innards of the software were often inconsistent in their style, how they flowed and handled problems, and the DRY principle was broken several times through recreated business logic.  Perhaps if the developers had spent more time in communication about their solutions to separate features, a more consistent, stable, safe, non-repetitive product would have been created.</li>\r\n\r\n<li>I was recently on a project where, and I've done this several times myself, one person had (fantastically) tackled numerous hard portions of the development by himself.  These pieces were so complicated, in fact, that they were bug-prone.  On several occasions, when there were problems with these modules, this one developer was always called upon, sometimes late at night or on the weekend, to resolve them.  This led to a burn(-ing, then -nt out) developer.  Perhaps if more fellow developers had been pulled in to assist with those modules, more people would have been able to share the load troubleshooting more easily.</li>\r\n</ul>\r\n\r\nWell, these are some of my experiences.  I feel that knowledge siloing probably negatively affected each of these scenarios in some degree.  I feel that each challenge was, in the end, overcome.  I think that speaks to the caliber of individual developers that I've worked with being able to adapt to their ever-changing, imperfect environments that they are asked to work in.  At the same time, I feel that we can often make situations a little easier on ourselves if we're introspective enough to ask the right questions to help guide ourselves out of knowledge silos.  Here are some potentials:\r\n\r\n<h2>How to choose your pair</h2>\r\n\r\n<ul>\r\n<li>What don't I know about?</li>\r\n<li>What's high risk?</li>\r\n<li>What's highest priority?</li>\r\n<li>What's the hardest/easiest? Why?</li>\r\n<li>What has the least/most bugs? Why?</li>\r\n<li>What's behind/ahead of schedule?  Why?</li>\r\n</ul>\r\n\r\nOnce we ask those questions, let's use the answers to help us:\r\n\r\n<h2>Silos in our future</h2>\r\n\r\n<ul>\r\n<li>Consider how you can open knowledge silos you've been privy to</li>\r\n<li>Consider what silos you don't but should probably know something about</li>\r\n<li>Consider how you'll influence the organization to form fewer silos</li>\r\n</ul>", 
      "date_updated": "2010-10-07 12:30:05", 
      "demo": "", 
      "markup": "h", 
      "title": "Breaking Down Knowledge Silos", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Barriers are created all the time on software projects (by organization layout, role definition, project management, or indiscriminately) that keep developer knowledge separate.  Sometimes these barriers are referred to as silos.  We can create better teams and products for our organizations if we can break down these silos -- or if particularly scrappy, blow them up.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-09-30 10:23:39", 
       
      "tags": "agile pair-programming project-management"
    }
  }, 
  {
    "pk": 385, 
    "model": "blog.article", 
    "fields": {
      "body": "I have heard the same question recently probably about 2 dozen times.  \"How do I migrate my Selenium 1 tests to Selenium 2?\"  We have thousands and thousands of tests across several products, so I couldn't imagine rewriting all those tests every \"x\" number of years to be up to speed with the latest tools.\r\n\r\nThere are 3 parts to a stable automation framework that you should consider.\r\n\r\nLayer 1: The actual framework (WatiN, Selenium, WebDriver, WatiR, etc)\r\n\r\nYou can pick whichever platform you want to write your tests on. This is sometimes decided by management based on experience of those on the team, tool set, skill set, etc.  However, I recommend not building your own automation framework at this level.  There are many out there and they all do different things.  Find the tool you should use and go with it.\r\n\r\nLayer 2: The framework you build\r\n\r\nThis framework should be the interceptor between both layers.  It should be easily configured, allow for object oriented design and most of all - stable.\r\n\r\nYou need to create a way for Layer 1 to talk with Layer 3.  Ultimately, the idea is to make it such that if a new automation framework comes out, you can plug it in at this layer without affecting your tests. \r\n\r\nExample, the framework I used was built on WatiN.  The primary browser of support was IE so it was a good fit.  Since then, support has grown to include Firefox and Chrome.  I didn't have to rewrite all my tests.  All I did was wire up WebDriver into this layer and built a way to toggle which framework I want to use.  Now I can run any of my tests on WatiN or WebDriver with their respective supported browsers. \r\n\r\nLet's look at an easy way to implement this.  Create a class such as \"MappedElement\".\r\n\r\n<code class=\"java\">\r\n\r\npublic class MappedElement\r\n{\r\n   public MappedElement(string elementType, string attribute, string value)\r\n   {\r\n       ElementType = elementType;\r\n       Attribute = attribute;\r\n       Value = value;\r\n   }\r\n\r\n   public string ElementType { get; private set; }\r\n   public string Attribute { get; private set; }\r\n   public string Value { get; private set; }\r\n\r\n}\r\n\r\n</code>\r\n\r\nNow, every time you want to interact with an element at Layer 3, you create an instance of a MappedElement with the pieces that fit.  I know it's a textbox with an ID attribute of \"j_username\".  Then, Layer 2 knows how to find only MappedElement objects.  Which might look like one of the following:\r\n\r\n<code class=\"java\">\r\n\r\n//In tests (layer 3)\r\nMappedElement usernameField = new MappedElement(\"textbox\", \"id\", \"j_username\");\r\nmappedElement.Type(usernameField, \"myusername\");\r\n\r\n//In Layer 2\r\n\r\npublic static void Type(MappedElement element, string text)\r\n{\r\n   //add logic here to find by correct attributes, etc.\r\n   //Also, add logic to identify which framework you are using, if multiple\r\n\r\n   TextField textfield = browser.TextField(Find.ById(element.Value));\r\n   textfield.TypeText(text);\r\n\r\n   //OR\r\n   WebElement textfield = driver.FindElement(By.Id(element.Value));\r\n   element.SendKeys(text);\r\n}\r\n\r\n</code>\r\n\r\n\r\nLayer 3: Your automated tests\r\n\r\nThe automated tests live in this layer. They leverage the Layer 1 framework in every way possible but only done so through Layer 2.  Meaning, your tests are written in such a way that you might not be able to tell what automation framework is actually being used.  This is good.  Now, there will be times where it doesn't make sense to add a certain bit of functionality into Layer 2 because it might be specific to one certain project.  At that point, you can still access Layer 1's direct functionality but that is usually been low compared to all the tests overall.\r\n\r\nExample:\r\n\r\n<code class=\"java\">\r\n\r\nif (framework.IsWebDriver())\r\n{\r\n    //do it this way\r\n}\r\nelse if (framework.IsWatiN())\r\n    //do it another way\r\n}\r\n\r\n</code>\r\n\r\n", 
      "date_published": "2011-06-02 07:06:51", 
      "image_path": "", 
      "title_slug": "building-automation-lasts", 
      "rendered_body": "I have heard the same question recently probably about 2 dozen times.  \"How do I migrate my Selenium 1 tests to Selenium 2?\"  We have thousands and thousands of tests across several products, so I couldn't imagine rewriting all those tests every \"x\" number of years to be up to speed with the latest tools.\r\n\r\nThere are 3 parts to a stable automation framework that you should consider.\r\n\r\nLayer 1: The actual framework (WatiN, Selenium, WebDriver, WatiR, etc)\r\n\r\nYou can pick whichever platform you want to write your tests on. This is sometimes decided by management based on experience of those on the team, tool set, skill set, etc.  However, I recommend not building your own automation framework at this level.  There are many out there and they all do different things.  Find the tool you should use and go with it.\r\n\r\nLayer 2: The framework you build\r\n\r\nThis framework should be the interceptor between both layers.  It should be easily configured, allow for object oriented design and most of all - stable.\r\n\r\nYou need to create a way for Layer 1 to talk with Layer 3.  Ultimately, the idea is to make it such that if a new automation framework comes out, you can plug it in at this layer without affecting your tests. \r\n\r\nExample, the framework I used was built on WatiN.  The primary browser of support was IE so it was a good fit.  Since then, support has grown to include Firefox and Chrome.  I didn't have to rewrite all my tests.  All I did was wire up WebDriver into this layer and built a way to toggle which framework I want to use.  Now I can run any of my tests on WatiN or WebDriver with their respective supported browsers. \r\n\r\nLet's look at an easy way to implement this.  Create a class such as \"MappedElement\".\r\n\r\n<code class=\"java\">\r\n\r\npublic class MappedElement\r\n{\r\n   public MappedElement(string elementType, string attribute, string value)\r\n   {\r\n       ElementType = elementType;\r\n       Attribute = attribute;\r\n       Value = value;\r\n   }\r\n\r\n   public string ElementType { get; private set; }\r\n   public string Attribute { get; private set; }\r\n   public string Value { get; private set; }\r\n\r\n}\r\n\r\n</code>\r\n\r\nNow, every time you want to interact with an element at Layer 3, you create an instance of a MappedElement with the pieces that fit.  I know it's a textbox with an ID attribute of \"j_username\".  Then, Layer 2 knows how to find only MappedElement objects.  Which might look like one of the following:\r\n\r\n<code class=\"java\">\r\n\r\n//In tests (layer 3)\r\nMappedElement usernameField = new MappedElement(\"textbox\", \"id\", \"j_username\");\r\nmappedElement.Type(usernameField, \"myusername\");\r\n\r\n//In Layer 2\r\n\r\npublic static void Type(MappedElement element, string text)\r\n{\r\n   //add logic here to find by correct attributes, etc.\r\n   //Also, add logic to identify which framework you are using, if multiple\r\n\r\n   TextField textfield = browser.TextField(Find.ById(element.Value));\r\n   textfield.TypeText(text);\r\n\r\n   //OR\r\n   WebElement textfield = driver.FindElement(By.Id(element.Value));\r\n   element.SendKeys(text);\r\n}\r\n\r\n</code>\r\n\r\n\r\nLayer 3: Your automated tests\r\n\r\nThe automated tests live in this layer. They leverage the Layer 1 framework in every way possible but only done so through Layer 2.  Meaning, your tests are written in such a way that you might not be able to tell what automation framework is actually being used.  This is good.  Now, there will be times where it doesn't make sense to add a certain bit of functionality into Layer 2 because it might be specific to one certain project.  At that point, you can still access Layer 1's direct functionality but that is usually been low compared to all the tests overall.\r\n\r\nExample:\r\n\r\n<code class=\"java\">\r\n\r\nif (framework.IsWebDriver())\r\n{\r\n    //do it this way\r\n}\r\nelse if (framework.IsWatiN())\r\n    //do it another way\r\n}\r\n\r\n</code>\r\n\r\n", 
      "date_updated": "2011-06-06 14:54:35", 
      "demo": "", 
      "markup": "h", 
      "title": "Building Automation That Lasts", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Automated tests have an important role in the longevity of your product.  There are pros and cons to having an automation suite, but I think the pros fully out weigh the cons.  That being the case, how do you build an automation framework that will outlast the tools that are being used?", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2011-06-02 07:52:49", 
       
      "tags": "automation qa watin webdriver"
    }
  }, 
  {
    "pk": 328, 
    "model": "blog.article", 
    "fields": {
      "body": "I did a quick search and found a bug listed on CC.NET's Jira bug list.  Turns out, on that same machine I had recently installed Microsoft's URL Scan for some other development I'll be doing.  \r\n\r\nTo fix it, I simply opened the %WINDIR%\\System32\\Inetsrv\\URLscan and modified the UrlScan.ini file to have AllowDotInPath=1.  This will allow the following ccnet url to work now:\r\n\r\nhttp://xx.xx.xx.xx/ccnet/server/local/project/project_name/build/log20100721145050Lbuild.17.xml/ViewBuildReport.aspx\r\n\r\n`Microsoft's page on URLScan <http://support.microsoft.com/kb/326444/EN-US/>`_", 
      "date_published": "2010-07-22 07:59:29", 
      "image_path": "", 
      "title_slug": "buildreport-ccnet-gives-404-error", 
      "rendered_body": "<p>I did a quick search and found a bug listed on CC.NET's Jira bug list.  Turns out, on that same machine I had recently installed Microsoft's URL Scan for some other development I'll be doing.</p>\n<p>To fix it, I simply opened the %WINDIR%System32InetsrvURLscan and modified the UrlScan.ini file to have AllowDotInPath=1.  This will allow the following ccnet url to work now:</p>\n<p><a class=\"reference external\" href=\"http://xx.xx.xx.xx/ccnet/server/local/project/project_name/build/log20100721145050Lbuild.17.xml/ViewBuildReport.aspx\">http://xx.xx.xx.xx/ccnet/server/local/project/project_name/build/log20100721145050Lbuild.17.xml/ViewBuildReport.aspx</a></p>\n<p><a class=\"reference external\" href=\"http://support.microsoft.com/kb/326444/EN-US/\">Microsoft's page on URLScan</a></p>\n", 
      "date_updated": "2010-07-26 07:57:19", 
      "demo": "", 
      "markup": "r", 
      "title": "BuildReport in CC.Net gives 404 error", 
      "source_path": "", 
      "collection": 1, 
      "summary": "I have several machines where I run CruiseControl.NET for our test automation.  Today, I went to look at the results and I would get a 404 error on one of the boxes.  I checked another machine and the build results would come up just fine.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-07-22 08:04:59", 
       
      "tags": "ccnet urlscan"
    }
  }, 
  {
    "pk": 310, 
    "model": "blog.article", 
    "fields": {
      "body": ".. code-block:: javascript\r\n\r\n\t$.ajax({\r\n\t  ...\r\n\t  url: \"/r/e/s/t/?unique=\" + new Date().getTime()\r\n\t});\r\n\r\nBut, wouldn't it be nice to keep your urls clean and not have to add this chunk of code for every Ajax call.  On a recent project, we have a url rewriter through which all requests are routed.  I added a call to this function (in xquery), to tell the browser not to cache any response.\r\n\r\nXquery\r\n------\r\n\r\n.. code-block:: xquery\r\n\r\n\tdeclare function no-cache() {\r\n\t  let $is-ajax := xdmp:get-request-header(\"X-Requested-With\") eq \"XMLHttpRequest\"\r\n\t  return if ($is-ajax) then\r\n\t    let $expire-immediately := xdmp:add-response-header(\"Expires\", \"-1\")\r\n\t    let $no-cache := xdmp:add-response-header(\"Cache-Control\", \"no-cache, no-store\")\r\n\t    return ()\r\n\t  else ()\r\n\t};\r\n\r\nFor Java, there's something similar:\r\n\r\nJava\r\n----\r\n.. code-block:: java\r\n\r\n\timport javax.ws.rs.core.Response;\r\n\timport javax.ws.rs.core.Response.ResponseBuilder;\r\n\r\n\tpublic class CacheUtil {\r\n\t  public static Response BuildNoCache(ResponseBuilder builder) {\r\n\t    return builder.header(\"Expires\", \"-1\").header(\"Cache-Control\", \"no-cache, no-store\").build();\r\n\t  }\r\n\t}\r\n\r\nHow do you control your ajax caching problems in the pseudo-browsr of IE?", 
      "date_published": "2010-04-08 17:17:05", 
      "image_path": "", 
      "title_slug": "caching-ajax-requests-ie", 
      "rendered_body": "<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n  <span class=\"p\">...</span>\n  <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s2\">&quot;/r/e/s/t/?unique=&quot;</span> <span class=\"o\">+</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getTime</span><span class=\"p\">()</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div><p>But, wouldn't it be nice to keep your urls clean and not have to add this chunk of code for every Ajax call.  On a recent project, we have a url rewriter through which all requests are routed.  I added a call to this function (in xquery), to tell the browser not to cache any response.</p>\n<div class=\"section\" id=\"xquery\">\n<h1>Xquery</h1>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>declare function no-cache() {\n  let $is-ajax := xdmp:get-request-header(&quot;X-Requested-With&quot;) eq &quot;XMLHttpRequest&quot;\n  return if ($is-ajax) then\n    let $expire-immediately := xdmp:add-response-header(&quot;Expires&quot;, &quot;-1&quot;)\n    let $no-cache := xdmp:add-response-header(&quot;Cache-Control&quot;, &quot;no-cache, no-store&quot;)\n    return ()\n  else ()\n};\n</pre></div>\n</div><p>For Java, there's something similar:</p>\n</div>\n<div class=\"section\" id=\"java\">\n<h1>Java</h1>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">javax.ws.rs.core.Response</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">javax.ws.rs.core.Response.ResponseBuilder</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CacheUtil</span> <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Response</span> <span class=\"nf\">BuildNoCache</span><span class=\"o\">(</span><span class=\"n\">ResponseBuilder</span> <span class=\"n\">builder</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"na\">header</span><span class=\"o\">(</span><span class=\"s\">&quot;Expires&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;-1&quot;</span><span class=\"o\">).</span><span class=\"na\">header</span><span class=\"o\">(</span><span class=\"s\">&quot;Cache-Control&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;no-cache, no-store&quot;</span><span class=\"o\">).</span><span class=\"na\">build</span><span class=\"o\">();</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div><p>How do you control your ajax caching problems in the pseudo-browsr of IE?</p>\n</div>\n", 
      "date_updated": "2010-05-18 07:59:59", 
      "demo": "", 
      "markup": "r", 
      "title": "Caching Ajax Requests in IE", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Have you ever had a problem with ajax requests caching in Internet Explorer.  I have, and recently I came across a nicer solution than I have traditionally used.  In the past, I have used a unique parameter on the url to keep IE from caching previous requests to the same url, like so:\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-05-04 17:18:31", 
       
      "tags": "ajax ie java javascript xquery"
    }
  }, 
  {
    "pk": 305, 
    "model": "blog.article", 
    "fields": {
      "body": "First, \r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/hostname\r\n</code>\r\n\r\n, and overwrite the hostname with the new hostname.  This will make it so the correct name is show when running the hostname command. Second, \r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/hosts\r\n</code>\r\n\r\n, and overwrite the hostname here.  This will allow you to use sudo successfully and network applications to run.  This was done on Ubuntu 9.10 (Karmic).", 
      "date_published": "2010-01-04 09:49:32", 
      "image_path": null, 
      "title_slug": "change-hostname-ubuntu", 
      "rendered_body": "First, \r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/hostname\r\n</code>\r\n\r\n, and overwrite the hostname with the new hostname.  This will make it so the correct name is show when running the hostname command. Second, \r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/hosts\r\n</code>\r\n\r\n, and overwrite the hostname here.  This will allow you to use sudo successfully and network applications to run.  This was done on Ubuntu 9.10 (Karmic).", 
      "date_updated": "2010-05-04 12:04:45", 
      "demo": null, 
      "markup": "h", 
      "title": "Change hostname on Ubuntu", 
      "source_path": null, 
      "collection": 1, 
      "summary": "When you setup your computer at the time of your initial Ubuntu installation, you assign your computer a hostname.  In my case, I gave it a hostname and then later wanted to change it to something else.  This is accomplished in two easy steps.  ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-01-04 09:53:44", 
       
      "tags": "linux networking ubuntu"
    }
  }, 
  {
    "pk": 265, 
    "model": "blog.article", 
    "fields": {
      "body": "Go to the pom.xml for the module or submodule that needs a specific JDK version for compilation, and insert such a goody:\r\n\r\n<code class=\"xml\">\r\n<project>\r\n   <build>\r\n      <plugins>\r\n         <plugin>\r\n         <artifactId>maven-compiler-plugin</artifactId>\r\n            <configuration>\r\n               <source>1.5</source>\r\n               <target>1.5</target>\r\n               <compilerVersion>1.5</compilerVersion>               \r\n               <executable>/usr/lib/jvm/java-1.5.0-sun/bin/javac</executable>\r\n            </configuration>\r\n         </plugin>\r\n      </plugins>\r\n   </build>\r\n</project>\r\n</code>\r\n\r\n<i>Note: My code parser/colorer is removing camelcase, which is important.  (ie, artifactId, compilerVersion)</i>\r\n\r\nNotice that the executable for javac is hardcoded in the pom.xml.  That's not the most awesome thing to do, so you can use a property for the absolute path that can be specified on a per-user basis.  For more details, see the <a href=\"http://maven.apache.org/plugins/maven-compiler-plugin/examples/compile-using-different-jdk.html\">Apache documentation</a>.\r\n\r\nNow mvn compile, etc, and JDK 1.5 will be used where you have specified.", 
      "date_published": "2009-09-21 13:46:20", 
      "image_path": null, 
      "title_slug": "change-maven-jdk", 
      "rendered_body": "Go to the pom.xml for the module or submodule that needs a specific JDK version for compilation, and insert such a goody:\r\n\r\n<code class=\"xml\">\r\n<project>\r\n   <build>\r\n      <plugins>\r\n         <plugin>\r\n         <artifactId>maven-compiler-plugin</artifactId>\r\n            <configuration>\r\n               <source>1.5</source>\r\n               <target>1.5</target>\r\n               <compilerVersion>1.5</compilerVersion>               \r\n               <executable>/usr/lib/jvm/java-1.5.0-sun/bin/javac</executable>\r\n            </configuration>\r\n         </plugin>\r\n      </plugins>\r\n   </build>\r\n</project>\r\n</code>\r\n\r\n<i>Note: My code parser/colorer is removing camelcase, which is important.  (ie, artifactId, compilerVersion)</i>\r\n\r\nNotice that the executable for javac is hardcoded in the pom.xml.  That's not the most awesome thing to do, so you can use a property for the absolute path that can be specified on a per-user basis.  For more details, see the <a href=\"http://maven.apache.org/plugins/maven-compiler-plugin/examples/compile-using-different-jdk.html\">Apache documentation</a>.\r\n\r\nNow mvn compile, etc, and JDK 1.5 will be used where you have specified.", 
      "date_updated": "2010-05-04 12:04:45", 
      "demo": null, 
      "markup": "h", 
      "title": "Change Maven JDK", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Sometimes you want Maven to compile your code with a different JDK than is the one assigned to your JAVA_HOME.  For instance, I have code in a project that I'm working on that only compiles on Java 1.5.  My JAVA_HOME, however, is 1.6.  So, how do we specify the JDK for Maven?", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-21 13:55:47", 
       
      "tags": "java maven"
    }
  }, 
  {
    "pk": 96, 
    "model": "blog.article", 
    "fields": {
      "body": "I've always wanted to get some good code highlighting for the code that I wanted to post on the world wide web as I had various adventures in the software development world.  \r\n\r\nI used a wonderful custom django template filter that someone was kind enough to offer in a snippet (http://www.djangosnippets.org/snippets/119/)that brought all the important pieces together. \r\n\r\nI altered it ever so slightly and reproduce it here:\r\n\r\n<code class=\"python\">\r\nfrom django import template\r\nregister = template.Library()\r\n\r\n# Pygments: http://pygments.org -- a generic syntax highlighter.\r\nfrom pygments import highlight\r\nfrom pygments.formatters import HtmlFormatter\r\nfrom pygments.lexers import get_lexer_by_name, guess_lexer\r\n\r\n# Python Markdown (dropped in my project directory)\r\nfrom markdown import markdown\r\n\r\n# BeautifulSoup: http://www.crummy.com/software/BeautifulSoup/\r\nfrom aprilandjake.tech.BeautifulSoup import BeautifulSoup\r\n\r\n@register.filter(\"code\")\r\ndef rendercode(content, safe=\"unsafe\"):\r\n    \"\"\"Render this content for display.\"\"\"\r\n\r\n    # First, pull out all the code blocks, to keep them away\r\n    # from Markdown (and preserve whitespace).\r\n    soup = BeautifulSoup(str(content))\r\n    code_blocks = soup.findAll('code')\r\n    for block in code_blocks:\r\n        block.replaceWith('&lt;code class=\"removed\"&gt;&lt;/code&gt;')\r\n\r\n    # Run the post through markdown.\r\n    if safe == \"unsafe\":\r\n        safe_mode = False\r\n    else:\r\n        safe_mode = True\r\n    markeddown = markdown(str(soup), safe_mode=safe_mode)\r\n\r\n    # Replace the pulled code blocks with syntax-highlighted versions.\r\n    soup = BeautifulSoup(markeddown)\r\n    empty_code_blocks, index = soup.findAll('code', 'removed'), 0\r\n    formatter = HtmlFormatter(cssclass='source')\r\n    for block in code_blocks:\r\n        if block.has_key('class'):\r\n            language = block['class']\r\n        else:\r\n            language = 'text'\r\n        try:\r\n            lexer = get_lexer_by_name(language, stripnl=True, encoding='UTF-8')\r\n        except ValueError, e:\r\n            try:\r\n                # Guess a lexer by the contents of the block.\r\n                lexer = guess_lexer(block.renderContents())\r\n            except ValueError, e:\r\n                # Just make it plain text.\r\n                lexer = get_lexer_by_name('text', stripnl=True, encoding='UTF-8')\r\n        empty_code_blocks[index].replaceWith(\r\n                highlight(block.renderContents(), lexer, formatter))\r\n        index = index + 1\r\n\r\n    return str(soup)\r\n</code>\r\n\r\nThis customer filter uses 3 third party modules:\r\n\r\n- <a href=\"http://pygments.org/\">Pygments</a> - a syntax highlighter for Python 2.3 and above.\r\n\r\nInstall is easy with a Python .egg:\r\n\r\n<code class=\"bash\">\r\neasy_install Pygments\r\n</code>\r\n\r\nFor windows at tarball is also available at <a href=\"http://sourceforge.net/project/downloading.php?groupname=pygments&filename=Pygments-0.8.1.tar.gz&use_mirror=voxel\">Sourceforge</a>.\r\n\r\n- <a href=\"http://www.freewisdom.org/projects/python-markdown/\">Markdown for Python</a> - a plain text to HTML converter\r\n\r\nInstallation is likewise easy:\r\n\r\n<code class=\"bash\">\r\neasy_install markdown\r\n</code>\r\n\r\nIf you're on Windows, a win32 installer is also available <a href=http://pypi.python.org/pypi/Markdown/\">here</a>.\r\n\r\n- Finally, <a href=\"http://www.crummy.com/software/BeautifulSoup/#Download\">Beautiful Soup</a> - a fun-sounding HTML parser.  \r\n\r\nDownload the <a href=\"http://www.crummy.com/software/BeautifulSoup/download/BeautifulSoup.py\">.py file</a> and stick it somewhere in your project.\r\n\r\nWith all the pieces in place, now it's as easy as applying the filter just as with all the other nifty django filters. \r\n\r\n<code class=\"django\">\r\n{{ entry.body|code|safe }}\r\n</code>\r\n( I added the 'safe' filter.)\r\n\r\nNow you just need the stylesheet to make all the newly created span's around your code look as magical as they really are.  I horked the <a href=\"http://pygments.org/media/pygments_style.css\">.css file</a> off the Pygments demo page and did a Find|Replace from \".syntax\" to \".source\", so now my .css looks something like this:\r\n\r\n<code class=\"css\">\r\n.source .c { color: #60a0b0; font-style: italic } /* Comment */\r\n.source .err { border: 1px solid #FF0000 } /* Error */\r\n.source .k { color: #007020; font-weight: bold } /* Keyword */\r\n/** ...  */\r\n</code>\r\n\r\nThen, in the content that you're feeding into your 'code' filter variable, just insert 'code' tags such as this:\r\n\r\n<code>&lt;code class='python'&gt;print &quot;Hello, World&quot;&lt;/code&gt;</code>\r\n\r\nAnd replace the 'python' class with any number of different <a href=\"http://pygments.org/languages/\">languages</a> that Pygments supports.\r\n\r\nThat's it!\r\n\r\nNote, in the last usage code and the custom filter code, on this line:\r\n<code class=\"python\">\r\nblock.replaceWith('&lt;code class=\"removed\"&gt;&lt;/code&gt;')\r\n</code>\r\nshould have real carets instead of the HTML entities.  Perhaps I'll need to fiddle with this filter because it chokes when there are 'code' tags inside.", 
      "date_published": "2008-08-24 14:45:47", 
      "image_path": null, 
      "title_slug": "code-highlighting-blog", 
      "rendered_body": "I've always wanted to get some good code highlighting for the code that I wanted to post on the world wide web as I had various adventures in the software development world.  \r\n\r\nI used a wonderful custom django template filter that someone was kind enough to offer in a snippet (http://www.djangosnippets.org/snippets/119/)that brought all the important pieces together. \r\n\r\nI altered it ever so slightly and reproduce it here:\r\n\r\n<code class=\"python\">\r\nfrom django import template\r\nregister = template.Library()\r\n\r\n# Pygments: http://pygments.org -- a generic syntax highlighter.\r\nfrom pygments import highlight\r\nfrom pygments.formatters import HtmlFormatter\r\nfrom pygments.lexers import get_lexer_by_name, guess_lexer\r\n\r\n# Python Markdown (dropped in my project directory)\r\nfrom markdown import markdown\r\n\r\n# BeautifulSoup: http://www.crummy.com/software/BeautifulSoup/\r\nfrom aprilandjake.tech.BeautifulSoup import BeautifulSoup\r\n\r\n@register.filter(\"code\")\r\ndef rendercode(content, safe=\"unsafe\"):\r\n    \"\"\"Render this content for display.\"\"\"\r\n\r\n    # First, pull out all the code blocks, to keep them away\r\n    # from Markdown (and preserve whitespace).\r\n    soup = BeautifulSoup(str(content))\r\n    code_blocks = soup.findAll('code')\r\n    for block in code_blocks:\r\n        block.replaceWith('&lt;code class=\"removed\"&gt;&lt;/code&gt;')\r\n\r\n    # Run the post through markdown.\r\n    if safe == \"unsafe\":\r\n        safe_mode = False\r\n    else:\r\n        safe_mode = True\r\n    markeddown = markdown(str(soup), safe_mode=safe_mode)\r\n\r\n    # Replace the pulled code blocks with syntax-highlighted versions.\r\n    soup = BeautifulSoup(markeddown)\r\n    empty_code_blocks, index = soup.findAll('code', 'removed'), 0\r\n    formatter = HtmlFormatter(cssclass='source')\r\n    for block in code_blocks:\r\n        if block.has_key('class'):\r\n            language = block['class']\r\n        else:\r\n            language = 'text'\r\n        try:\r\n            lexer = get_lexer_by_name(language, stripnl=True, encoding='UTF-8')\r\n        except ValueError, e:\r\n            try:\r\n                # Guess a lexer by the contents of the block.\r\n                lexer = guess_lexer(block.renderContents())\r\n            except ValueError, e:\r\n                # Just make it plain text.\r\n                lexer = get_lexer_by_name('text', stripnl=True, encoding='UTF-8')\r\n        empty_code_blocks[index].replaceWith(\r\n                highlight(block.renderContents(), lexer, formatter))\r\n        index = index + 1\r\n\r\n    return str(soup)\r\n</code>\r\n\r\nThis customer filter uses 3 third party modules:\r\n\r\n- <a href=\"http://pygments.org/\">Pygments</a> - a syntax highlighter for Python 2.3 and above.\r\n\r\nInstall is easy with a Python .egg:\r\n\r\n<code class=\"bash\">\r\neasy_install Pygments\r\n</code>\r\n\r\nFor windows at tarball is also available at <a href=\"http://sourceforge.net/project/downloading.php?groupname=pygments&filename=Pygments-0.8.1.tar.gz&use_mirror=voxel\">Sourceforge</a>.\r\n\r\n- <a href=\"http://www.freewisdom.org/projects/python-markdown/\">Markdown for Python</a> - a plain text to HTML converter\r\n\r\nInstallation is likewise easy:\r\n\r\n<code class=\"bash\">\r\neasy_install markdown\r\n</code>\r\n\r\nIf you're on Windows, a win32 installer is also available <a href=http://pypi.python.org/pypi/Markdown/\">here</a>.\r\n\r\n- Finally, <a href=\"http://www.crummy.com/software/BeautifulSoup/#Download\">Beautiful Soup</a> - a fun-sounding HTML parser.  \r\n\r\nDownload the <a href=\"http://www.crummy.com/software/BeautifulSoup/download/BeautifulSoup.py\">.py file</a> and stick it somewhere in your project.\r\n\r\nWith all the pieces in place, now it's as easy as applying the filter just as with all the other nifty django filters. \r\n\r\n<code class=\"django\">\r\n{{ entry.body|code|safe }}\r\n</code>\r\n( I added the 'safe' filter.)\r\n\r\nNow you just need the stylesheet to make all the newly created span's around your code look as magical as they really are.  I horked the <a href=\"http://pygments.org/media/pygments_style.css\">.css file</a> off the Pygments demo page and did a Find|Replace from \".syntax\" to \".source\", so now my .css looks something like this:\r\n\r\n<code class=\"css\">\r\n.source .c { color: #60a0b0; font-style: italic } /* Comment */\r\n.source .err { border: 1px solid #FF0000 } /* Error */\r\n.source .k { color: #007020; font-weight: bold } /* Keyword */\r\n/** ...  */\r\n</code>\r\n\r\nThen, in the content that you're feeding into your 'code' filter variable, just insert 'code' tags such as this:\r\n\r\n<code>&lt;code class='python'&gt;print &quot;Hello, World&quot;&lt;/code&gt;</code>\r\n\r\nAnd replace the 'python' class with any number of different <a href=\"http://pygments.org/languages/\">languages</a> that Pygments supports.\r\n\r\nThat's it!\r\n\r\nNote, in the last usage code and the custom filter code, on this line:\r\n<code class=\"python\">\r\nblock.replaceWith('&lt;code class=\"removed\"&gt;&lt;/code&gt;')\r\n</code>\r\nshould have real carets instead of the HTML entities.  Perhaps I'll need to fiddle with this filter because it chokes when there are 'code' tags inside.", 
      "date_updated": "2010-05-04 12:04:45", 
      "demo": null, 
      "markup": "h", 
      "title": "Code Highlighting for the Blog", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Here are some high-level highlights on what I did to get code highlighting working for the blog.  The blog runs on python/django, so this is a very pythonic solution -- which, I have to say, is not a bad solution.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 14:46:16", 
       
      "tags": "markdown pygments python"
    }
  }, 
  {
    "pk": 195, 
    "model": "blog.article", 
    "fields": {
      "body": "As a part of a recent hack, I wanted to remove a certain element from a list.  As I was iterating over the list, I tried to find an object that met a certain criteria and then remove it, as follows:\r\n\r\n<code class=\"java\">\r\nvoid removeStuff() {\r\n   List<Recipient> list = service.populateList();\r\n   for (Recipient r : list) {\r\n      if (r.getProperty().equals(searchProperty)) {\r\n         list.remove(r);\r\n      }\r\n   }\r\n}\r\n</code>\r\n\r\nUnfortunately, this will throw the ConcurrentModificationException.  From the said Exception's JavaDoc:\r\n\r\n\"Note that this exception does not always indicate that an object has been concurrently modified by a different thread. If a single thread issues a sequence of method invocations that violates the contract of an object, the object may throw this exception. For example, if a thread modifies a collection directly while it is iterating over the collection with a fail-fast iterator, the iterator will thow this exception.\"\r\n\r\nPerfect.  That too-aptly describes my miserable attempts.  So, it sounds like I just have to wait until iteration is complete to then attempt modification.  So, a quick fix might look something like this:\r\n\r\n<code class=\"java\">\r\nvoid removeStuff() {\r\n   List<Recipient> list = service.populateList();\r\n   Recipient toRemove = null;\r\n   for (Recipient r : list) {\r\n      if (r.getProperty().equals(searchProperty)) {\r\n         toRemove = r;\r\n      }\r\n   }\r\n   list.remove(toRemove);\r\n}\r\n</code>\r\n\r\nInterestingly, and it was true in this case, the JavaDoc also states: \"ConcurrentModificationException  should be used only to detect bugs.\"\r\n\r\n<h4>Update</h4>\r\n\r\nMy friend, Steve, found a better way to do this inline w/o the exception that employs a manual iterator:\r\n<code class=\"java\">\r\nBeaner beaner = null;\r\nIterator iter = list.iterator();\r\nwhile (iter.hasNext()){\r\n   beaner = (Beaner) iter.next();\r\n   if (beaner.getType() == 3){\r\n       iter.remove();\r\n   }\r\n}\r\n</code>", 
      "date_published": "2009-05-12 08:35:05", 
      "image_path": null, 
      "title_slug": "concurrentmodificationexception-within-one-thread", 
      "rendered_body": "As a part of a recent hack, I wanted to remove a certain element from a list.  As I was iterating over the list, I tried to find an object that met a certain criteria and then remove it, as follows:\r\n\r\n<code class=\"java\">\r\nvoid removeStuff() {\r\n   List<Recipient> list = service.populateList();\r\n   for (Recipient r : list) {\r\n      if (r.getProperty().equals(searchProperty)) {\r\n         list.remove(r);\r\n      }\r\n   }\r\n}\r\n</code>\r\n\r\nUnfortunately, this will throw the ConcurrentModificationException.  From the said Exception's JavaDoc:\r\n\r\n\"Note that this exception does not always indicate that an object has been concurrently modified by a different thread. If a single thread issues a sequence of method invocations that violates the contract of an object, the object may throw this exception. For example, if a thread modifies a collection directly while it is iterating over the collection with a fail-fast iterator, the iterator will thow this exception.\"\r\n\r\nPerfect.  That too-aptly describes my miserable attempts.  So, it sounds like I just have to wait until iteration is complete to then attempt modification.  So, a quick fix might look something like this:\r\n\r\n<code class=\"java\">\r\nvoid removeStuff() {\r\n   List<Recipient> list = service.populateList();\r\n   Recipient toRemove = null;\r\n   for (Recipient r : list) {\r\n      if (r.getProperty().equals(searchProperty)) {\r\n         toRemove = r;\r\n      }\r\n   }\r\n   list.remove(toRemove);\r\n}\r\n</code>\r\n\r\nInterestingly, and it was true in this case, the JavaDoc also states: \"ConcurrentModificationException  should be used only to detect bugs.\"\r\n\r\n<h4>Update</h4>\r\n\r\nMy friend, Steve, found a better way to do this inline w/o the exception that employs a manual iterator:\r\n<code class=\"java\">\r\nBeaner beaner = null;\r\nIterator iter = list.iterator();\r\nwhile (iter.hasNext()){\r\n   beaner = (Beaner) iter.next();\r\n   if (beaner.getType() == 3){\r\n       iter.remove();\r\n   }\r\n}\r\n</code>", 
      "date_updated": "2010-05-04 12:04:45", 
      "demo": null, 
      "markup": "h", 
      "title": "ConcurrentModificationException Within One Thread", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I at first thought it odd that a ConcurrentModificationException could be thrown w/in the context of a single Thread.  But, what do you know, it can!  And I seem to be getting better at writing code that does!", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-05-12 08:42:07", 
       
      "tags": "concurrency java"
    }
  }, 
  {
    "pk": 158, 
    "model": "blog.article", 
    "fields": {
      "body": "You can define a context processor, containing within in the things that you would like to be present and available for use within the given context.  There are two ways that I've found to include context processors: Per request or for all requests.\r\n\r\n<h4>Per Request</h4>\r\n\r\nPass the context processor into the request in your view.py:\r\n\r\n<code class=\"python\">\r\nfrom aj2 import context_processors as cp\r\n\r\ndef content_collection(request, slug):\r\n\treturn render_to_response('content/content_list.html', locals(),\r\n\t\tcontext_instance=RequestContext(request, processors=[cp.content_common]))\r\n</code>\r\n\r\nThat means that when the content_list.html template is loaded, all content_common variables will be available in that template context.  Those variables are:\r\n\r\n<code class=\"python\">\r\nfrom aj2 import util\r\n\r\ndef content_common(request):\r\n    return {\r\n\t\t'default_theme' : util.get_default_theme(),\r\n\t\t'friends': util.get_friend_list(),\r\n\t\t'fp_highlight': util.get_random_fp_highlight(),\r\n\t\t'collections': util.get_collection_list(),\r\n    }\r\n</code>\r\n\r\n<h4>For All Requests</h4>\r\nSometimes you don't have absolute control of all the views in your project (ie, plugins).  So, what if you want to apply the context processor to those views as well?  The best way that I've found is by including the context processor definition in the settings.py file:\r\n\r\n<code class=\"python\">\r\nTEMPLATE_CONTEXT_PROCESSORS = (\r\n\t'aj2.context_processors.content_common',\r\n)\r\n</code>\r\n\r\nGlory, glory, django.\r\n\r\nJust make sure that you put the auth context processor in with the TEMPLATE_CONTEXT_PROCESSOR entries that you're adding, otherwise you'll get this message:\r\n\r\n<code>\r\nImproperlyConfigured at /admin/\r\n\r\nPut 'django.core.context_processors.auth' in your TEMPLATE_CONTEXT_PROCESSORS setting in order to use the admin application.\r\n</code>", 
      "date_published": "2009-02-28 15:55:14", 
      "image_path": null, 
      "title_slug": "context-processors-put-content-multiple-pages", 
      "rendered_body": "You can define a context processor, containing within in the things that you would like to be present and available for use within the given context.  There are two ways that I've found to include context processors: Per request or for all requests.\r\n\r\n<h4>Per Request</h4>\r\n\r\nPass the context processor into the request in your view.py:\r\n\r\n<code class=\"python\">\r\nfrom aj2 import context_processors as cp\r\n\r\ndef content_collection(request, slug):\r\n\treturn render_to_response('content/content_list.html', locals(),\r\n\t\tcontext_instance=RequestContext(request, processors=[cp.content_common]))\r\n</code>\r\n\r\nThat means that when the content_list.html template is loaded, all content_common variables will be available in that template context.  Those variables are:\r\n\r\n<code class=\"python\">\r\nfrom aj2 import util\r\n\r\ndef content_common(request):\r\n    return {\r\n\t\t'default_theme' : util.get_default_theme(),\r\n\t\t'friends': util.get_friend_list(),\r\n\t\t'fp_highlight': util.get_random_fp_highlight(),\r\n\t\t'collections': util.get_collection_list(),\r\n    }\r\n</code>\r\n\r\n<h4>For All Requests</h4>\r\nSometimes you don't have absolute control of all the views in your project (ie, plugins).  So, what if you want to apply the context processor to those views as well?  The best way that I've found is by including the context processor definition in the settings.py file:\r\n\r\n<code class=\"python\">\r\nTEMPLATE_CONTEXT_PROCESSORS = (\r\n\t'aj2.context_processors.content_common',\r\n)\r\n</code>\r\n\r\nGlory, glory, django.\r\n\r\nJust make sure that you put the auth context processor in with the TEMPLATE_CONTEXT_PROCESSOR entries that you're adding, otherwise you'll get this message:\r\n\r\n<code>\r\nImproperlyConfigured at /admin/\r\n\r\nPut 'django.core.context_processors.auth' in your TEMPLATE_CONTEXT_PROCESSORS setting in order to use the admin application.\r\n</code>", 
      "date_updated": "2010-05-04 12:04:45", 
      "demo": null, 
      "markup": "h", 
      "title": "Context Processors Put Content On Multiple Pages", 
      "source_path": null, 
      "collection": 1, 
      "summary": "In software development, be <a href=\"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">dry</a>, and define data once.  But, what if that data needs to be used in many places?  This is the case with parts of a web page, for instance, that are common to many different pages.  Django has a great mechanism for this: it is context processors.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-02-28 16:04:14", 
       
      "tags": "django python"
    }
  }, 
  {
    "pk": 191, 
    "model": "blog.article", 
    "fields": {
      "body": "<code class=\"sql\">\r\nselect addresstxt\r\n,      length(addresstxt)\r\n,      length (replace(addresstxt,chr(13),''))\r\n,      length(addresstxt) - length (replace(addresstxt,chr(13),'')) \r\nfrom   contact_info \r\nwhere  length(addresstxt) - length (replace(addresstxt,chr(13),'')) > 4\r\n</code>\r\n\r\nI was actually looking for addresses that were over 4 lines long, hence the where clause.  The chr() function gets the character represented by the given ascii code.  13 is new line.  10 is line feed.  You may want to use one or the other depending on your data.", 
      "date_published": "2009-04-30 08:12:43", 
      "image_path": null, 
      "title_slug": "count-number-characters-w-sql", 
      "rendered_body": "<code class=\"sql\">\r\nselect addresstxt\r\n,      length(addresstxt)\r\n,      length (replace(addresstxt,chr(13),''))\r\n,      length(addresstxt) - length (replace(addresstxt,chr(13),'')) \r\nfrom   contact_info \r\nwhere  length(addresstxt) - length (replace(addresstxt,chr(13),'')) > 4\r\n</code>\r\n\r\nI was actually looking for addresses that were over 4 lines long, hence the where clause.  The chr() function gets the character represented by the given ascii code.  13 is new line.  10 is line feed.  You may want to use one or the other depending on your data.", 
      "date_updated": "2010-05-04 12:07:01", 
      "demo": null, 
      "markup": "h", 
      "title": "Count number of characters w/ SQL", 
      "source_path": null, 
      "collection": 1, 
      "summary": "There's no pre-defined method to count the number of occurrences of a certain character in a database table column using SQL.  There's a quick and dirty way to get it done however.  In my case, I wanted to figure out how many lines existed in a column that held address information, separated by line breaks.  Here's a spot of code that helped from the friendly neighborhood DBA, Reed.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-04-30 08:20:47", 
       
      "tags": "oracle sql"
    }
  }, 
  {
    "pk": 386, 
    "model": "blog.article", 
    "fields": {
      "body": "As a note:  I'm still using IntelliJ 10.0.3 on my Linux machine.  I was having some issues with 10.5 gobbling 100% CPU.  Bad juju.\r\n\r\nOnce you download the tar, open 'er up, and place it in your favorite spot for sweet IDEs on the filesystem, create a launcher.  If you're lucky enough to still be using Gnome and not Unity, right click on your version of the menu and select edit (pictured, Linux Mint, hence all the green):\r\n\r\n.. image:: https://lh6.googleusercontent.com/-8Ls7ZWxGS3A/Tf-sKSQReUI/AAAAAAAAADw/PSBzRjJXNb4/s800/1-EditMenu.jpg\r\n\r\nThe navigate to the Programming-related area, and select New Item:\r\n\r\n.. image:: https://lh6.googleusercontent.com/-k4A_0cam788/Tf-sKsDMERI/AAAAAAAAAD0/_JFzT1d1_hE/s640/2-AddItem.jpg\r\n\r\nCreate your item:\r\n\r\n.. image:: https://lh3.googleusercontent.com/-xRk91_xLdFY/Tf-sKmaxkaI/AAAAAAAAAD4/bE6JKGofBVE/s640/3-EnterItem.jpg\r\n\r\nThe point here is to run the idea.sh file, but export JDK_HOME at the same time.  IntelliJ requires this to run.  It should also be noted that even at version 10.5 of IntelliJ, it still doesn't seem to like OpenJdk.  Hopefully that'll change soon, but for now, download Java 6.  Linux Mint nicely includes this in its PPAs, but you may not have that with other `Ubuntu derivatives <http://rockycode.com/blog/install-java-5-karmic-koala/#comment-51263136>`_.\r\n\r\nMy launcher looks like this:\r\n\r\n.. code-block:: bash\r\n\r\n\t/bin/sh -c \"export JDK_HOME=/usr/lib/jvm/java-6-sun&&/usr/progs/idea10/bin/idea.sh\"\r\n\r\nMake sure to reference the 128-pixel IDEA logo in the <idea>/bin directory so your Gnome-Do will look large and crisp:\r\n\r\n.. image:: https://lh5.googleusercontent.com/-ndkYKjiHNTI/Tf-sKmEfj-I/AAAAAAAAAD8/_zacFXJyyXM/s800/4-GnomeDo.jpg\r\n\r\n", 
      "date_published": "2011-06-20 14:26:22", 
      "image_path": "", 
      "title_slug": "create-intellij-launcher-ubuntu", 
      "rendered_body": "<p>As a note:  I'm still using IntelliJ 10.0.3 on my Linux machine.  I was having some issues with 10.5 gobbling 100% CPU.  Bad juju.</p>\n<p>Once you download the tar, open 'er up, and place it in your favorite spot for sweet IDEs on the filesystem, create a launcher.  If you're lucky enough to still be using Gnome and not Unity, right click on your version of the menu and select edit (pictured, Linux Mint, hence all the green):</p>\n<img alt=\"https://lh6.googleusercontent.com/-8Ls7ZWxGS3A/Tf-sKSQReUI/AAAAAAAAADw/PSBzRjJXNb4/s800/1-EditMenu.jpg\" src=\"https://lh6.googleusercontent.com/-8Ls7ZWxGS3A/Tf-sKSQReUI/AAAAAAAAADw/PSBzRjJXNb4/s800/1-EditMenu.jpg\" />\n<p>The navigate to the Programming-related area, and select New Item:</p>\n<img alt=\"https://lh6.googleusercontent.com/-k4A_0cam788/Tf-sKsDMERI/AAAAAAAAAD0/_JFzT1d1_hE/s640/2-AddItem.jpg\" src=\"https://lh6.googleusercontent.com/-k4A_0cam788/Tf-sKsDMERI/AAAAAAAAAD0/_JFzT1d1_hE/s640/2-AddItem.jpg\" />\n<p>Create your item:</p>\n<img alt=\"https://lh3.googleusercontent.com/-xRk91_xLdFY/Tf-sKmaxkaI/AAAAAAAAAD4/bE6JKGofBVE/s640/3-EnterItem.jpg\" src=\"https://lh3.googleusercontent.com/-xRk91_xLdFY/Tf-sKmaxkaI/AAAAAAAAAD4/bE6JKGofBVE/s640/3-EnterItem.jpg\" />\n<p>The point here is to run the idea.sh file, but export JDK_HOME at the same time.  IntelliJ requires this to run.  It should also be noted that even at version 10.5 of IntelliJ, it still doesn't seem to like OpenJdk.  Hopefully that'll change soon, but for now, download Java 6.  Linux Mint nicely includes this in its PPAs, but you may not have that with other <a class=\"reference external\" href=\"http://rockycode.com/blog/install-java-5-karmic-koala/#comment-51263136\">Ubuntu derivatives</a>.</p>\n<p>My launcher looks like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>/bin/sh -c <span class=\"s2\">&quot;export JDK_HOME=/usr/lib/jvm/java-6-sun&amp;&amp;/usr/progs/idea10/bin/idea.sh&quot;</span>\n</pre></div>\n</div><p>Make sure to reference the 128-pixel IDEA logo in the &lt;idea&gt;/bin directory so your Gnome-Do will look large and crisp:</p>\n<img alt=\"https://lh5.googleusercontent.com/-ndkYKjiHNTI/Tf-sKmEfj-I/AAAAAAAAAD8/_zacFXJyyXM/s800/4-GnomeDo.jpg\" src=\"https://lh5.googleusercontent.com/-ndkYKjiHNTI/Tf-sKmEfj-I/AAAAAAAAAD8/_zacFXJyyXM/s800/4-GnomeDo.jpg\" />\n", 
      "date_updated": "2011-06-20 14:29:42", 
      "demo": "", 
      "markup": "r", 
      "title": "Create an IntelliJ Launcher in Ubuntu", 
      "source_path": "", 
      "collection": 1, 
      "summary": "IntelliJ IDEA is a great development environment.  I enjoy it very much.  It complements the OS of pleasure, Linux.  I mostly the Ubuntu distro or a derivative.  Here's a easy way to get yourself an IntelliJ launcher so you don't have to run the bin/idea.sh file if you don't want to.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-06-20 14:27:24", 
       
      "tags": "intellij linux ubuntu"
    }
  }, 
  {
    "pk": 150, 
    "model": "blog.article", 
    "fields": {
      "body": "In memory of a good <a href=\"http://bentanner.blogspot.com/2009/02/lets-talk-about-sandwiches-baby.html\">sandwich post</a>, I present this to you al la phases.\r\n\r\n\r\n<h4>1. Create stub source file</h4>\r\n\r\nThis custom component is to wrap together a many-to-many picker than I made <a href=\"http://aprilandjake.com/content/manytomany-relationships-jsf/\">earlier</a>.\r\n\r\n<code class=\"jsp\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE html\r\n\t\tPUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n\t\t\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\r\n\t  xml:lang=\"en\" lang=\"en\">\r\n\r\n<ui:component>\r\n<!-- everything here will be in the component -->\r\n</ui:component>\r\n\r\n</html>\r\n</code>\r\n\r\n\r\n<h4>2. Create Taglib</h4>\r\n\r\n<code class=\"xml\">\r\n<?xml version=\"1.0\"?>\r\n<!DOCTYPE facelet-taglib PUBLIC\r\n    \"-//Sun Microsystems, Inc.//DTD Facelet Taglib 1.0//EN\"\r\n    \"http://java.sun.com/dtd/facelet-taglib_1_0.dtd\">\r\n<facelet-taglib>\r\n    <namespace>http://www.lds.org/records</namespace>\r\n    <tag>\r\n        <tag-name>largeManyToManyPicker</tag-name>\r\n        <source>components/large-many-to-many-picker.xhtml</source>\r\n    </tag>\r\n</facelet-taglib>\r\n</code>\r\n\r\n\r\n<h4>3. Implement the component</h4>\r\n\r\n<code class=\"jsp\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE html\r\n\t\tPUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n\t\t\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\r\n\t  xmlns:ui=\"http://java.sun.com/jsf/facelets\"\r\n\t  xmlns:h=\"http://java.sun.com/jsf/html\"\r\n\t  xmlns:f=\"http://java.sun.com/jsf/core\"\r\n\t  xmlns:r=\"http://www.jtsnake.com/reallycool\"\r\n\t  xml:lang=\"en\" lang=\"en\">\r\n\r\n<ui:component>\r\n\t<style type=\"text/css\">\r\n        .selected-list a {\r\n            display: block;\r\n        }\r\n    </style>\r\n\r\n\t<h:selectOneMenu id=\"list-choice\" converter=\"#{entityConverter}\">\r\n\t\t<f:selectItems value=\"#{r:convertSelectItemList(allChoices)}\"/>\r\n\t</h:selectOneMenu>\r\n\t<a class=\"add-link-icon add-btn\" href=\"#\" style=\"text-decoration:none;\" title=\"Add\">&#160;</a>\r\n\t<br/>\r\n\t<h:selectManyListbox id=\"many-list\" value=\"#{selectedChoices}\"\r\n\t\t\t\t\t\t converter=\"#{entityConverter}\" style=\"display:none;\" required=\"#{requireSelection}\"\r\n\t\t\t\t\t\t requiredMessage=\"#{requiredSelectionMsg}\">\r\n\t\t<f:selectItems value=\"#{r:convertSelectItemList(allChoices)}\"/>\r\n\t</h:selectManyListbox>\r\n\r\n\t<div class=\"selected-list\">\r\n\t\t<ui:repeat var=\"choose\" value=\"#{selectedChoices}\">\r\n\t\t\t<a id=\"cit_#{r:getEntityConverterString(choose)}\" class=\"delete-link-icon\"\r\n\t\t\t   href=\"javascript:removeSelection('#{r:getEntityConverterString(choose)}');\">#{choose.label}</a>\r\n\t\t</ui:repeat>\r\n\t</div>\r\n\r\n\t<script src=\"#{request.contextPath}/scripts/jquery.selectboxes.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n\r\n\t<script type=\"text/javascript\">\r\n\t\tjQuery(document).ready(initLrgManyPicker);\r\n\t\t\r\n\t\tfunction initLrgManyPicker() {\r\n\t\t\tjQuery(\".add-btn\").click(function() {\r\n\t\t\t\tjQuery(\"[@id=#{idPrefix}:list-choice]\").copyOptions(\"[@id=#{idPrefix}:many-list]\");\r\n\t\t\t\tjQuery(\".selected-list\").append(addSelection());\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction addSelection() {\r\n\t\t\tvar val = jQuery(\"[@id=#{idPrefix}:list-choice]\").selectedValues();\r\n\t\t\tvar label = jQuery(\"[@id=#{idPrefix}:list-choice]\").children(\"[@selected]\").text();\r\n\t\t\treturn \"&lt;a id=\\\"cit_\" + val + \"\\\" class=\\\"delete-link-icon\\\" href=\\\"javascript:removeSelection('\" + val + \"');\\\"&gt;\" + label + \"&lt;/a&gt;\";\r\n\t\t}\r\n\r\n\t\tfunction removeSelection(poldiv) {\r\n\t\t\tjQuery(\"[@id=cit_\" + poldiv + \"]\").remove();\r\n\t\t\tjQuery(\"[@id=#{idPrefix}:many-list]\").deselectOptions(poldiv);\r\n\t\t}\r\n\t</script>\r\n</ui:component>\r\n</html>\r\n</code>\r\n\r\n\r\n<h4>4. Use the tag</h4>\r\n<code class=\"jsp\">\r\n<!-- ... --->\r\n<dl>\r\n\t<dt>Recipients</dt>\r\n\t<dd>\r\n\t\t<r:largeManyToManyPicker allChoices=\"#{bean.emailBean.allRecipients}\"\r\n\t\t\t\t\t\t\t\t selectedChoices=\"#{email.sendToRecipients}\"\r\n\t\t\t\t\t\t\t\t requiredSelection=\"false\"\r\n\t\t\t\t\t\t\t\t idPrefix=\"form:emailrepeat:0\" />\r\n\t</dd>\r\n</dl>\r\n<!-- ... --->\r\n</code>\r\n\r\nWe're throwing in page-level scripts and styles.  We're also linking to one external javascript.  That external file must be available at the stated location.  There's nothing special to ensure that this dependency is loaded otherwise.", 
      "date_published": "2009-02-20 14:06:48", 
      "image_path": null, 
      "title_slug": "create-custom-facelets-component", 
      "rendered_body": "In memory of a good <a href=\"http://bentanner.blogspot.com/2009/02/lets-talk-about-sandwiches-baby.html\">sandwich post</a>, I present this to you al la phases.\r\n\r\n\r\n<h4>1. Create stub source file</h4>\r\n\r\nThis custom component is to wrap together a many-to-many picker than I made <a href=\"http://aprilandjake.com/content/manytomany-relationships-jsf/\">earlier</a>.\r\n\r\n<code class=\"jsp\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE html\r\n\t\tPUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n\t\t\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\r\n\t  xml:lang=\"en\" lang=\"en\">\r\n\r\n<ui:component>\r\n<!-- everything here will be in the component -->\r\n</ui:component>\r\n\r\n</html>\r\n</code>\r\n\r\n\r\n<h4>2. Create Taglib</h4>\r\n\r\n<code class=\"xml\">\r\n<?xml version=\"1.0\"?>\r\n<!DOCTYPE facelet-taglib PUBLIC\r\n    \"-//Sun Microsystems, Inc.//DTD Facelet Taglib 1.0//EN\"\r\n    \"http://java.sun.com/dtd/facelet-taglib_1_0.dtd\">\r\n<facelet-taglib>\r\n    <namespace>http://www.lds.org/records</namespace>\r\n    <tag>\r\n        <tag-name>largeManyToManyPicker</tag-name>\r\n        <source>components/large-many-to-many-picker.xhtml</source>\r\n    </tag>\r\n</facelet-taglib>\r\n</code>\r\n\r\n\r\n<h4>3. Implement the component</h4>\r\n\r\n<code class=\"jsp\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE html\r\n\t\tPUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n\t\t\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\r\n\t  xmlns:ui=\"http://java.sun.com/jsf/facelets\"\r\n\t  xmlns:h=\"http://java.sun.com/jsf/html\"\r\n\t  xmlns:f=\"http://java.sun.com/jsf/core\"\r\n\t  xmlns:r=\"http://www.jtsnake.com/reallycool\"\r\n\t  xml:lang=\"en\" lang=\"en\">\r\n\r\n<ui:component>\r\n\t<style type=\"text/css\">\r\n        .selected-list a {\r\n            display: block;\r\n        }\r\n    </style>\r\n\r\n\t<h:selectOneMenu id=\"list-choice\" converter=\"#{entityConverter}\">\r\n\t\t<f:selectItems value=\"#{r:convertSelectItemList(allChoices)}\"/>\r\n\t</h:selectOneMenu>\r\n\t<a class=\"add-link-icon add-btn\" href=\"#\" style=\"text-decoration:none;\" title=\"Add\">&#160;</a>\r\n\t<br/>\r\n\t<h:selectManyListbox id=\"many-list\" value=\"#{selectedChoices}\"\r\n\t\t\t\t\t\t converter=\"#{entityConverter}\" style=\"display:none;\" required=\"#{requireSelection}\"\r\n\t\t\t\t\t\t requiredMessage=\"#{requiredSelectionMsg}\">\r\n\t\t<f:selectItems value=\"#{r:convertSelectItemList(allChoices)}\"/>\r\n\t</h:selectManyListbox>\r\n\r\n\t<div class=\"selected-list\">\r\n\t\t<ui:repeat var=\"choose\" value=\"#{selectedChoices}\">\r\n\t\t\t<a id=\"cit_#{r:getEntityConverterString(choose)}\" class=\"delete-link-icon\"\r\n\t\t\t   href=\"javascript:removeSelection('#{r:getEntityConverterString(choose)}');\">#{choose.label}</a>\r\n\t\t</ui:repeat>\r\n\t</div>\r\n\r\n\t<script src=\"#{request.contextPath}/scripts/jquery.selectboxes.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n\r\n\t<script type=\"text/javascript\">\r\n\t\tjQuery(document).ready(initLrgManyPicker);\r\n\t\t\r\n\t\tfunction initLrgManyPicker() {\r\n\t\t\tjQuery(\".add-btn\").click(function() {\r\n\t\t\t\tjQuery(\"[@id=#{idPrefix}:list-choice]\").copyOptions(\"[@id=#{idPrefix}:many-list]\");\r\n\t\t\t\tjQuery(\".selected-list\").append(addSelection());\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction addSelection() {\r\n\t\t\tvar val = jQuery(\"[@id=#{idPrefix}:list-choice]\").selectedValues();\r\n\t\t\tvar label = jQuery(\"[@id=#{idPrefix}:list-choice]\").children(\"[@selected]\").text();\r\n\t\t\treturn \"&lt;a id=\\\"cit_\" + val + \"\\\" class=\\\"delete-link-icon\\\" href=\\\"javascript:removeSelection('\" + val + \"');\\\"&gt;\" + label + \"&lt;/a&gt;\";\r\n\t\t}\r\n\r\n\t\tfunction removeSelection(poldiv) {\r\n\t\t\tjQuery(\"[@id=cit_\" + poldiv + \"]\").remove();\r\n\t\t\tjQuery(\"[@id=#{idPrefix}:many-list]\").deselectOptions(poldiv);\r\n\t\t}\r\n\t</script>\r\n</ui:component>\r\n</html>\r\n</code>\r\n\r\n\r\n<h4>4. Use the tag</h4>\r\n<code class=\"jsp\">\r\n<!-- ... --->\r\n<dl>\r\n\t<dt>Recipients</dt>\r\n\t<dd>\r\n\t\t<r:largeManyToManyPicker allChoices=\"#{bean.emailBean.allRecipients}\"\r\n\t\t\t\t\t\t\t\t selectedChoices=\"#{email.sendToRecipients}\"\r\n\t\t\t\t\t\t\t\t requiredSelection=\"false\"\r\n\t\t\t\t\t\t\t\t idPrefix=\"form:emailrepeat:0\" />\r\n\t</dd>\r\n</dl>\r\n<!-- ... --->\r\n</code>\r\n\r\nWe're throwing in page-level scripts and styles.  We're also linking to one external javascript.  That external file must be available at the stated location.  There's nothing special to ensure that this dependency is loaded otherwise.", 
      "date_updated": "2010-05-04 12:07:01", 
      "demo": null, 
      "markup": "h", 
      "title": "Create Custom Facelets Component", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Facelets is a great addition to jsf.  It is very extensible, and it makes creating custom components even easier.  It's fantastic.  This is almost TOO easy.  If you have a pile of view markup and/or client-side logic, then this is a good option.  And by good, I mean awesome.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-02-20 14:31:22", 
       
      "tags": "facelets java jsf"
    }
  }, 
  {
    "pk": 364, 
    "model": "blog.article", 
    "fields": {
      "body": "<ol>\r\n<li>Open a terminal window.\r\n<li>In the terminal window, type\r\n<pre class=\"code\">sudo apt-get alien</pre>\r\nthen press <span style=\"font-weight: bold;\">Enter</span>. If prompted to enter your password, do so, then press Enter.</li>\r\n<li>Follow the prompts to install alien.</li>\r\n<li>To create a gdeb package, enter in the terminal window\r\n<pre class=\"code\">sudo alien --scripts <full_path_to_your_rpm_file></full_path_to_your_rpm_file></pre>\r\nthen press <span style=\"font-weight: bold;\">Enter,</span> and follow the prompts.</li>\r\n</ol>\r\nYou now have a gdeb package. In order to install the package, go to </span><span style=\"font-size: 100%; font-weight: bold;\">Applications &gt; System Tools &gt; GDebi Package Installer</span>, select your new package, and away you go!", 
      "date_published": "2011-02-04 09:48:13", 
      "image_path": "", 
      "title_slug": "creating-gdeb-package-rpm-package", 
      "rendered_body": "<ol>\r\n<li>Open a terminal window.\r\n<li>In the terminal window, type\r\n<pre class=\"code\">sudo apt-get alien</pre>\r\nthen press <span style=\"font-weight: bold;\">Enter</span>. If prompted to enter your password, do so, then press Enter.</li>\r\n<li>Follow the prompts to install alien.</li>\r\n<li>To create a gdeb package, enter in the terminal window\r\n<pre class=\"code\">sudo alien --scripts <full_path_to_your_rpm_file></full_path_to_your_rpm_file></pre>\r\nthen press <span style=\"font-weight: bold;\">Enter,</span> and follow the prompts.</li>\r\n</ol>\r\nYou now have a gdeb package. In order to install the package, go to </span><span style=\"font-size: 100%; font-weight: bold;\">Applications &gt; System Tools &gt; GDebi Package Installer</span>, select your new package, and away you go!", 
      "date_updated": "2011-05-03 10:19:24", 
      "demo": "", 
      "markup": "h", 
      "title": "Creating a .gdeb package from a .rpm package", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Occasionally, you'll need to install software that's only currently available as an .rpm package, meaning it is specifically packaged for a Red Hat Linux distro. These can be used to create a debian package, however, that can then be installed easily under Ubuntu. The program \"alien\" is used to do this\r\n", 
      "source": "", 
      "user": 6, 
      "active": true, 
      "date_created": "2011-02-04 09:51:52", 
       
      "tags": "linux ubuntu"
    }
  }, 
  {
    "pk": 389, 
    "model": "blog.article", 
    "fields": {
      "body": "Consider this class:\r\n\r\n<code class=\"java\">\r\npublic class CookieAwareWebClient : WebClient\r\n{\r\n    public CookieContainer CookieContainer { get; set; }\r\n    public Uri Uri { get; set; }\r\n\r\n    public CookieAwareWebClient() : this (new CookieContainer())\r\n    {\r\n    }\r\n\r\n    public CookieAwareWebClient(CookieContainer cookies)\r\n    {\r\n        this.CookieContainer = cookies;\r\n    }\r\n\r\n    public override WebRequest GetWebRequest(Uri address)\r\n    {\r\n        WebRequest request = base.GetWebRequest(address);\r\n        if (request is HttpWebRequest)\r\n\t{\r\n\t     (request as HttpWebRequest).CookieContainer = this.CookieContainer;\r\n\t}\r\n\tHttpWebRequest httpRequest = (HttpWebRequest) request;\r\n\thttpRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;\r\n\treturn httpRequest;\r\n    }\r\n\r\n    public override WebResponse GetWebResponse(WebRequest request)\r\n    {\r\n        WebResponse response = base.GetWebResponse(request);\r\n\tString setCookieHeader = response.Headers[HttpResponseHeader.SetCookie];\r\n\r\n\tif (setCookieHeader != null)\r\n\t{\r\n\t    //do something if needed to parse out the cookie.\r\n\t    if (setCookieHeader != null)\r\n\t    {\r\n\t        Cookie cookie = new Cookie(); //create cookie\r\n\t\tthis.CookieContainer.Add(cookie);\r\n\t    }\r\n\t}\r\n\treturn response;\r\n    }\r\n}\r\n</code>\r\n\r\nYou will see two overridden methods for GetWebRequest and GetWebResponse.  These methods can be overridden to handle the cookie container.  You will also notice the AutomaticDecompression that can be placed on the HttpWebRequest to validate the response is being unzipped (GZIP) automatically since the WebClient doesn't do this out of the box.\r\n\r\nNow, when calling web services or executing POSTs or GETs, it will handle holding your cookies for you automatically.  They are included in subsequent requests.\r\n\r\nProps go to my hero Tyler.", 
      "date_published": "2011-07-08 12:31:56", 
      "image_path": "", 
      "title_slug": "creating-cookie-aware-webclient", 
      "rendered_body": "Consider this class:\r\n\r\n<code class=\"java\">\r\npublic class CookieAwareWebClient : WebClient\r\n{\r\n    public CookieContainer CookieContainer { get; set; }\r\n    public Uri Uri { get; set; }\r\n\r\n    public CookieAwareWebClient() : this (new CookieContainer())\r\n    {\r\n    }\r\n\r\n    public CookieAwareWebClient(CookieContainer cookies)\r\n    {\r\n        this.CookieContainer = cookies;\r\n    }\r\n\r\n    public override WebRequest GetWebRequest(Uri address)\r\n    {\r\n        WebRequest request = base.GetWebRequest(address);\r\n        if (request is HttpWebRequest)\r\n\t{\r\n\t     (request as HttpWebRequest).CookieContainer = this.CookieContainer;\r\n\t}\r\n\tHttpWebRequest httpRequest = (HttpWebRequest) request;\r\n\thttpRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;\r\n\treturn httpRequest;\r\n    }\r\n\r\n    public override WebResponse GetWebResponse(WebRequest request)\r\n    {\r\n        WebResponse response = base.GetWebResponse(request);\r\n\tString setCookieHeader = response.Headers[HttpResponseHeader.SetCookie];\r\n\r\n\tif (setCookieHeader != null)\r\n\t{\r\n\t    //do something if needed to parse out the cookie.\r\n\t    if (setCookieHeader != null)\r\n\t    {\r\n\t        Cookie cookie = new Cookie(); //create cookie\r\n\t\tthis.CookieContainer.Add(cookie);\r\n\t    }\r\n\t}\r\n\treturn response;\r\n    }\r\n}\r\n</code>\r\n\r\nYou will see two overridden methods for GetWebRequest and GetWebResponse.  These methods can be overridden to handle the cookie container.  You will also notice the AutomaticDecompression that can be placed on the HttpWebRequest to validate the response is being unzipped (GZIP) automatically since the WebClient doesn't do this out of the box.\r\n\r\nNow, when calling web services or executing POSTs or GETs, it will handle holding your cookies for you automatically.  They are included in subsequent requests.\r\n\r\nProps go to my hero Tyler.", 
      "date_updated": "2011-07-12 15:22:11", 
      "demo": "", 
      "markup": "h", 
      "title": "Creating a Cookie Aware WebClient", 
      "source_path": "", 
      "collection": 1, 
      "summary": "C# has an object called WebClient that makes it easier to execute POSTs and GETs.  However, if you ever have to deal with managing cookies, the WebClient doesn't do this out of the box, which puzzles me.  It's not too hard to implement though.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2011-07-08 12:35:21", 
       
      "tags": "cookiecontainer csharp webclient"
    }
  }, 
  {
    "pk": 125, 
    "model": "blog.article", 
    "fields": {
      "body": "All over the net, there are questions asked about running Crystal Reports in Linux.  This isn't a solution for running Crystal in Linux per se, but running Crystal as lightweight as possible on a Linux host machine.  This means, run a VM, install Crystal, and use a small Oracle client.\r\n\r\nMy VM of choice is VirtualBox.  It runs smoothly, is equal in its non-performance to other VM's, and has some cool features.  For a little how to on how to install VirtualBox on Ubuntu, look <a href=\"http://aprilandjake.com/content/virtual-box-ubuntu-linux/\">here</a>.  Be sure to install Windows XP on your VM, as that's the only environment I know of that Crystal is actually runnable in.  We also tried using CodeWeavers Pro (which is built on top of Wine) to run Crystal.  It was a no go.  No matter what method we used within CodeWeavers, we always ran into an error about needing to run the setup.exe again.\r\n\r\nOnce the VM is installed, you can install <a href=\"http://www.businessobjects.com/product/catalog/crystalreports/\">Crystal Reports</a> on the VM.\r\n\r\nThen, make sure to download an Oracle client.  Oracle clients are infamously large, clunky, and have a very low-value per Mb of size.  Therefore, I like to go with the smallest client available.  As of this writing, the smallest is the Oracle <a href=\"http://www.oracle.com/technology/tech/oci/instantclient/index.html\">Instant Client</a>, basic lite version.  Download the package, extract to a folder, and put that folder in your PATH.  \r\n\r\nNow you can pull up Crystal Reports and make a new connection.  The Instant Client, because of the lack of pork rolled its package, lacks functionality, but that's ok because there's a workaround.  It's worth the saved space and thought of massive amounts of worthless Oracle code cluttering your hard drive.  Instead of being able to use your tnsnames.ora, you will need to enter the actual address of the database host.  Use this format:\r\n\r\n<code class=\"html\">\r\n//host:port/servicename\r\n</code>\r\n\r\nThe service name will be the database alias that you would normally use via tnsnames.ora.  In fact, you can just inspect your tnsnames.ora file to find the host, port, and all that jazz.", 
      "date_published": "2008-11-07 15:19:58", 
      "image_path": null, 
      "title_slug": "crystal-reports-ubuntu-linux", 
      "rendered_body": "All over the net, there are questions asked about running Crystal Reports in Linux.  This isn't a solution for running Crystal in Linux per se, but running Crystal as lightweight as possible on a Linux host machine.  This means, run a VM, install Crystal, and use a small Oracle client.\r\n\r\nMy VM of choice is VirtualBox.  It runs smoothly, is equal in its non-performance to other VM's, and has some cool features.  For a little how to on how to install VirtualBox on Ubuntu, look <a href=\"http://aprilandjake.com/content/virtual-box-ubuntu-linux/\">here</a>.  Be sure to install Windows XP on your VM, as that's the only environment I know of that Crystal is actually runnable in.  We also tried using CodeWeavers Pro (which is built on top of Wine) to run Crystal.  It was a no go.  No matter what method we used within CodeWeavers, we always ran into an error about needing to run the setup.exe again.\r\n\r\nOnce the VM is installed, you can install <a href=\"http://www.businessobjects.com/product/catalog/crystalreports/\">Crystal Reports</a> on the VM.\r\n\r\nThen, make sure to download an Oracle client.  Oracle clients are infamously large, clunky, and have a very low-value per Mb of size.  Therefore, I like to go with the smallest client available.  As of this writing, the smallest is the Oracle <a href=\"http://www.oracle.com/technology/tech/oci/instantclient/index.html\">Instant Client</a>, basic lite version.  Download the package, extract to a folder, and put that folder in your PATH.  \r\n\r\nNow you can pull up Crystal Reports and make a new connection.  The Instant Client, because of the lack of pork rolled its package, lacks functionality, but that's ok because there's a workaround.  It's worth the saved space and thought of massive amounts of worthless Oracle code cluttering your hard drive.  Instead of being able to use your tnsnames.ora, you will need to enter the actual address of the database host.  Use this format:\r\n\r\n<code class=\"html\">\r\n//host:port/servicename\r\n</code>\r\n\r\nThe service name will be the database alias that you would normally use via tnsnames.ora.  In fact, you can just inspect your tnsnames.ora file to find the host, port, and all that jazz.", 
      "date_updated": "2010-05-04 12:07:01", 
      "demo": null, 
      "markup": "h", 
      "title": "Crystal Reports in Ubuntu Linux", 
      "source_path": null, 
      "collection": 1, 
      "summary": "All over the net, there are questions asked about running Crystal Reports in Linux.  This isn't a solution for running Crystal in Linux per se, but running Crystal as lightweight as possible on a Linux host machine.  This means, run a VM, install Crystal, and use a small Oracle client.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:20:40", 
       
      "tags": "crystal-reports linux ubuntu"
    }
  }, 
  {
    "pk": 99, 
    "model": "blog.article", 
    "fields": {
      "body": "Recently, I attended NFJS (No Fluff Just Stuff) in Salt Lake City.  Besides being a great developer-centric convention, we were laden with the latest, greatest in nerd apparel.  Taking the fashion community by storm are these snazzy little bracelets.  First, what programmer do you know that <i>doesn't</i> wear a bracelet?!  Well, that number is about to drop, because here's another way to tote around another <a href=\"http://www.engadget.com/2006/09/21/imations-usb-bracelet-goes-1gb/\">gadget</a>.  \r\n\r\nIn the minority I may be, but I for one dislike bracelets anyway.  But this, even for me, is exceeding the allowable nerdiness threshold.  Wow.  I chuckled about this for days.  I can't think of any real good reason for these.  Maybe by tying your USB stick on your arm, you free up room in your pant pockets for all those other gadgets that everyone seems to tote around these days.  With all the gadgets, nerds are going to have to all convert to cargo pants or purses one of these days -- that, or buy an all-in-one gadget (read iPhone). \r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/6EEh8dVKfsp5w3TBTJbisQ\"><img src=\"http://lh6.ggpht.com/trent.jake/SMQYI2FKCdI/AAAAAAAAELk/PVk7bs2AlUE/s400/IMGP0522.JPG\" /></a>", 
      "date_published": "2008-10-07 14:48:25", 
      "image_path": null, 
      "title_slug": "data-apparel", 
      "rendered_body": "Recently, I attended NFJS (No Fluff Just Stuff) in Salt Lake City.  Besides being a great developer-centric convention, we were laden with the latest, greatest in nerd apparel.  Taking the fashion community by storm are these snazzy little bracelets.  First, what programmer do you know that <i>doesn't</i> wear a bracelet?!  Well, that number is about to drop, because here's another way to tote around another <a href=\"http://www.engadget.com/2006/09/21/imations-usb-bracelet-goes-1gb/\">gadget</a>.  \r\n\r\nIn the minority I may be, but I for one dislike bracelets anyway.  But this, even for me, is exceeding the allowable nerdiness threshold.  Wow.  I chuckled about this for days.  I can't think of any real good reason for these.  Maybe by tying your USB stick on your arm, you free up room in your pant pockets for all those other gadgets that everyone seems to tote around these days.  With all the gadgets, nerds are going to have to all convert to cargo pants or purses one of these days -- that, or buy an all-in-one gadget (read iPhone). \r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/6EEh8dVKfsp5w3TBTJbisQ\"><img src=\"http://lh6.ggpht.com/trent.jake/SMQYI2FKCdI/AAAAAAAAELk/PVk7bs2AlUE/s400/IMGP0522.JPG\" /></a>", 
      "date_updated": "2010-05-04 12:07:01", 
      "demo": null, 
      "markup": "h", 
      "title": "Data Apparel", 
      "source_path": null, 
      "collection": 1, 
      "summary": "There's some crazy nerd apparel out these days.  My favorite is the wifi hotspot detector <a href=\"http://www.thinkgeek.com/tshirts/illuminated/991e/\">t-shirts</a>.  But, I got this one for free, and it's quite funny, so check out these bracelets!\r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/GiR2JVPzi9ins9WTv7pt7g\"><img src=\"http://lh4.ggpht.com/trent.jake/SMQYIi9lm8I/AAAAAAAAELc/UuzgTbUnEUE/s400/IMGP0523.JPG\" /></a>", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 14:49:46", 
       
      "tags": "storage"
    }
  }, 
  {
    "pk": 372, 
    "model": "blog.article", 
    "fields": {
      "body": "IntelliJ makes it easy.  First, you want to click the runnable configurations dropdown and select \"Edit Configurations\":\r\n\r\n.. image:: https://lh3.googleusercontent.com/_mA-9kCcx0bs/TaXdzFFhpxI/AAAAAAAAABM/6FoV9E3FpII/s800/ConfigDropdown.png\r\n\r\nOnce in the \"Edit Configurations\" dialog, click the \"+\" Plus icon to create a new configuration.  Select \"Remote\":\r\n\r\n.. image:: https://lh4.googleusercontent.com/_mA-9kCcx0bs/TaXdzLv6GAI/AAAAAAAAABQ/3giI8x9pZc0/s640/SelectRemote.png\r\n\r\nThis dialog is the last, and you will need to configure your connection:\r\n\r\n* Transport: Socket\r\n* Debugger: Attach\r\n* Host: Either IP or hostname of remote server\r\n* Port: Must match debug port opened on remote Tomcat (address arg below)\r\n\r\n.. image:: https://lh3.googleusercontent.com/_mA-9kCcx0bs/TaXdzPI1ovI/AAAAAAAAABU/EU-fflxWQ1g/s800/RemoteDebug.png\r\n\r\nAs is explained to you on the window, you need to be able to add JVM arguments to the remote JVM.  By now, let us hope that we're all using a JDK more recent than JDK 1.3. :)  In that case, you'll need:\r\n\r\n.. code-block:: java\r\n\r\n  -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=7007\r\n\r\nTo get those args on the server might require different mechanisms by default.  My environment's deploy is automated to put the args on the JAVA_OPTS variable in:\r\n\r\n.. code-block:: bash\r\n\r\n  $CATALINA_HOME/conf/Catalina/localhost/tcat-env.conf\r\n\r\nBut if your deployment doesn't apply JVM properties for your app, you can put them in:\r\n\r\n.. code-block:: bash\r\n\r\n  $CATALINA_HOME/bin/setenv.sh\r\n\r\nLike so:\r\n\r\n.. code-block:: bash\r\n\r\n  export JAVA_OPTS=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=7007\"\r\n\r\nFinally, restart the remote server, and your debugging port will be open.  Start your remote connection in IntelliJ and set a break point.  Exercise your deployed app so your code will be executed, and let the good times roll!\r\n", 
      "date_published": "2011-04-13 11:54:10", 
      "image_path": "", 
      "title_slug": "debugging-remote-tomcat-intellij", 
      "rendered_body": "<p>IntelliJ makes it easy.  First, you want to click the runnable configurations dropdown and select &quot;Edit Configurations&quot;:</p>\n<img alt=\"https://lh3.googleusercontent.com/_mA-9kCcx0bs/TaXdzFFhpxI/AAAAAAAAABM/6FoV9E3FpII/s800/ConfigDropdown.png\" src=\"https://lh3.googleusercontent.com/_mA-9kCcx0bs/TaXdzFFhpxI/AAAAAAAAABM/6FoV9E3FpII/s800/ConfigDropdown.png\" />\n<p>Once in the &quot;Edit Configurations&quot; dialog, click the &quot;+&quot; Plus icon to create a new configuration.  Select &quot;Remote&quot;:</p>\n<img alt=\"https://lh4.googleusercontent.com/_mA-9kCcx0bs/TaXdzLv6GAI/AAAAAAAAABQ/3giI8x9pZc0/s640/SelectRemote.png\" src=\"https://lh4.googleusercontent.com/_mA-9kCcx0bs/TaXdzLv6GAI/AAAAAAAAABQ/3giI8x9pZc0/s640/SelectRemote.png\" />\n<p>This dialog is the last, and you will need to configure your connection:</p>\n<ul class=\"simple\">\n<li>Transport: Socket</li>\n<li>Debugger: Attach</li>\n<li>Host: Either IP or hostname of remote server</li>\n<li>Port: Must match debug port opened on remote Tomcat (address arg below)</li>\n</ul>\n<img alt=\"https://lh3.googleusercontent.com/_mA-9kCcx0bs/TaXdzPI1ovI/AAAAAAAAABU/EU-fflxWQ1g/s800/RemoteDebug.png\" src=\"https://lh3.googleusercontent.com/_mA-9kCcx0bs/TaXdzPI1ovI/AAAAAAAAABU/EU-fflxWQ1g/s800/RemoteDebug.png\" />\n<p>As is explained to you on the window, you need to be able to add JVM arguments to the remote JVM.  By now, let us hope that we're all using a JDK more recent than JDK 1.3. :)  In that case, you'll need:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"o\">-</span><span class=\"n\">Xdebug</span> <span class=\"o\">-</span><span class=\"nl\">Xrunjdwp:</span><span class=\"n\">transport</span><span class=\"o\">=</span><span class=\"n\">dt_socket</span><span class=\"o\">,</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">suspend</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"mi\">7007</span>\n</pre></div>\n</div><p>To get those args on the server might require different mechanisms by default.  My environment's deploy is automated to put the args on the JAVA_OPTS variable in:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nv\">$CATALINA_HOME</span>/conf/Catalina/localhost/tcat-env.conf\n</pre></div>\n</div><p>But if your deployment doesn't apply JVM properties for your app, you can put them in:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nv\">$CATALINA_HOME</span>/bin/setenv.sh\n</pre></div>\n</div><p>Like so:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nb\">export </span><span class=\"nv\">JAVA_OPTS</span><span class=\"o\">=</span><span class=\"s2\">&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=7007&quot;</span>\n</pre></div>\n</div><p>Finally, restart the remote server, and your debugging port will be open.  Start your remote connection in IntelliJ and set a break point.  Exercise your deployed app so your code will be executed, and let the good times roll!</p>\n", 
      "date_updated": "2011-04-14 14:57:40", 
      "demo": "", 
      "markup": "r", 
      "title": "Debugging Remote Tomcat from IntelliJ with Style", 
      "source_path": "", 
      "collection": 1, 
      "summary": "One of the worst things to debug can be something that works just fine in your local development environment but does not work in a deployed environment.  If you deploy to Tomcat, you can debug it remotely.  If you use IntelliJ IDEA, you can do it with style.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-04-13 11:55:40", 
       
      "tags": "debugging intellij tomcat"
    }
  }, 
  {
    "pk": 282, 
    "model": "blog.article", 
    "fields": {
      "body": "<iframe src=\"http://docs.google.com/present/embed?id=dcsq834g_62fspdmdgk\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe>", 
      "date_published": "2009-10-14 06:02:18", 
      "image_path": null, 
      "title_slug": "django-intro-presentation", 
      "rendered_body": "<iframe src=\"http://docs.google.com/present/embed?id=dcsq834g_62fspdmdgk\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe>", 
      "date_updated": "2010-05-04 12:07:01", 
      "demo": null, 
      "markup": "h", 
      "title": "Django Intro Presentation", 
      "source_path": null, 
      "collection": 1, 
      "summary": "At Sort 2009, a technical conference at the LDS Church, I gave a presentation on my favorite all-in-one web framework, Django.  It's a great tool, and here's a look at the slides produced to accompany my presentation.  Also, checkout bitbucket for the <a href=\"http://www.bitbucket.org/jtsnake/hymnorganizer\">source code</a> for the demo project.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-10-14 06:04:32", 
       
      "tags": "django python"
    }
  }, 
  {
    "pk": 309, 
    "model": "blog.article", 
    "fields": {
      "body": "<iframe src=\"http://docs.google.com/present/embed?id=dcsq834g_86dgfnbkdg&size=m\" frameborder=\"0\" width=\"555\" height=\"451\"></iframe>\r\n", 
      "date_published": "2010-01-14 18:28:07", 
      "image_path": null, 
      "title_slug": "django-jython-intro", 
      "rendered_body": "<iframe src=\"http://docs.google.com/present/embed?id=dcsq834g_86dgfnbkdg&size=m\" frameborder=\"0\" width=\"555\" height=\"451\"></iframe>\r\n", 
      "date_updated": "2010-05-04 12:07:01", 
      "demo": null, 
      "markup": "h", 
      "title": "Django on Jython Intro", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Here is a \"new and shiney\" presentation for running Django on Jython.  It's based on my experiences with the <a href=\"http://wiki.python.org/jython/DjangoOnJython\">DjangoJython tutorial</a>.\r\n\r\nAs is discussed in the slide deck, and hence the subtitle of the presentation, much could be helped by more careful reading of documentation.  Well, moments ago, I decided that I hadn't checked out django-jython 1.1.  Well.... turns out many more problems could have been helped by using this later version.  Sweet!", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-01-14 18:31:18", 
       
      "tags": "django java jython python"
    }
  }, 
  {
    "pk": 114, 
    "model": "blog.article", 
    "fields": {
      "body": "My friend Josh has told me numerous times that Django is much easier to work with on Linux.  Basically things are easier if you know how to do them.  Whether things are easier to learn or not on Linux compared to other OS's is debatable.  But, on this point anyway, it seems that Linux and Django really play well together.\r\n\r\nFirst of all, when I installed Ubuntu 8 (Hardy Heron), I had 3 versions of Python already installed for me.  It also came with a couple of very useful packages for python preinstalled, including PIL.\r\n\r\nIn order to get Django rockin though, we need a database.  Again, I favor MySQL for reasons of familiarity.  Perhaps someday I'll branch out just for fun, but for personal projects, it seems to do the job.\t For MySQL installation help, see this <a href=\"http://aprilandjake.com/tech/article/19\">tutorial</a>.\r\n\r\nNow, we need to grab <a href=\"http://www.djangoproject.com/download/\">Django</a>.  I like to work with the latest SVN version.  I create a lib directory and put stuff there.\r\n\r\nCreate a directory where you'd like django to be, and check it out from svn:\r\n\r\n<code class=\"bash\">\r\nmkdir django-svn; cd django-svn\r\nsvn co http://code.djangoproject.com/svn/django/trunk/ .\r\n</code>\r\n\r\nNow, make Python aware of the Django packages:\r\n\r\n<code class=\"bash\">\r\ncd /usr/lib/python2.5/site-packages\r\nln -s /home/jtsnake/dev/lib/django-svn/django django\r\n</code>\r\n\r\nPython also needs to know how to use the MySQL database:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install python-mysqldb\r\n</code>\r\n\r\nIf you skip this last step, you'll get this:\r\n\r\n<code class=\"bash\">\r\n# if I try:\r\npython manage.py syncdb\r\n\r\n# I get:\r\ndjango.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named MySQLdb\r\n</code>\r\n\r\nNow make it convient for django to generate projects for you by putting the admin tool in your path.\r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/environment\r\nPATH=\"[other dir's...]:/usr/lib/python2.5/site-packages/django/bin\"\r\n</code>\r\n\r\nReload env:\r\n\r\n<code class=\"path\">\r\nsource /etc/environment\r\n</code>\r\n\r\nNow you should be ready to have all the pieces work together: Python, Django, and MySQL.\r\n\r\nStart projects with this target:\r\n\r\n<code class=\"bash\">\r\ndjango-admin.py startproject projectName\r\n</code>\r\n\r\nHappy Django'in on Linux!  It's true, Josh; Django is very nice on Linux!\r\n\r\nAnother great Django/Linux setup tutorial <a href=\"http://www.jeffbaier.com/2007/07/26/installing-django-on-an-ubuntu-linux-server/\">here</a>.", 
      "date_published": "2008-09-27 15:09:00", 
      "image_path": null, 
      "title_slug": "django-ubuntu-linux-8", 
      "rendered_body": "My friend Josh has told me numerous times that Django is much easier to work with on Linux.  Basically things are easier if you know how to do them.  Whether things are easier to learn or not on Linux compared to other OS's is debatable.  But, on this point anyway, it seems that Linux and Django really play well together.\r\n\r\nFirst of all, when I installed Ubuntu 8 (Hardy Heron), I had 3 versions of Python already installed for me.  It also came with a couple of very useful packages for python preinstalled, including PIL.\r\n\r\nIn order to get Django rockin though, we need a database.  Again, I favor MySQL for reasons of familiarity.  Perhaps someday I'll branch out just for fun, but for personal projects, it seems to do the job.\t For MySQL installation help, see this <a href=\"http://aprilandjake.com/tech/article/19\">tutorial</a>.\r\n\r\nNow, we need to grab <a href=\"http://www.djangoproject.com/download/\">Django</a>.  I like to work with the latest SVN version.  I create a lib directory and put stuff there.\r\n\r\nCreate a directory where you'd like django to be, and check it out from svn:\r\n\r\n<code class=\"bash\">\r\nmkdir django-svn; cd django-svn\r\nsvn co http://code.djangoproject.com/svn/django/trunk/ .\r\n</code>\r\n\r\nNow, make Python aware of the Django packages:\r\n\r\n<code class=\"bash\">\r\ncd /usr/lib/python2.5/site-packages\r\nln -s /home/jtsnake/dev/lib/django-svn/django django\r\n</code>\r\n\r\nPython also needs to know how to use the MySQL database:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install python-mysqldb\r\n</code>\r\n\r\nIf you skip this last step, you'll get this:\r\n\r\n<code class=\"bash\">\r\n# if I try:\r\npython manage.py syncdb\r\n\r\n# I get:\r\ndjango.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named MySQLdb\r\n</code>\r\n\r\nNow make it convient for django to generate projects for you by putting the admin tool in your path.\r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/environment\r\nPATH=\"[other dir's...]:/usr/lib/python2.5/site-packages/django/bin\"\r\n</code>\r\n\r\nReload env:\r\n\r\n<code class=\"path\">\r\nsource /etc/environment\r\n</code>\r\n\r\nNow you should be ready to have all the pieces work together: Python, Django, and MySQL.\r\n\r\nStart projects with this target:\r\n\r\n<code class=\"bash\">\r\ndjango-admin.py startproject projectName\r\n</code>\r\n\r\nHappy Django'in on Linux!  It's true, Josh; Django is very nice on Linux!\r\n\r\nAnother great Django/Linux setup tutorial <a href=\"http://www.jeffbaier.com/2007/07/26/installing-django-on-an-ubuntu-linux-server/\">here</a>.", 
      "date_updated": "2010-05-04 12:07:01", 
      "demo": null, 
      "markup": "h", 
      "title": "Django on Ubuntu Linux 8", 
      "source_path": null, 
      "collection": 1, 
      "summary": "My friend Josh has told me numerous times that Django is much easier to work with on Linux.  Basically things are easier if you know how to do them.  Whether things are easier to learn or not on Linux compared to other OS's is debatable.  But, on this point anyway, it seems that Linux and Django really play well together.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:10:09", 
       
      "tags": "django linux python ubuntu"
    }
  }, 
  {
    "pk": 123, 
    "model": "blog.article", 
    "fields": {
      "body": "The amount of content on the blog and its pages has become substantial (in length only) enough to make it a worthwhile idea to paginate it (spread the content over multiple pages).  Django makes it very easy!  There are some nice objects available for paginating.\r\n\r\nFirst, query your objects, and put them into a Paginator object that gives you some paginatory functions. (How many times do you think I can use a form of paginate on this page?).  I query mine, then use a util function to put them into a paginator:\r\n\r\n<code class=\"python\">\r\n# in view.py\r\nfrom aprilandjake.blog import util\r\n\r\ndef home(request):\r\n\tentries = util.paginate(request, Entry.objects.filter(active=True).order_by(\"-date_created\"))\r\n\t# ...\r\n\r\n\r\n# in util.py\r\ndef paginate(request, obj_list, num_per_page=10):\r\n\tpaginator = Paginator(obj_list, num_per_page)\r\n\ttry:\r\n\t\tpage = int(request.GET.get('page', '1'))\r\n\texcept ValueError:\r\n\t\tpage = 1\r\n\ttry:\r\n\t\tobjects = paginator.page(page)\r\n\texcept (EmptyPage, InvalidPage):\r\n\t\tobjects = paginator.page(paginator.num_pages)\r\n\treturn objects\r\n</code>\r\n\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>You can pass your result set straight into the paginator.</li>\r\n<li>I've defaulted the results per page to 10.</li>\r\n<li>The first try/catch is to make sure that the page number is an integer.</li>\r\n<li>The second try/catch makes sure that the page number doesn't go out of range</li>\r\n</ul>\r\n\r\nYou'll have to change your iteration of your object in your template to look for the entry.object_list.  That is because your object is really a paginator object now.\r\n<code class=\"django\">\r\n{% for e in entries.object_list %}\r\n\t{{ e.stuff_to_print }}\t\r\n{% endfor %}\r\n</code>\r\n\r\nFinally, we have to put the paginator UI on the page.  Again, we can use the paginator object's very nice functions to help us here.  Because I want to reuse this pagination control and use it on many different objects, I'm going to make an inclusion tag for it:\r\n<code class=\"python\">\r\n# in my template tags file: blog/templatetags/aprilandjake_tags.py\r\nfrom django import template\r\nregister = template.Library()\r\n\r\ndef paginator(object):\r\n    return {'object': object}\r\nregister.inclusion_tag('includes/_paginator.html')(paginator)\r\n</code>\r\n\r\nTo use it, load the custom tag for your template, place it where you want your pagination controls to appear, and pass in your object collection:\r\n<code class=\"django\">\r\n{% load aprilandjake_tags %}\r\n<!-- ... -->\r\n{% paginator galleries %}\r\n</code>\r\n\r\nThe included html (_paginator.html) is thus:\r\n<code class=\"html\">\r\n{% if object.object_list %}\r\n\r\n<div class=\"pagination\">\r\n\t{% if object.has_previous %}\r\n\t\t<a href=\"?page={{ object.previous_page_number }}\" class=\"prev\">&laquo; Previous</a>\r\n\t{% endif %}\r\n\r\n\t<span class=\"current\">\r\n\t\tPage {{ object.number }} of {{ object.paginator.num_pages }}\r\n\t</span>\r\n\r\n\t{% if object.has_next %}\r\n\t\t<a href=\"?page={{ object.next_page_number }}\" class=\"next\">Next &raquo;</a>\r\n\t{% endif %}\r\n\r\n\t<div class=\"clr\"></div>\r\n</div>\r\n\r\n{% endif %}\r\n</code>\r\n\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>The check for object.object_list is just precautionary for if you have this inclusion tag included on a page that isn't actually using a paginated object.</li>\r\n</ul>\r\n\r\nTo me, it's amazing how awesome this pagination object is that is built into django.  With a few quick and easy changes, pagination is added with very little pain to us.  w00t!  Go, Django!", 
      "date_published": "2008-10-24 15:18:32", 
      "image_path": null, 
      "title_slug": "django-pagination", 
      "rendered_body": "The amount of content on the blog and its pages has become substantial (in length only) enough to make it a worthwhile idea to paginate it (spread the content over multiple pages).  Django makes it very easy!  There are some nice objects available for paginating.\r\n\r\nFirst, query your objects, and put them into a Paginator object that gives you some paginatory functions. (How many times do you think I can use a form of paginate on this page?).  I query mine, then use a util function to put them into a paginator:\r\n\r\n<code class=\"python\">\r\n# in view.py\r\nfrom aprilandjake.blog import util\r\n\r\ndef home(request):\r\n\tentries = util.paginate(request, Entry.objects.filter(active=True).order_by(\"-date_created\"))\r\n\t# ...\r\n\r\n\r\n# in util.py\r\ndef paginate(request, obj_list, num_per_page=10):\r\n\tpaginator = Paginator(obj_list, num_per_page)\r\n\ttry:\r\n\t\tpage = int(request.GET.get('page', '1'))\r\n\texcept ValueError:\r\n\t\tpage = 1\r\n\ttry:\r\n\t\tobjects = paginator.page(page)\r\n\texcept (EmptyPage, InvalidPage):\r\n\t\tobjects = paginator.page(paginator.num_pages)\r\n\treturn objects\r\n</code>\r\n\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>You can pass your result set straight into the paginator.</li>\r\n<li>I've defaulted the results per page to 10.</li>\r\n<li>The first try/catch is to make sure that the page number is an integer.</li>\r\n<li>The second try/catch makes sure that the page number doesn't go out of range</li>\r\n</ul>\r\n\r\nYou'll have to change your iteration of your object in your template to look for the entry.object_list.  That is because your object is really a paginator object now.\r\n<code class=\"django\">\r\n{% for e in entries.object_list %}\r\n\t{{ e.stuff_to_print }}\t\r\n{% endfor %}\r\n</code>\r\n\r\nFinally, we have to put the paginator UI on the page.  Again, we can use the paginator object's very nice functions to help us here.  Because I want to reuse this pagination control and use it on many different objects, I'm going to make an inclusion tag for it:\r\n<code class=\"python\">\r\n# in my template tags file: blog/templatetags/aprilandjake_tags.py\r\nfrom django import template\r\nregister = template.Library()\r\n\r\ndef paginator(object):\r\n    return {'object': object}\r\nregister.inclusion_tag('includes/_paginator.html')(paginator)\r\n</code>\r\n\r\nTo use it, load the custom tag for your template, place it where you want your pagination controls to appear, and pass in your object collection:\r\n<code class=\"django\">\r\n{% load aprilandjake_tags %}\r\n<!-- ... -->\r\n{% paginator galleries %}\r\n</code>\r\n\r\nThe included html (_paginator.html) is thus:\r\n<code class=\"html\">\r\n{% if object.object_list %}\r\n\r\n<div class=\"pagination\">\r\n\t{% if object.has_previous %}\r\n\t\t<a href=\"?page={{ object.previous_page_number }}\" class=\"prev\">&laquo; Previous</a>\r\n\t{% endif %}\r\n\r\n\t<span class=\"current\">\r\n\t\tPage {{ object.number }} of {{ object.paginator.num_pages }}\r\n\t</span>\r\n\r\n\t{% if object.has_next %}\r\n\t\t<a href=\"?page={{ object.next_page_number }}\" class=\"next\">Next &raquo;</a>\r\n\t{% endif %}\r\n\r\n\t<div class=\"clr\"></div>\r\n</div>\r\n\r\n{% endif %}\r\n</code>\r\n\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>The check for object.object_list is just precautionary for if you have this inclusion tag included on a page that isn't actually using a paginated object.</li>\r\n</ul>\r\n\r\nTo me, it's amazing how awesome this pagination object is that is built into django.  With a few quick and easy changes, pagination is added with very little pain to us.  w00t!  Go, Django!", 
      "date_updated": "2010-05-04 12:07:01", 
      "demo": null, 
      "markup": "h", 
      "title": "Django Pagination", 
      "source_path": null, 
      "collection": 1, 
      "summary": "The amount of content on the blog and its pages has become substantial (in length only) enough to make it a worthwhile idea to paginate it (spread the content over multiple pages).  Django makes it very easy!  There are some nice objects available for paginating.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:19:12", 
       
      "tags": "django python"
    }
  }, 
  {
    "pk": 118, 
    "model": "blog.article", 
    "fields": {
      "body": "For me, one of the major draws for Linux is the oh-so-awesome bash shell.  I also like the default pdf viewer for Ubuntu.  I always forget that this thing is called <a href=\"http://www.gnome.org/projects/evince/\">evince</a>.  It's a gnome project and is very nice.  Xpdf is also nice, but not preinstalled, but still pretty fast.  \r\n\r\nEvince supports viewing these file formats:\r\n- PDF\r\n- Postscript\r\n- djvu\r\n- tiff\r\n- dvi\r\n\r\nTo open your doc, type this in the shell of awesomeness:\r\n<code class=\"bash\">\r\nevince document.pdf &\r\n</code>\r\n\r\n", 
      "date_published": "2008-10-08 15:12:54", 
      "image_path": null, 
      "title_slug": "document-viewer-shell", 
      "rendered_body": "For me, one of the major draws for Linux is the oh-so-awesome bash shell.  I also like the default pdf viewer for Ubuntu.  I always forget that this thing is called <a href=\"http://www.gnome.org/projects/evince/\">evince</a>.  It's a gnome project and is very nice.  Xpdf is also nice, but not preinstalled, but still pretty fast.  \r\n\r\nEvince supports viewing these file formats:\r\n- PDF\r\n- Postscript\r\n- djvu\r\n- tiff\r\n- dvi\r\n\r\nTo open your doc, type this in the shell of awesomeness:\r\n<code class=\"bash\">\r\nevince document.pdf &\r\n</code>\r\n\r\n", 
      "date_updated": "2010-05-04 12:07:01", 
      "demo": null, 
      "markup": "h", 
      "title": "Document Viewer in the Shell", 
      "source_path": null, 
      "collection": 1, 
      "summary": "For me, one of the major draws for Linux is the oh-so-awesome bash shell.  I also like the default pdf viewer for Ubuntu.  I always forget that this thing is called evince.  ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:13:46", 
       
      "tags": "linux pdf ubuntu"
    }
  }, 
  {
    "pk": 100, 
    "model": "blog.article", 
    "fields": {
      "body": "A developer values his screen real estate.  I am no different.  With my latest install of Ubuntu 8.0.4 (Hardy Heron), after I got my basic development apps running, the first order of business was to get the monitors all up and humming.\r\n\r\nI'm on a Dell Latitude D820 with a Quadro NVS 110M video card.  I had to do two simple things to get my video card cooking with dualies:\r\n\r\n<code class=\"bash\">\r\n  sudo apt-get nvidia-glx-new\r\n</code>\r\n\r\nand then, \r\n\r\n<code class=\"bash\">\r\n   sudo apt-get nvidia-settings\r\n</code>\r\n\r\nBefore you change anything, back up your xorg.conf\r\n\r\n<code class=\"bash\">\r\n   cp /etc/X11/xorg.conf ~/\r\n</code>\r\n\r\nAfter that, it's relying on the sweeto display options given in the Nvidia X Server Settings under X Server Display Configuration.  Make sure both monitors are enabled then drag and drop to position monitors on the left or the right.  I'm also using the TwinView, allowing me to drag windows from screen to screen.  Separate X Servers was nice, but precluded this option.  Try to apply the options.  Most likely, all options won't be able to be saved, so Save to the X Configuration File, save, quit, logout, log back in, enjoy the nVidia splash screen and the pleasure that is Ubuntu.\r\n", 
      "date_published": "2008-10-11 14:49:46", 
      "image_path": null, 
      "title_slug": "dual-monitors-ubuntu-linux", 
      "rendered_body": "A developer values his screen real estate.  I am no different.  With my latest install of Ubuntu 8.0.4 (Hardy Heron), after I got my basic development apps running, the first order of business was to get the monitors all up and humming.\r\n\r\nI'm on a Dell Latitude D820 with a Quadro NVS 110M video card.  I had to do two simple things to get my video card cooking with dualies:\r\n\r\n<code class=\"bash\">\r\n  sudo apt-get nvidia-glx-new\r\n</code>\r\n\r\nand then, \r\n\r\n<code class=\"bash\">\r\n   sudo apt-get nvidia-settings\r\n</code>\r\n\r\nBefore you change anything, back up your xorg.conf\r\n\r\n<code class=\"bash\">\r\n   cp /etc/X11/xorg.conf ~/\r\n</code>\r\n\r\nAfter that, it's relying on the sweeto display options given in the Nvidia X Server Settings under X Server Display Configuration.  Make sure both monitors are enabled then drag and drop to position monitors on the left or the right.  I'm also using the TwinView, allowing me to drag windows from screen to screen.  Separate X Servers was nice, but precluded this option.  Try to apply the options.  Most likely, all options won't be able to be saved, so Save to the X Configuration File, save, quit, logout, log back in, enjoy the nVidia splash screen and the pleasure that is Ubuntu.\r\n", 
      "date_updated": "2010-05-04 12:07:01", 
      "demo": null, 
      "markup": "h", 
      "title": "Dual Monitors in Ubuntu Linux", 
      "source_path": null, 
      "collection": 1, 
      "summary": "A developer values his screen real estate.  I am no different.  With my latest install of Ubuntu 8.0.4 (Hardy Heron), after I got my basic development apps running, the first order of business was to get the monitors all up and humming.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 14:53:25", 
       
      "tags": "displays linux ubuntu"
    }
  }, 
  {
    "pk": 103, 
    "model": "blog.article", 
    "fields": {
      "body": "<img src=\"http://cache.eb.com/eb/image?id=85248&rendTypeId=4\" style=\"width:150px;float:right;margin:5px;\" />\r\n\r\nOur symptoms:<br />\r\n- Only the FBI warning would play.<br />\r\n- Some players would play the rest, but with about 1 frame per second playback.<br />\r\n- Many video players would lock up when we tried to play the DVD.<br />\r\n\r\nPlayers we tried:<br />\r\n- Totem (with xine and gstreamer backends)<br />\r\n- VLC player<br />\r\n- Kaffeine<br />\r\n- MPlayer<br />\r\n\r\nThings we tried:<br />\r\n- Downloading many a restricted codec package<br />\r\n- Enabling DMA on the DVD drive<br />\r\n- Can't remember; doesn't matter<br />\r\n\r\nFinal solution:<br />\r\n- Win32 codecs needed<br />\r\n- Reboot required<br />\r\n\r\nImportant note:<br />\r\n- To find the win32 codecs, make sure you look for w32codecs.  <br />\r\n\r\ni.e...\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install w32codecs\r\n</code>\r\n\r\nNow, I can watch Get Smart!\r\n\r\n<strong>Update for Jaunty Jackalope Ubuntu 9.04</strong>\r\n\r\nFor some reason, this required an extra step in Jaunty.  In fact, there's a whole section devoted to exposing the <a href=\"https://help.ubuntu.com/community/Medibuntu\">new repo for media-related libraries, called Medibuntu</a>.\r\n\r\nBasically, there are more steps to get to the w32codecs and the other libraries that you supposedly need:\r\n\r\n<code class=\"bash\">\r\nsudo wget http://www.medibuntu.org/sources.list.d/jaunty.list --output-document=/etc/apt/sources.list.d/medibuntu.list\r\nsudo apt-get update && sudo apt-get install medibuntu-keyring && sudo apt-get update\r\n</code>", 
      "date_published": "2008-11-17 14:55:23", 
      "image_path": null, 
      "title_slug": "dvd-playback-ubuntu-8-linux", 
      "rendered_body": "<img src=\"http://cache.eb.com/eb/image?id=85248&rendTypeId=4\" style=\"width:150px;float:right;margin:5px;\" />\r\n\r\nOur symptoms:<br />\r\n- Only the FBI warning would play.<br />\r\n- Some players would play the rest, but with about 1 frame per second playback.<br />\r\n- Many video players would lock up when we tried to play the DVD.<br />\r\n\r\nPlayers we tried:<br />\r\n- Totem (with xine and gstreamer backends)<br />\r\n- VLC player<br />\r\n- Kaffeine<br />\r\n- MPlayer<br />\r\n\r\nThings we tried:<br />\r\n- Downloading many a restricted codec package<br />\r\n- Enabling DMA on the DVD drive<br />\r\n- Can't remember; doesn't matter<br />\r\n\r\nFinal solution:<br />\r\n- Win32 codecs needed<br />\r\n- Reboot required<br />\r\n\r\nImportant note:<br />\r\n- To find the win32 codecs, make sure you look for w32codecs.  <br />\r\n\r\ni.e...\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install w32codecs\r\n</code>\r\n\r\nNow, I can watch Get Smart!\r\n\r\n<strong>Update for Jaunty Jackalope Ubuntu 9.04</strong>\r\n\r\nFor some reason, this required an extra step in Jaunty.  In fact, there's a whole section devoted to exposing the <a href=\"https://help.ubuntu.com/community/Medibuntu\">new repo for media-related libraries, called Medibuntu</a>.\r\n\r\nBasically, there are more steps to get to the w32codecs and the other libraries that you supposedly need:\r\n\r\n<code class=\"bash\">\r\nsudo wget http://www.medibuntu.org/sources.list.d/jaunty.list --output-document=/etc/apt/sources.list.d/medibuntu.list\r\nsudo apt-get update && sudo apt-get install medibuntu-keyring && sudo apt-get update\r\n</code>", 
      "date_updated": "2010-05-04 12:07:01", 
      "demo": null, 
      "markup": "h", 
      "title": "DVD Playback on Ubuntu 8 Linux", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I was having a really hard time getting DVD to play on Hardy Heron, but finally got it.  After a daily ritual of attempts, finally, Ted and I struck gold!", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 14:56:42", 
       
      "tags": "dvd linux ubuntu video"
    }
  }, 
  {
    "pk": 387, 
    "model": "blog.article", 
    "fields": {
      "body": "LINQ is an awesome querying language that you can integrate right into your .NET code base.  I use it quite a bit to query collections of all types.  Querying the database is simple.\r\n\r\n<code class=\"java\">\r\nvar q = from e in _imsData.Emails\r\n   where e.Id.ToString() == messageId\r\n   select e;\r\n\r\nif (q.Count().Equals(0))\r\n   throw new Exception(\"Could not find Message by this id : \" + messageId);\r\n\r\nreturn q.First();\r\n</code>\r\n\r\nWhile developing these tests and running them against a TEST environment, we had no issues.  When we pointed our tests to run against our STAGE environment, tests started to fail left and right.  After some research, I realized the Oracle LINQ configuration was still pointed to the TEST database.\r\n\r\nIn Visual Studio, I had added a new item (Data item > Devart LinqConnect Model).  This template existed because I installed the Devart dotConnect tools.  This file contains 4 sub files (<name>.cs, <name>.Designer.cs, <name>.edps and <name>.lqml.view).\r\n\r\nIn the .Designer.cs file, the constructor loads the ConnectionString from the App.Config file (that was placed there automatically by creating the data model mappings).\r\n\r\n<code class=\"java\">\r\n[System.Data.Linq.Mapping.DatabaseAttribute(Name = \"IMS\")]\r\n[ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]\r\npublic partial class ImsDataContext : Devart.Data.Linq.DataContext\r\n{\r\n    private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();\r\n    public static Devart.Data.Linq.CompiledQueryCache compiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(typeof(ImsDataContext));\r\n\r\n        \r\n    public ImsDataContext() :\r\n    base(GetConnectionString(\"MyConnectionString\"), mappingSource)\r\n    {\r\n        OnCreated();\r\n    }\r\n</code>\r\n\r\nNotice how the class is partial.  This is where you can hijack the constructor implementation and not load the default connection string.\r\n\r\nFirst:\r\n\r\nYou should have another class file (<name>.cs) that is the other partial class.  My example is ImsDataContext.  \r\n\r\n<code class=\"java\">\r\nnamespace ImsContext\r\n{\r\n    partial class ImsDataContext\r\n    {\r\n\r\n        // Place your implementation of partial extension methods here\r\n    }\r\n}\r\n</code>\r\n\r\nCreate a new class called ImsDataContextMaster that extends to that partial class.\r\n\r\n<code class=\"java\">\r\nnamespace ImsContext\r\n{\r\n    public class ImsDataContextMaster : ImsDataContext\r\n    {\r\n        private static readonly LinqConnection _connectionInfo = new LinqConnection();\r\n\r\n        public ImsDataContextMaster()\r\n            : base(_connectionInfo.ConnectionString)\r\n        {\r\n        }\r\n    }\r\n}\r\n</code>\r\n\r\nSecond:\r\n\r\nCreate another class called LinqConnection.  You will see it is instantiated automatically in the ImsDataContextMaster class.  This is where the magic is.\r\n\r\n<code class=\"java\">\r\npublic class LinqConnection\r\n    {\r\n        public string ConnectionString { get; set; }\r\n\r\n        public LinqConnection()\r\n        {\r\n            //Somehow get which environment you are pointing to.\r\n            string currentEnv = EnvironmentUnderTest.GetEnvironment().Id;\r\n\r\n            if (currentEnv.Equals(\"TEST\"))\r\n            {\r\n                ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings[\"MyConnectionString\"];\r\n                ConnectionString = connectionStringSettings.ConnectionString;\r\n            }\r\n            else if (currentEnv.Equals(\"STAGE\"))\r\n            {\r\n                ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings[\"MyConnectionStageString\"];\r\n                ConnectionString = connectionStringSettings.ConnectionString;\r\n            }\r\n            else if (currentEnv.Equals(\"LOCAL\"))\r\n            {\r\n                ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings[\"MyConnectionLocalString\"];\r\n                ConnectionString = connectionStringSettings.ConnectionString;\r\n            }\r\n            else\r\n            {\r\n                throw new Exception(\"Could not determine which Environment to use with LINQ.\");\r\n            }\r\n        }\r\n    }\r\n</code>\r\n\r\nWhen this code is called:\r\n\r\n<code class=\"java\">ImsDataContextMaster _imsData = new ImsDataContextMaster();</code>\r\n\r\nThe class will first set up the LinqConnection object, which determines which connection string to use.  Then it sets that value in the constructor's base call.  (_connectionInfo.ConnectionString)\r\n\r\nThus, giving you the ability to dynamically select which database instance you want to point to.\r\n", 
      "date_published": "2011-06-21 10:45:25", 
      "image_path": "", 
      "title_slug": "dynamic-linq-database-selection-oracle-net", 
      "rendered_body": "LINQ is an awesome querying language that you can integrate right into your .NET code base.  I use it quite a bit to query collections of all types.  Querying the database is simple.\r\n\r\n<code class=\"java\">\r\nvar q = from e in _imsData.Emails\r\n   where e.Id.ToString() == messageId\r\n   select e;\r\n\r\nif (q.Count().Equals(0))\r\n   throw new Exception(\"Could not find Message by this id : \" + messageId);\r\n\r\nreturn q.First();\r\n</code>\r\n\r\nWhile developing these tests and running them against a TEST environment, we had no issues.  When we pointed our tests to run against our STAGE environment, tests started to fail left and right.  After some research, I realized the Oracle LINQ configuration was still pointed to the TEST database.\r\n\r\nIn Visual Studio, I had added a new item (Data item > Devart LinqConnect Model).  This template existed because I installed the Devart dotConnect tools.  This file contains 4 sub files (<name>.cs, <name>.Designer.cs, <name>.edps and <name>.lqml.view).\r\n\r\nIn the .Designer.cs file, the constructor loads the ConnectionString from the App.Config file (that was placed there automatically by creating the data model mappings).\r\n\r\n<code class=\"java\">\r\n[System.Data.Linq.Mapping.DatabaseAttribute(Name = \"IMS\")]\r\n[ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]\r\npublic partial class ImsDataContext : Devart.Data.Linq.DataContext\r\n{\r\n    private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();\r\n    public static Devart.Data.Linq.CompiledQueryCache compiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(typeof(ImsDataContext));\r\n\r\n        \r\n    public ImsDataContext() :\r\n    base(GetConnectionString(\"MyConnectionString\"), mappingSource)\r\n    {\r\n        OnCreated();\r\n    }\r\n</code>\r\n\r\nNotice how the class is partial.  This is where you can hijack the constructor implementation and not load the default connection string.\r\n\r\nFirst:\r\n\r\nYou should have another class file (<name>.cs) that is the other partial class.  My example is ImsDataContext.  \r\n\r\n<code class=\"java\">\r\nnamespace ImsContext\r\n{\r\n    partial class ImsDataContext\r\n    {\r\n\r\n        // Place your implementation of partial extension methods here\r\n    }\r\n}\r\n</code>\r\n\r\nCreate a new class called ImsDataContextMaster that extends to that partial class.\r\n\r\n<code class=\"java\">\r\nnamespace ImsContext\r\n{\r\n    public class ImsDataContextMaster : ImsDataContext\r\n    {\r\n        private static readonly LinqConnection _connectionInfo = new LinqConnection();\r\n\r\n        public ImsDataContextMaster()\r\n            : base(_connectionInfo.ConnectionString)\r\n        {\r\n        }\r\n    }\r\n}\r\n</code>\r\n\r\nSecond:\r\n\r\nCreate another class called LinqConnection.  You will see it is instantiated automatically in the ImsDataContextMaster class.  This is where the magic is.\r\n\r\n<code class=\"java\">\r\npublic class LinqConnection\r\n    {\r\n        public string ConnectionString { get; set; }\r\n\r\n        public LinqConnection()\r\n        {\r\n            //Somehow get which environment you are pointing to.\r\n            string currentEnv = EnvironmentUnderTest.GetEnvironment().Id;\r\n\r\n            if (currentEnv.Equals(\"TEST\"))\r\n            {\r\n                ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings[\"MyConnectionString\"];\r\n                ConnectionString = connectionStringSettings.ConnectionString;\r\n            }\r\n            else if (currentEnv.Equals(\"STAGE\"))\r\n            {\r\n                ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings[\"MyConnectionStageString\"];\r\n                ConnectionString = connectionStringSettings.ConnectionString;\r\n            }\r\n            else if (currentEnv.Equals(\"LOCAL\"))\r\n            {\r\n                ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings[\"MyConnectionLocalString\"];\r\n                ConnectionString = connectionStringSettings.ConnectionString;\r\n            }\r\n            else\r\n            {\r\n                throw new Exception(\"Could not determine which Environment to use with LINQ.\");\r\n            }\r\n        }\r\n    }\r\n</code>\r\n\r\nWhen this code is called:\r\n\r\n<code class=\"java\">ImsDataContextMaster _imsData = new ImsDataContextMaster();</code>\r\n\r\nThe class will first set up the LinqConnection object, which determines which connection string to use.  Then it sets that value in the constructor's base call.  (_connectionInfo.ConnectionString)\r\n\r\nThus, giving you the ability to dynamically select which database instance you want to point to.\r\n", 
      "date_updated": "2011-07-06 14:05:16", 
      "demo": "", 
      "markup": "h", 
      "title": "Dynamic LINQ Database Selection for Oracle .NET", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Using an Oracle database backend in conjunction with LINQ required use of a 3rd party tool called DevArt dotConnect for Oracle.  However, when the database model is configured, it's hard coded to a specific database instance (Dev, Test, etc).  I wanted to dynamically select which database instance to run against relative to the lane my tests were running against.  It's actually easier than I thought.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2011-06-21 10:55:16", 
       
      "tags": ".net csharp linq oracle"
    }
  }, 
  {
    "pk": 340, 
    "model": "blog.article", 
    "fields": {
      "body": "If you are building the code from scratch, it's relatively easy to maintain those comments as you go.  However, when you haven't done it in the past - or are given a suite of products to maintain and it was never done, it could be pretty tedious.\r\n\r\nSay I have a method:\r\n\r\n<code class=\"java\">\r\npublic static void switchRoleToAdmin()\r\n{\r\n   //Code to switch role to admin\r\n}\r\n</code>\r\n\r\nAdding a comment to this one is pretty easy.  There are no parameters, no return objects, etc.  It would look something like this:\r\n\r\n<code class=\"java\">\r\n/// <summary>\r\n/// Switches the role to admin.\r\n/// </summary>\r\npublic static void switchRoleToAdmin()\r\n{\r\n   //Code to switch role to admin\r\n}\r\n</code>\r\n\r\nNot bad.  However, it can get pretty scary when there are several parameters and a return value.\r\n\r\nExample:\r\n<code class=\"java\">\r\npublic static string addPayment(Enum payeeType, string payeeName, decimal amount, string currency, string notes, string commentsToPayee, string description, string invoiceNumber, DateTime? invoiceDate, DateTime? scheduledPayDate)\r\n{\r\n   //code to add payment.  In this case, it returns a payment number.\r\n}\r\n</code>\r\n\r\nAdding code to this method is pretty tedious and to add value to the method would really take some time.  Well, in doing this exercise I found a tool called GhostDoc. (http://submain.com/products/ghostdoc.aspx) I am sure there are many out there, but it integrates nice with Visual Studio and it seems to work fine.\r\n\r\nOn this method, I just right click on the method declaration and select \"Document this\" from the context menu.  Within an instant, I get this output:\r\n\r\n<code class=\"java\">\r\n        /// <summary>\r\n        /// Adds the payment.\r\n        /// </summary>\r\n        /// <param name=\"payeeType\">Type of the payee.</param>\r\n        /// <param name=\"payeeName\">Name of the payee.</param>\r\n        /// <param name=\"amount\">The amount.</param>\r\n        /// <param name=\"currency\">The currency.</param>\r\n        /// <param name=\"notes\">The notes.</param>\r\n        /// <param name=\"commentsToPayee\">The comments to payee.</param>\r\n        /// <param name=\"description\">The description.</param>\r\n        /// <param name=\"invoiceNumber\">The invoice number.</param>\r\n        /// <param name=\"invoiceDate\">The invoice date.</param>\r\n        /// <param name=\"scheduledPayDate\">The scheduled pay date.</param>\r\n        /// <returns></returns>\r\n        public static string addPayment(Enum payeeType, string payeeName, decimal amount, string currency, string notes, string commentsToPayee, string description, string invoiceNumber, DateTime? invoiceDate, DateTime? scheduledPayDate)\r\n        {\r\n            //code to add payment.  In this case, it returns a payment number.\r\n        }\r\n</code>\r\n\r\nObviously, there isn't too much additional detail to gather from this, but it sure saved me a ton of time writing all of that.  Some tools will create the xml structure, but you still have to enter the details of each parameter.  Now, I can add additional detail to the summary, or maybe add specifics to the returns node.  Either way, it's easy to add those and saves me a ton of time.", 
      "date_published": "2010-09-21 13:13:25", 
      "image_path": "", 
      "title_slug": "easy-burdening-commenting-your-code", 
      "rendered_body": "If you are building the code from scratch, it's relatively easy to maintain those comments as you go.  However, when you haven't done it in the past - or are given a suite of products to maintain and it was never done, it could be pretty tedious.\r\n\r\nSay I have a method:\r\n\r\n<code class=\"java\">\r\npublic static void switchRoleToAdmin()\r\n{\r\n   //Code to switch role to admin\r\n}\r\n</code>\r\n\r\nAdding a comment to this one is pretty easy.  There are no parameters, no return objects, etc.  It would look something like this:\r\n\r\n<code class=\"java\">\r\n/// <summary>\r\n/// Switches the role to admin.\r\n/// </summary>\r\npublic static void switchRoleToAdmin()\r\n{\r\n   //Code to switch role to admin\r\n}\r\n</code>\r\n\r\nNot bad.  However, it can get pretty scary when there are several parameters and a return value.\r\n\r\nExample:\r\n<code class=\"java\">\r\npublic static string addPayment(Enum payeeType, string payeeName, decimal amount, string currency, string notes, string commentsToPayee, string description, string invoiceNumber, DateTime? invoiceDate, DateTime? scheduledPayDate)\r\n{\r\n   //code to add payment.  In this case, it returns a payment number.\r\n}\r\n</code>\r\n\r\nAdding code to this method is pretty tedious and to add value to the method would really take some time.  Well, in doing this exercise I found a tool called GhostDoc. (http://submain.com/products/ghostdoc.aspx) I am sure there are many out there, but it integrates nice with Visual Studio and it seems to work fine.\r\n\r\nOn this method, I just right click on the method declaration and select \"Document this\" from the context menu.  Within an instant, I get this output:\r\n\r\n<code class=\"java\">\r\n        /// <summary>\r\n        /// Adds the payment.\r\n        /// </summary>\r\n        /// <param name=\"payeeType\">Type of the payee.</param>\r\n        /// <param name=\"payeeName\">Name of the payee.</param>\r\n        /// <param name=\"amount\">The amount.</param>\r\n        /// <param name=\"currency\">The currency.</param>\r\n        /// <param name=\"notes\">The notes.</param>\r\n        /// <param name=\"commentsToPayee\">The comments to payee.</param>\r\n        /// <param name=\"description\">The description.</param>\r\n        /// <param name=\"invoiceNumber\">The invoice number.</param>\r\n        /// <param name=\"invoiceDate\">The invoice date.</param>\r\n        /// <param name=\"scheduledPayDate\">The scheduled pay date.</param>\r\n        /// <returns></returns>\r\n        public static string addPayment(Enum payeeType, string payeeName, decimal amount, string currency, string notes, string commentsToPayee, string description, string invoiceNumber, DateTime? invoiceDate, DateTime? scheduledPayDate)\r\n        {\r\n            //code to add payment.  In this case, it returns a payment number.\r\n        }\r\n</code>\r\n\r\nObviously, there isn't too much additional detail to gather from this, but it sure saved me a ton of time writing all of that.  Some tools will create the xml structure, but you still have to enter the details of each parameter.  Now, I can add additional detail to the summary, or maybe add specifics to the returns node.  Either way, it's easy to add those and saves me a ton of time.", 
      "date_updated": "2011-08-17 11:10:09", 
      "demo": "", 
      "markup": "h", 
      "title": "Ease the burden of commenting your code", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Usually when you mention \"adding comments to your code\" or \"make sure you document it\", it gets pretty ugly and the security guards are called in to restore order.  Okay, maybe not that intense but you would have to agree that it's not a fun task.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-09-21 13:25:31", 
       
      "tags": "csharp savetime xmlcomments"
    }
  }, 
  {
    "pk": 227, 
    "model": "blog.article", 
    "fields": {
      "body": "<h3>Argument Matcher</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\n<code class=\"java\">\r\njava.lang.IllegalStateException: 2 matchers expected, 1 recorded.\r\n\tat org.easymock.internal.ExpectedInvocation.createMissingMatchers(ExpectedInvocation.java:41)\r\n\tat org.easymock.internal.ExpectedInvocation.(ExpectedInvocation.java:33)\r\n\tat org.easymock.internal.ExpectedInvocation.(ExpectedInvocation.java:26)\r\n\tat org.easymock.internal.RecordState.invoke(RecordState.java:64)\r\n\tat org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:24)\r\n\tat org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:45)\r\n\tat $Proxy0.findFoos(Unknown Source)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n    ...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nSometimes you don't know the exact instance of the objects that will be passed as arguments into methods on external dependencies.  Thus, the mocked call on that method will be different than normal.  EasyMock provides a method, EasyMock.isA().  From the JavaDoc, this method \"Expects an object implementing the given class.\"  Essentially, it looks for type (class) instead of instance (object) when setting up the EasyMock.expect().  This is useful when you don't have the actual instance of a method parameter from the context of your test, like a local variable.\r\n\r\nSo, if I was testing a method like this:\r\n<code class=\"java\">\r\npublic class BeingTested {\r\n   void doSomething(Integer code) {\r\n      StringBuilder sb = new StringBuilder()\r\n      externalService.serviceCall(sb, code);\r\n   }\r\n}\r\n\r\ninterface ExternalService {\r\n   void serviceCall(StringBuilder sb, Integer code);\r\n}\r\n</code>\r\n\r\nAnd tried to test it like this:\r\n<code class=\"java\">\r\n@Test\r\npublic void testDoSomething() {\r\n   /* ... */\r\n   externalService.serviceCall(isA(StringBuilder.class), 123);\r\n   expectLastCall();\r\n   /* ... */\r\n   tested.doSomething(123);\r\n   /* ... */\r\n}\r\n</code>\r\n\r\nI will inevitably get the above exception.\r\n\r\n<h4>Explanation</h4>\r\n\r\nSo, now to get rid of this nasty exception.  Use of isA() either implies that you really don't care what the exact instance of the method parameter is or you use it to get around another constraint on your code.  Either way, EasyMock, through this wonderful exception, is trying to tell you that <strong>if you're going to use isA() for one of the method parameters, it must be used on all!</strong>  Thus, to keep your StringBuilder isA() call, you must add one for Integer in this example.\r\n\r\n<code class=\"java\">\r\nexternalService.serviceCall(isA(StringBuilder.class), isA(Integer.class));\r\n</code>  \r\n\r\n\r\n<h3>Behavior Definition</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\n<code class=\"java\">\r\njava.lang.IllegalStateException: missing behavior definition for the preceeding method call getIsInitialized()\r\n\tat org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:30)\r\n\tat org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:61)\r\n...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nIf I was testing a method like this:\r\n<code class=\"java\">\r\npublic class SomethingElse {\r\n   void doSomething() {\r\n      externalService.checkSomething();\r\n   }\r\n}\r\n\r\ninterface ExternalService {\r\n   int checkSomething();\r\n}\r\n</code>\r\n\r\nAnd tried to test it like this:\r\n<code class=\"java\">\r\n@Test\r\npublic void testDoSomething() {\r\n   /* ... */\r\n   expect(externalService.checkSomething());\r\n   /* ... */\r\n   tested.doSomething();\r\n   /* ... */\r\n}\r\n</code>\r\n\r\nI just may get the above exception.\r\n\r\n<h4>Explanation</h4>\r\n\r\nThe issue is that you've only half-told EasyMock what you expect to happen.  Because the checkSomething() method has a return type other than void, when need to explicitly tell EasyMock what to expect as the return value.  That is done by using the andReturn() method.\r\n\r\n<code class=\"java\">\r\nexpect(externalService.checkSomething()).andReturn(0);\r\n</code>  \r\n\r\n<a name=\"mocksusemocks\"></a>\r\n<h3>Mock methods use Mocks</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\nHere's an exception that may very well be thrown in many instances by EasyMock.  It might not be very helpful there; it certainly wasn't here.\r\n\r\n<code class=\"java\">\r\norg.easymock.internal.RuntimeExceptionWrapper\r\n\tat org.easymock.classextension.internal.ClassExtensionHelper.getControl(ClassExtensionHelper.java:52)\r\n\tat org.easymock.classextension.EasyMock.replay(EasyMock.java:117)\r\n...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nWhen you're using EasyMock, there are several steps that you need to take in setting up your mock scenario.  And we all know that the more steps a process takes, the more prone it is to error.  Well, as the user of the EasyMock API, I make errors all the time.  For instance, as I'm evolving my test, deciding that some objects will be mocked one moment and not mocked the next, the test changes but sometimes I forget to adjust the multi-step EasyMock setup process at every step.  For instance, I had a test:\r\n\r\n<code class=\"java\">\r\n@Test\r\npublic void testSomething() {\r\n   Something something = createMock(Something.class);\r\n   Else else = createMock(Else.class);\r\n   /* ... expects ... */\r\n   replay(something, else);\r\n   /* ... */\r\n   verify(something, else);   \r\n}\r\n</code>\r\n\r\nAnd I refactor it to be:\r\n\r\n<code class=\"java\">\r\n@Test\r\npublic void testSomething() {\r\n   Something something = createMock(Something.class);\r\n   Else else = new Else();\r\n   /* ... expects ... */\r\n   replay(something, else);\r\n   /* ... */\r\n   verify(something, else);   \r\n}\r\n</code>\r\n\r\n<h4>Explanation</h4>\r\n\r\nI changed the Else class to not be a mock object for the test.  But, I forgot to remove the reference to else from the replay() and verify() methods  (statically imported EasyMock methods).  So, this RuntimeExceptionWrapper exception makes no sense, but I have had it thrown many times for this reason.  To fix it, remove the non-mocks from the mock-related methods.\r\n\r\n<code class=\"java\">\r\n@Test\r\npublic void testSomething() {\r\n   Something something = createMock(Something.class);\r\n   Else else = new Else();\r\n   /* ... expects ... */\r\n   replay(something);\r\n   /* ... */\r\n   verify(something);   \r\n}\r\n</code>\r\n\r\n\r\n<h3>Last Call for Mocks</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\nAgain, I believe I may have seen this exception in more than one type of situation.  This is just one.\r\n\r\n<code class=\"java\">\r\njava.lang.IllegalStateException: no last call on a mock available\r\n\tat org.easymock.EasyMock.getControlForLastCall(EasyMock.java:174)\r\n\tat org.easymock.EasyMock.expectLastCall(EasyMock.java:167)\r\n\t...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nI use IntelliJ IDEA, which I love for many reasons.  One of them is it's robust refactoring toolset.  For instance, Ctrl-Alt-V, by default, is the introduce variable shortcut.  So, you select the expression that returns some value, introduce variable, and voila, that return value is stored in a nice local variable for you (or there are other options to refactor into fields, constants, parameters, and such.  End shameless plug.  Anywho, EasyMock scenarios value ordering of method calls.  This can become problematic if you're not careful to maintain its delicate order needs (which a refactoring tool, for instance, knows nothing about).\r\n\r\nIf I start with this as a part of a test:\r\n\r\n<code class=\"java\">\r\nsomeObj.doSomething();\r\nexpectLastCall().andThrow(new Exception());\r\n</code>\r\n\r\nAnd then somehow came to this, let's assume for the sake of a refactor:\r\n\r\n<code class=\"java\">\r\nsomeObj.doSomething();\r\nException e = new Exception();\r\nexpectLastCall().andThrow(e);\r\n</code>\r\n\r\nYou will get the above exception.\r\n\r\n<h4>Explanation</h4>\r\n\r\nSimply, the problem is that something has been interjected in between the method call and the expect.  Because these things are syntatically separate with the void return type methods, this becomes a possible pitfall.  To fix, put the two together, keep the ordering correct.\r\n\r\n<code class=\"java\">\r\nException e = new Exception();\r\nsomeObj.doSomething();\r\nexpectLastCall().andThrow(e);\r\n</code>\r\n\r\n\r\n<h3>Throws like a girl</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\n<code class=\"java\">\r\njava.lang.IllegalArgumentException: last method called on mock cannot throw com.lowagie.text.DocumentException\r\n\tat org.easymock.internal.MocksControl.andThrow(MocksControl.java:137)\r\n   ...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nWhen I'm trying to test the catch blocks in my code, often times I will simulate an exception being thrown with the mock andThrow() method.  If I start with a class like this:\r\n\r\n<code class=\"java\">\r\npublic class Something {\r\n   void doSomething() {\r\n      try {\r\n         externalService.callService();\r\n      } catch (Exception e) { \r\n         // log \r\n      }\r\n   }\r\n}\r\n\r\ninterface ExternalService {\r\n   void callService();\r\n}\r\n</code>\r\n\r\nAnd do a test like this:\r\n\r\n<code class=\"java\">\r\n@Test\r\npublic void testDoSomething() {\r\n   /* ... */\r\n   externalService.callService();\r\n   expectLastCall().andThrow(new Exception());\r\n   /* ... */\r\n}\r\n</code>\r\n\r\nYou are likely to get the above problematic exception.\r\n\r\n<h4>Explanation</h4>\r\n\r\nSure you catch the exception; sure you want to check your catch block logic (lame here); but andThrow() needs to know that it's doing the right thing.  Expectations in mocks are really quite flexible and allow us to make the code do things it might not otherwise do through simulated conditions in a test.  But, EasyMock will not do the impossible.  And in this case, it knows that if you're expecting a checked exception to be thrown, it must be declared as thrown, which it is not.  So, to fix this, your code must actually declare that it throws Exception.  Of course, only do this if it makes sense.  And, if it doesn't, why are you testing it anyway?\r\n\r\nFor interface and implementing class:\r\n\r\n<code class=\"java\">\r\nvoid callService() throws Exception;\r\n</code>\r\n\r\n\r\n<h3>Half-Mocked Expectations</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\nThis exception is very similar to that mentioned in the \"<a href=\"#mocksusemocks\">Mock methods use Mocks</a>\" section above.\r\n\r\n<code class=\"java\">\r\njava.lang.IllegalStateException: void method cannot return a value\r\n\tat org.easymock.internal.MocksControl.andReturn(MocksControl.java:128)\r\n   ...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nIt is convenient and more unit-like to test one method in a class that calls other methods in that class but not test the other method at that point.  Thus, we half-mock the class, mocking the \"external\" methods, the ones not being tested in this particular test, but not mocking the method being tested.  Did I mention how useful this is?  Let's try it.\r\n\r\nStart with this code:\r\n\r\n<code class=\"java\">\r\npublic class TestMe {\r\n   void doTestNow() {\r\n      /* ... */\r\n      doTestLater();\r\n   }\r\n}\r\n</code>\r\n\r\nAnd this test:\r\n\r\n<code class=\"java\">\r\n@Test\r\npublic void testDoTestNow() throws NoSuchMethodException {\r\n   Method doTestLater = TestMe.class.getDeclaredMethod(\"doTestLater\");\r\n   TestMe me = createMock(TestMe.class, doTestLater);\r\n   /* ... */ \r\n   me.doTestLater();\r\n   expectLastCall();\r\n   replay(me);\r\n   me.doTestNow();\r\n   verify(me);\r\n}\r\n</code>\r\n\r\nWhen we instantiate TestMe, it looks like a mock, but when we pass in var-arg java.lang.reflect.Method parameters, only those specified methods are mocked.  This works, is cool, and allows the doTestNow() method to be tested independent of the doTestLater() method and its test.  Now, let us pretend that we change our test to not want to mock calls to methods on TestMe, and instead of doing this:\r\n\r\n<code class=\"java\">\r\nTestMe me = createMock(TestMe.class, doTestLater);\r\n</code>\r\n\r\nWe do this:\r\n\r\n<code class=\"java\">\r\nTestMe me = new TestMe();\r\n</code>\r\n\r\nWe will get the icky exception shown above.\r\n\r\n<h4>Explanation</h4>\r\n\r\nThe first thing we tried to do worked, but the reason we got the exception that we're decrypting is because we made the refactor to the test, making the TestMe instance totally non-mocked, but we left the expectLastCall() on the me.doTestLater() call.  Simply remove that expectation and you're good to go again.  Just remember, now you're actually calling into the body of doTestLater().\r\n\r\n\r\nWell, that's it for this current round into the EasyMock foray.  But, I'm sure to continue to make mistakes using this helpful, yet often-problematic tool that is EasyMock.  If you have any cause-effect mappings related EasyMock that might help, let us know.", 
      "date_published": "2009-07-06 10:36:54", 
      "image_path": "", 
      "title_slug": "easymock-cause-effect-exception-mapping", 
      "rendered_body": "<h3>Argument Matcher</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\n<code class=\"java\">\r\njava.lang.IllegalStateException: 2 matchers expected, 1 recorded.\r\n\tat org.easymock.internal.ExpectedInvocation.createMissingMatchers(ExpectedInvocation.java:41)\r\n\tat org.easymock.internal.ExpectedInvocation.(ExpectedInvocation.java:33)\r\n\tat org.easymock.internal.ExpectedInvocation.(ExpectedInvocation.java:26)\r\n\tat org.easymock.internal.RecordState.invoke(RecordState.java:64)\r\n\tat org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:24)\r\n\tat org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:45)\r\n\tat $Proxy0.findFoos(Unknown Source)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n    ...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nSometimes you don't know the exact instance of the objects that will be passed as arguments into methods on external dependencies.  Thus, the mocked call on that method will be different than normal.  EasyMock provides a method, EasyMock.isA().  From the JavaDoc, this method \"Expects an object implementing the given class.\"  Essentially, it looks for type (class) instead of instance (object) when setting up the EasyMock.expect().  This is useful when you don't have the actual instance of a method parameter from the context of your test, like a local variable.\r\n\r\nSo, if I was testing a method like this:\r\n<code class=\"java\">\r\npublic class BeingTested {\r\n   void doSomething(Integer code) {\r\n      StringBuilder sb = new StringBuilder()\r\n      externalService.serviceCall(sb, code);\r\n   }\r\n}\r\n\r\ninterface ExternalService {\r\n   void serviceCall(StringBuilder sb, Integer code);\r\n}\r\n</code>\r\n\r\nAnd tried to test it like this:\r\n<code class=\"java\">\r\n@Test\r\npublic void testDoSomething() {\r\n   /* ... */\r\n   externalService.serviceCall(isA(StringBuilder.class), 123);\r\n   expectLastCall();\r\n   /* ... */\r\n   tested.doSomething(123);\r\n   /* ... */\r\n}\r\n</code>\r\n\r\nI will inevitably get the above exception.\r\n\r\n<h4>Explanation</h4>\r\n\r\nSo, now to get rid of this nasty exception.  Use of isA() either implies that you really don't care what the exact instance of the method parameter is or you use it to get around another constraint on your code.  Either way, EasyMock, through this wonderful exception, is trying to tell you that <strong>if you're going to use isA() for one of the method parameters, it must be used on all!</strong>  Thus, to keep your StringBuilder isA() call, you must add one for Integer in this example.\r\n\r\n<code class=\"java\">\r\nexternalService.serviceCall(isA(StringBuilder.class), isA(Integer.class));\r\n</code>  \r\n\r\n\r\n<h3>Behavior Definition</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\n<code class=\"java\">\r\njava.lang.IllegalStateException: missing behavior definition for the preceeding method call getIsInitialized()\r\n\tat org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:30)\r\n\tat org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:61)\r\n...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nIf I was testing a method like this:\r\n<code class=\"java\">\r\npublic class SomethingElse {\r\n   void doSomething() {\r\n      externalService.checkSomething();\r\n   }\r\n}\r\n\r\ninterface ExternalService {\r\n   int checkSomething();\r\n}\r\n</code>\r\n\r\nAnd tried to test it like this:\r\n<code class=\"java\">\r\n@Test\r\npublic void testDoSomething() {\r\n   /* ... */\r\n   expect(externalService.checkSomething());\r\n   /* ... */\r\n   tested.doSomething();\r\n   /* ... */\r\n}\r\n</code>\r\n\r\nI just may get the above exception.\r\n\r\n<h4>Explanation</h4>\r\n\r\nThe issue is that you've only half-told EasyMock what you expect to happen.  Because the checkSomething() method has a return type other than void, when need to explicitly tell EasyMock what to expect as the return value.  That is done by using the andReturn() method.\r\n\r\n<code class=\"java\">\r\nexpect(externalService.checkSomething()).andReturn(0);\r\n</code>  \r\n\r\n<a name=\"mocksusemocks\"></a>\r\n<h3>Mock methods use Mocks</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\nHere's an exception that may very well be thrown in many instances by EasyMock.  It might not be very helpful there; it certainly wasn't here.\r\n\r\n<code class=\"java\">\r\norg.easymock.internal.RuntimeExceptionWrapper\r\n\tat org.easymock.classextension.internal.ClassExtensionHelper.getControl(ClassExtensionHelper.java:52)\r\n\tat org.easymock.classextension.EasyMock.replay(EasyMock.java:117)\r\n...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nWhen you're using EasyMock, there are several steps that you need to take in setting up your mock scenario.  And we all know that the more steps a process takes, the more prone it is to error.  Well, as the user of the EasyMock API, I make errors all the time.  For instance, as I'm evolving my test, deciding that some objects will be mocked one moment and not mocked the next, the test changes but sometimes I forget to adjust the multi-step EasyMock setup process at every step.  For instance, I had a test:\r\n\r\n<code class=\"java\">\r\n@Test\r\npublic void testSomething() {\r\n   Something something = createMock(Something.class);\r\n   Else else = createMock(Else.class);\r\n   /* ... expects ... */\r\n   replay(something, else);\r\n   /* ... */\r\n   verify(something, else);   \r\n}\r\n</code>\r\n\r\nAnd I refactor it to be:\r\n\r\n<code class=\"java\">\r\n@Test\r\npublic void testSomething() {\r\n   Something something = createMock(Something.class);\r\n   Else else = new Else();\r\n   /* ... expects ... */\r\n   replay(something, else);\r\n   /* ... */\r\n   verify(something, else);   \r\n}\r\n</code>\r\n\r\n<h4>Explanation</h4>\r\n\r\nI changed the Else class to not be a mock object for the test.  But, I forgot to remove the reference to else from the replay() and verify() methods  (statically imported EasyMock methods).  So, this RuntimeExceptionWrapper exception makes no sense, but I have had it thrown many times for this reason.  To fix it, remove the non-mocks from the mock-related methods.\r\n\r\n<code class=\"java\">\r\n@Test\r\npublic void testSomething() {\r\n   Something something = createMock(Something.class);\r\n   Else else = new Else();\r\n   /* ... expects ... */\r\n   replay(something);\r\n   /* ... */\r\n   verify(something);   \r\n}\r\n</code>\r\n\r\n\r\n<h3>Last Call for Mocks</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\nAgain, I believe I may have seen this exception in more than one type of situation.  This is just one.\r\n\r\n<code class=\"java\">\r\njava.lang.IllegalStateException: no last call on a mock available\r\n\tat org.easymock.EasyMock.getControlForLastCall(EasyMock.java:174)\r\n\tat org.easymock.EasyMock.expectLastCall(EasyMock.java:167)\r\n\t...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nI use IntelliJ IDEA, which I love for many reasons.  One of them is it's robust refactoring toolset.  For instance, Ctrl-Alt-V, by default, is the introduce variable shortcut.  So, you select the expression that returns some value, introduce variable, and voila, that return value is stored in a nice local variable for you (or there are other options to refactor into fields, constants, parameters, and such.  End shameless plug.  Anywho, EasyMock scenarios value ordering of method calls.  This can become problematic if you're not careful to maintain its delicate order needs (which a refactoring tool, for instance, knows nothing about).\r\n\r\nIf I start with this as a part of a test:\r\n\r\n<code class=\"java\">\r\nsomeObj.doSomething();\r\nexpectLastCall().andThrow(new Exception());\r\n</code>\r\n\r\nAnd then somehow came to this, let's assume for the sake of a refactor:\r\n\r\n<code class=\"java\">\r\nsomeObj.doSomething();\r\nException e = new Exception();\r\nexpectLastCall().andThrow(e);\r\n</code>\r\n\r\nYou will get the above exception.\r\n\r\n<h4>Explanation</h4>\r\n\r\nSimply, the problem is that something has been interjected in between the method call and the expect.  Because these things are syntatically separate with the void return type methods, this becomes a possible pitfall.  To fix, put the two together, keep the ordering correct.\r\n\r\n<code class=\"java\">\r\nException e = new Exception();\r\nsomeObj.doSomething();\r\nexpectLastCall().andThrow(e);\r\n</code>\r\n\r\n\r\n<h3>Throws like a girl</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\n<code class=\"java\">\r\njava.lang.IllegalArgumentException: last method called on mock cannot throw com.lowagie.text.DocumentException\r\n\tat org.easymock.internal.MocksControl.andThrow(MocksControl.java:137)\r\n   ...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nWhen I'm trying to test the catch blocks in my code, often times I will simulate an exception being thrown with the mock andThrow() method.  If I start with a class like this:\r\n\r\n<code class=\"java\">\r\npublic class Something {\r\n   void doSomething() {\r\n      try {\r\n         externalService.callService();\r\n      } catch (Exception e) { \r\n         // log \r\n      }\r\n   }\r\n}\r\n\r\ninterface ExternalService {\r\n   void callService();\r\n}\r\n</code>\r\n\r\nAnd do a test like this:\r\n\r\n<code class=\"java\">\r\n@Test\r\npublic void testDoSomething() {\r\n   /* ... */\r\n   externalService.callService();\r\n   expectLastCall().andThrow(new Exception());\r\n   /* ... */\r\n}\r\n</code>\r\n\r\nYou are likely to get the above problematic exception.\r\n\r\n<h4>Explanation</h4>\r\n\r\nSure you catch the exception; sure you want to check your catch block logic (lame here); but andThrow() needs to know that it's doing the right thing.  Expectations in mocks are really quite flexible and allow us to make the code do things it might not otherwise do through simulated conditions in a test.  But, EasyMock will not do the impossible.  And in this case, it knows that if you're expecting a checked exception to be thrown, it must be declared as thrown, which it is not.  So, to fix this, your code must actually declare that it throws Exception.  Of course, only do this if it makes sense.  And, if it doesn't, why are you testing it anyway?\r\n\r\nFor interface and implementing class:\r\n\r\n<code class=\"java\">\r\nvoid callService() throws Exception;\r\n</code>\r\n\r\n\r\n<h3>Half-Mocked Expectations</h3>\r\n\r\n<h4>Exception</h4>\r\n\r\nThis exception is very similar to that mentioned in the \"<a href=\"#mocksusemocks\">Mock methods use Mocks</a>\" section above.\r\n\r\n<code class=\"java\">\r\njava.lang.IllegalStateException: void method cannot return a value\r\n\tat org.easymock.internal.MocksControl.andReturn(MocksControl.java:128)\r\n   ...\r\n</code>\r\n\r\n<h4>Behavior</h4>\r\n\r\nIt is convenient and more unit-like to test one method in a class that calls other methods in that class but not test the other method at that point.  Thus, we half-mock the class, mocking the \"external\" methods, the ones not being tested in this particular test, but not mocking the method being tested.  Did I mention how useful this is?  Let's try it.\r\n\r\nStart with this code:\r\n\r\n<code class=\"java\">\r\npublic class TestMe {\r\n   void doTestNow() {\r\n      /* ... */\r\n      doTestLater();\r\n   }\r\n}\r\n</code>\r\n\r\nAnd this test:\r\n\r\n<code class=\"java\">\r\n@Test\r\npublic void testDoTestNow() throws NoSuchMethodException {\r\n   Method doTestLater = TestMe.class.getDeclaredMethod(\"doTestLater\");\r\n   TestMe me = createMock(TestMe.class, doTestLater);\r\n   /* ... */ \r\n   me.doTestLater();\r\n   expectLastCall();\r\n   replay(me);\r\n   me.doTestNow();\r\n   verify(me);\r\n}\r\n</code>\r\n\r\nWhen we instantiate TestMe, it looks like a mock, but when we pass in var-arg java.lang.reflect.Method parameters, only those specified methods are mocked.  This works, is cool, and allows the doTestNow() method to be tested independent of the doTestLater() method and its test.  Now, let us pretend that we change our test to not want to mock calls to methods on TestMe, and instead of doing this:\r\n\r\n<code class=\"java\">\r\nTestMe me = createMock(TestMe.class, doTestLater);\r\n</code>\r\n\r\nWe do this:\r\n\r\n<code class=\"java\">\r\nTestMe me = new TestMe();\r\n</code>\r\n\r\nWe will get the icky exception shown above.\r\n\r\n<h4>Explanation</h4>\r\n\r\nThe first thing we tried to do worked, but the reason we got the exception that we're decrypting is because we made the refactor to the test, making the TestMe instance totally non-mocked, but we left the expectLastCall() on the me.doTestLater() call.  Simply remove that expectation and you're good to go again.  Just remember, now you're actually calling into the body of doTestLater().\r\n\r\n\r\nWell, that's it for this current round into the EasyMock foray.  But, I'm sure to continue to make mistakes using this helpful, yet often-problematic tool that is EasyMock.  If you have any cause-effect mappings related EasyMock that might help, let us know.", 
      "date_updated": "2010-05-04 12:09:28", 
      "demo": "", 
      "markup": "h", 
      "title": "EasyMock Cause-Effect Exception Mapping", 
      "source_path": null, 
      "collection": 1, 
      "summary": "EasyMock is a great tool for separating external dependencies from unit tests.  There is a learning curve to learning the mock method of testing, and unfortunately, EasyMock does not give very good prompts when you do something wrong.  The exception messages are actually quite cryptic.  This article is meant to be a crude mapping of exception output and the behavior that might have caused it.  At least, this is a log of many of my experiences with EasyMock and how I usually get into the messes I do.  It is quite possible that the same exception output could be had via different behavior.  It's also important to note that I'm not trying to show how to create meaningful tests here (I don't even show full tests half the time), only help figure out how mysterious EasyMock exceptions were thrown.  These experiences were documented on EasyMock 2.2 and 2.4.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-07-06 10:38:08", 
       
      "tags": "easymock java unit-testing"
    }
  }, 
  {
    "pk": 374, 
    "model": "blog.article", 
    "fields": {
      "body": "First, install Pidgin and the pidgin-encryption plugin.  For Debian'ites, it's easy:\r\n\r\n.. code-block:: bash\r\n\r\n  sudo apt-get install pidgin pidgin-encryption\r\n\r\nFor users who like to download their own binaries from the web, go to the `pidgin-encryption site <http://pidgin-encrypt.sourceforge.net/>`_.\r\n\r\nOnce you install, start up `Pidgin <http://www.pidgin.im/>`_ (awesomely in `gnome-do <http://do.davebsd.com/>`_):\r\n\r\n.. image:: https://lh4.googleusercontent.com/_mA-9kCcx0bs/Ta7_wER1voI/AAAAAAAAAB8/FupSAZdUz0c/s800/PidginGnomeDo.png\r\n\r\nOn the Pidgin Buddy, go to Tools > Plugins, and enable the Pidgin-Encryption plugin:\r\n\r\n.. image:: https://lh3.googleusercontent.com/_mA-9kCcx0bs/Ta7_wur-zRI/AAAAAAAAACI/160M7IL5Ajs/s800/PidginPlugin.png\r\n\r\nNext, inform Pidgin that you want to start using encryption whilst chatting with someone who also has their chats through Pidgin encrypted.  In your chat window, there's a new padlock icon on the top menu bar.  Click it and \"Enable Encryption\":\r\n\r\n.. image:: https://lh6.googleusercontent.com/_mA-9kCcx0bs/Ta8R2IMyHNI/AAAAAAAAACs/RAAczsPJFkI/s800/PidginEnableEncryption.png\r\n\r\nOnce you start chatting with someone you'll both have to accept the public key that the other person is sending with their chats:\r\n\r\n.. image:: https://lh5.googleusercontent.com/_mA-9kCcx0bs/Ta8BbyPeIrI/AAAAAAAAACU/G9hf5dV0ObA/s800/PidginEncrypt.png \r\n\r\nFinally, if you don't want to accept keys and do the hand shake every time, you can enable encryption on every chat with that person.  Go to your buddy list, find the person on the list, right click on them, and select \"Turn Auto-Encrypt On\":\r\n\r\n.. image:: https://lh6.googleusercontent.com/_mA-9kCcx0bs/Ta7_wMsvbKI/AAAAAAAAACA/dSIeOT7_QnI/s800/PidginAlwaysOn.png\r\n\r\nWell, now you can chat freely with the best of them.  Open tool.  Open protocol.  Linux support.  Google contact list.  All for the low cost of zero.", 
      "date_published": "2011-04-20 09:36:43", 
      "image_path": "", 
      "title_slug": "encrypt-your-ims-pidgin", 
      "rendered_body": "<p>First, install Pidgin and the pidgin-encryption plugin.  For Debian'ites, it's easy:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo apt-get install pidgin pidgin-encryption\n</pre></div>\n</div><p>For users who like to download their own binaries from the web, go to the <a class=\"reference external\" href=\"http://pidgin-encrypt.sourceforge.net/\">pidgin-encryption site</a>.</p>\n<p>Once you install, start up <a class=\"reference external\" href=\"http://www.pidgin.im/\">Pidgin</a> (awesomely in <a class=\"reference external\" href=\"http://do.davebsd.com/\">gnome-do</a>):</p>\n<img alt=\"https://lh4.googleusercontent.com/_mA-9kCcx0bs/Ta7_wER1voI/AAAAAAAAAB8/FupSAZdUz0c/s800/PidginGnomeDo.png\" src=\"https://lh4.googleusercontent.com/_mA-9kCcx0bs/Ta7_wER1voI/AAAAAAAAAB8/FupSAZdUz0c/s800/PidginGnomeDo.png\" />\n<p>On the Pidgin Buddy, go to Tools &gt; Plugins, and enable the Pidgin-Encryption plugin:</p>\n<img alt=\"https://lh3.googleusercontent.com/_mA-9kCcx0bs/Ta7_wur-zRI/AAAAAAAAACI/160M7IL5Ajs/s800/PidginPlugin.png\" src=\"https://lh3.googleusercontent.com/_mA-9kCcx0bs/Ta7_wur-zRI/AAAAAAAAACI/160M7IL5Ajs/s800/PidginPlugin.png\" />\n<p>Next, inform Pidgin that you want to start using encryption whilst chatting with someone who also has their chats through Pidgin encrypted.  In your chat window, there's a new padlock icon on the top menu bar.  Click it and &quot;Enable Encryption&quot;:</p>\n<img alt=\"https://lh6.googleusercontent.com/_mA-9kCcx0bs/Ta8R2IMyHNI/AAAAAAAAACs/RAAczsPJFkI/s800/PidginEnableEncryption.png\" src=\"https://lh6.googleusercontent.com/_mA-9kCcx0bs/Ta8R2IMyHNI/AAAAAAAAACs/RAAczsPJFkI/s800/PidginEnableEncryption.png\" />\n<p>Once you start chatting with someone you'll both have to accept the public key that the other person is sending with their chats:</p>\n<img alt=\"https://lh5.googleusercontent.com/_mA-9kCcx0bs/Ta8BbyPeIrI/AAAAAAAAACU/G9hf5dV0ObA/s800/PidginEncrypt.png\" src=\"https://lh5.googleusercontent.com/_mA-9kCcx0bs/Ta8BbyPeIrI/AAAAAAAAACU/G9hf5dV0ObA/s800/PidginEncrypt.png\" />\n<p>Finally, if you don't want to accept keys and do the hand shake every time, you can enable encryption on every chat with that person.  Go to your buddy list, find the person on the list, right click on them, and select &quot;Turn Auto-Encrypt On&quot;:</p>\n<img alt=\"https://lh6.googleusercontent.com/_mA-9kCcx0bs/Ta7_wMsvbKI/AAAAAAAAACA/dSIeOT7_QnI/s800/PidginAlwaysOn.png\" src=\"https://lh6.googleusercontent.com/_mA-9kCcx0bs/Ta7_wMsvbKI/AAAAAAAAACA/dSIeOT7_QnI/s800/PidginAlwaysOn.png\" />\n<p>Well, now you can chat freely with the best of them.  Open tool.  Open protocol.  Linux support.  Google contact list.  All for the low cost of zero.</p>\n", 
      "date_updated": "2011-04-20 11:06:33", 
      "demo": "", 
      "markup": "r", 
      "title": "Encrypt your IMs in Pidgin", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Around the office, when someone security-minded finds out that I instant message (IM) over Pidgin (using Google Talk's service), there tends to be wailing and gnashing of teeth, because I am chatting in clear text over the wire.  I am encouraged to use a clunky, Windows-only, proprietary, corporate, different tool that is for internal talk with internal people.  \"It's secure.\"  \"It's encrypted,\" they say.  I never though I said too much of worth over chat, and what was occasionally awesome was well-encoded in l33t.  But, now my friend Dean teaches me the goodness of encrypting your IMs in Pidgin.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-04-20 09:44:17", 
       
      "tags": "chat encryption pidgin security"
    }
  }, 
  {
    "pk": 288, 
    "model": "blog.article", 
    "fields": {
      "body": "Here is one such example, found today in a Java project that I recommend my mission be to keep anonymous:\r\n\r\n<code class=\"java\">\r\npublic static boolean evaluateOrConditions(boolean ... conditions) {\r\n  boolean valid = false;\r\n  for (boolean b : conditions) {\r\n      if (b) {\r\n          valid = true;\r\n          break;\r\n      }\r\n  }\r\n  return valid;\r\n}\r\n</code>\r\n\r\nI give you... [drum roll] ... the newly invented OR statement!   LOL!", 
      "date_published": "2009-11-10 13:17:50", 
      "image_path": null, 
      "title_slug": "engineering-engineerings-sake", 
      "rendered_body": "Here is one such example, found today in a Java project that I recommend my mission be to keep anonymous:\r\n\r\n<code class=\"java\">\r\npublic static boolean evaluateOrConditions(boolean ... conditions) {\r\n  boolean valid = false;\r\n  for (boolean b : conditions) {\r\n      if (b) {\r\n          valid = true;\r\n          break;\r\n      }\r\n  }\r\n  return valid;\r\n}\r\n</code>\r\n\r\nI give you... [drum roll] ... the newly invented OR statement!   LOL!", 
      "date_updated": "2010-05-04 12:08:58", 
      "demo": null, 
      "markup": "h", 
      "title": "Engineering for Engineering's Sake", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Software engineers are sometimes very, very prone to making things more complex than they need to be.  In the engineer's mind, \"complex\" can be replaced with the word \"cool\" (or some other amazing adjective).  Such a mind has gotten lost, has lost sight of the fact that there exists a most-efficient path from the problem to the solution.  Such a predicament is not uncommon -- probably because of something physically wrong in the engineer's mind;  And because a certain amount of tinkering is usually required to begin work toward a solution.  But, when one becomes enveloped in the problem and forgets about the priority of actually solving the problem, large, unrecognizable apparatus are concocted.  ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-11-10 13:28:34", 
       
      "tags": "engineering"
    }
  }, 
  {
    "pk": 254, 
    "model": "blog.article", 
    "fields": {
      "body": "<div style=\"width:95%;text-align:center;margin-bottom:20px;background-color:#86888F;padding:15px;\"><img src=\"http://www.springsource.org/sites/all/themes/zen/framework/logo.png\" /></div>\r\n\r\nIf you have property files that Spring knows about, you could put entries in like this:\r\n\r\nIn defaultContext-dev-test.properties:\r\n\r\n<code class=\"text\">\r\nmailProvider=devTestEmailServiceImpl\r\n</code>\r\n\r\nIn defaultContext.properties:\r\n\r\n<code class=\"text\">\r\nmailProvider=emailServiceImpl\r\n</code>\r\n\r\nThen, in your Spring bean context file, eg serviceBeanContext.xml:\r\n\r\n<code class=\"xml\">\r\n<alias alias=\"emailService\" name=\"@{mailProvider}\"/>\r\n</code>\r\n\r\nThe @{} notation is for finding variables of that name in a properties file.  Finally, in your Java code, you can reference the alias that will be different depending on your environment:\r\n\r\n<code class=\"java\">\r\n@Autowired\r\n@Qualifier(\"emailService\")\r\nprivate EmailService emailService;\r\n</code>", 
      "date_published": "2009-09-02 14:22:34", 
      "image_path": null, 
      "title_slug": "environment-based-dependency-injection", 
      "rendered_body": "<div style=\"width:95%;text-align:center;margin-bottom:20px;background-color:#86888F;padding:15px;\"><img src=\"http://www.springsource.org/sites/all/themes/zen/framework/logo.png\" /></div>\r\n\r\nIf you have property files that Spring knows about, you could put entries in like this:\r\n\r\nIn defaultContext-dev-test.properties:\r\n\r\n<code class=\"text\">\r\nmailProvider=devTestEmailServiceImpl\r\n</code>\r\n\r\nIn defaultContext.properties:\r\n\r\n<code class=\"text\">\r\nmailProvider=emailServiceImpl\r\n</code>\r\n\r\nThen, in your Spring bean context file, eg serviceBeanContext.xml:\r\n\r\n<code class=\"xml\">\r\n<alias alias=\"emailService\" name=\"@{mailProvider}\"/>\r\n</code>\r\n\r\nThe @{} notation is for finding variables of that name in a properties file.  Finally, in your Java code, you can reference the alias that will be different depending on your environment:\r\n\r\n<code class=\"java\">\r\n@Autowired\r\n@Qualifier(\"emailService\")\r\nprivate EmailService emailService;\r\n</code>", 
      "date_updated": "2010-05-04 12:08:58", 
      "demo": null, 
      "markup": "h", 
      "title": "Environment-based Dependency Injection", 
      "source_path": null, 
      "collection": 1, 
      "summary": "In developing an email notification system recently, we became interested in code acting differently depending on what environment we were in.  A potentially good solution for this is environment-based dependency injection.  This means that different Spring beans, for instance, will be used depending on the environment, ie dev, test, etc.  This is useful for something like emailing, because we may not want real emails hitting the mail server in dev or test environments, but we do in prod.  With some Spring constructs, it's pretty easy.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-02 14:23:37", 
       
      "tags": "ioc java spring"
    }
  }, 
  {
    "pk": 368, 
    "model": "blog.article", 
    "fields": {
      "body": "If I have the following directory structure:\r\n\r\n.. code-block:: filesystem\r\n\r\n code\r\n  cutlass\r\n   test\r\n    unit.xqy\r\n\r\nAnd I want to find the context of my unit.xqy from within the unit.xqy code as it's executing, I can call this:\r\n\r\n.. code-block:: xquery\r\n\r\n fn:concat(xdmp:modules-root(), fn:substring(xdmp:get-request-path(), 2))\r\n\r\nWhat's happening?\r\n\r\n* xdmp:modules-root() points to the Modules DB (which happens to be where the code is running).  This also works if you're running modules on the filesystem.\r\n* xdmp:get-request-path() is giving you path from your domain root\r\n* The substring is to strip the / (slash) prepended to the request path, because the modules-root also ends with a slash\r\n\r\nFinally, that line of code yields the full path to the context of execution, boom!:\r\n\r\n.. code-block:: xquery\r\n\r\n /code/cutlass/test/\r\n\r\nAs a side note to the above solution, I was thinking from `this MarkMail thread <http://markmail.org/search/?q=marklogic:%20get%20uri%20of%20current%20file#query:marklogic%3A%20get%20uri%20of%20current%20file+page:1+mid:mdj6xdqyf3lajez6+state:results>`_ that this would work:\r\n\r\n.. code-block:: xquery\r\n\r\n resolve-uri(\".\", xdmp:get-request-path())\r\n\r\nBut this is all I ever got:\r\n\r\n.. code-block:: xquery\r\n\r\n /test/\r\n\r\nAnyone know what I was doing wrong?\r\n\r\nWell, it's good to know where you came from, why you are here, and where you are going -- in many contexts, I guess. :)\r\n", 
      "date_published": "2011-03-11 14:38:28", 
      "image_path": "", 
      "title_slug": "execution-context-marklogic", 
      "rendered_body": "<p>If I have the following directory structure:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>code\n cutlass\n  test\n   unit.xqy\n</pre></div>\n</div><p>And I want to find the context of my unit.xqy from within the unit.xqy code as it's executing, I can call this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>fn:concat(xdmp:modules-root(), fn:substring(xdmp:get-request-path(), 2))\n</pre></div>\n</div><p>What's happening?</p>\n<ul class=\"simple\">\n<li>xdmp:modules-root() points to the Modules DB (which happens to be where the code is running).  This also works if you're running modules on the filesystem.</li>\n<li>xdmp:get-request-path() is giving you path from your domain root</li>\n<li>The substring is to strip the / (slash) prepended to the request path, because the modules-root also ends with a slash</li>\n</ul>\n<p>Finally, that line of code yields the full path to the context of execution, boom!:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>/code/cutlass/test/\n</pre></div>\n</div><p>As a side note to the above solution, I was thinking from <a class=\"reference external\" href=\"http://markmail.org/search/?q=marklogic:%20get%20uri%20of%20current%20file#query:marklogic%3A%20get%20uri%20of%20current%20file+page:1+mid:mdj6xdqyf3lajez6+state:results\">this MarkMail thread</a> that this would work:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>resolve-uri(&quot;.&quot;, xdmp:get-request-path())\n</pre></div>\n</div><p>But this is all I ever got:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>/test/\n</pre></div>\n</div><p>Anyone know what I was doing wrong?</p>\n<p>Well, it's good to know where you came from, why you are here, and where you are going -- in many contexts, I guess. :)</p>\n", 
      "date_updated": "2011-03-11 14:41:13", 
      "demo": "", 
      "markup": "r", 
      "title": "Execution Context in MarkLogic", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Have you ever needed to know the location of the actual file that houses the code that's currently executing?  Well, if you have then you're not alone.  I have been there myself.  The answer might not be as interesting as some of life's deeper mysteries unveiled, but I was excited about it nonetheless.\r\n\r\nThis information seems especially useful in cases where an absolute path to the code is required but you want to avoid hard-coding context information into your app.  Your app really shouldn't care where it is deployed to afterall.  My love for Django increased when I discovered os.path.dirname(__file__).  Here's an equivalent goody in MarkLogic.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-03-11 14:39:13", 
       
      "tags": "marklogic xquery"
    }
  }, 
  {
    "pk": 210, 
    "model": "blog.article", 
    "fields": {
      "body": "<code class=\"java\">\r\nimport java.lang.reflect.Field;\r\n\r\n/**\r\n * @author: jtsnake\r\n * @date: Jun 3, 2009\r\n */\r\npublic class ReflectionUtil {\r\n\r\n    /**\r\n     * Gets the value of the field on the given object\r\n     * @param obj the object with the field being examined\r\n     * @param name the name of the field in the object\r\n     * @param < T > will return the field type w/o static casting\r\n     * @return the field value\r\n     * @throws NoSuchFieldException thrown if can't find field\r\n     * @throws IllegalAccessException thrown if the field isn't accessible (shouldn't be a problem w/ setAccessible(true))\r\n     */\r\n    public static < T > T getFieldValue(Object obj, String name) throws NoSuchFieldException, IllegalAccessException {\r\n        Field field = findField(obj.getClass(), name);\r\n        field.setAccessible(true);\r\n        return (T) field.get(obj);\r\n    }\r\n\r\n    /**\r\n     * Set the value of the field on a given object\r\n     * @param obj the object with the field to set value on\r\n     * @param name name of the field in the object\r\n     * @param value the value to set on the field\r\n     * @throws NoSuchFieldException thrown if can't find the field\r\n     * @throws IllegalAccessException thrown if the field isn't accessible (shouldn't be a problem w/ setAccessible(true))\r\n     */\r\n    public static void setFieldValue(Object obj, String name, Object value) throws NoSuchFieldException, IllegalAccessException {\r\n        Field field = findField(obj.getClass(), name);\r\n        field.setAccessible(true);\r\n        field.set(obj, value);\r\n    }\r\n\r\n    /**\r\n     * Helper method to find the field in the class\r\n     * @param clzz class type of the object\r\n     * @param name name of the field\r\n     * @return the java.lang.reflect.Field\r\n     * @throws NoSuchFieldException thrown if method recurses to java.lang.Object w/o finding the field by the given name\r\n     */\r\n    static Field findField(Class clzz, String name) throws NoSuchFieldException {\r\n        Field field = null;\r\n        try {\r\n            field = clzz.getDeclaredField(name);\r\n        } catch (NoSuchFieldException e) {\r\n            if (clzz.getSuperclass() != null) {\r\n                field = ReflectionUtil.findField(clzz.getSuperclass(), name);\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n        return field;\r\n    }\r\n}\r\n</code>\r\n\r\nw00t, go tests!", 
      "date_published": "2009-06-08 14:29:57", 
      "image_path": null, 
      "title_slug": "expose-fields-java-reflection", 
      "rendered_body": "<code class=\"java\">\r\nimport java.lang.reflect.Field;\r\n\r\n/**\r\n * @author: jtsnake\r\n * @date: Jun 3, 2009\r\n */\r\npublic class ReflectionUtil {\r\n\r\n    /**\r\n     * Gets the value of the field on the given object\r\n     * @param obj the object with the field being examined\r\n     * @param name the name of the field in the object\r\n     * @param < T > will return the field type w/o static casting\r\n     * @return the field value\r\n     * @throws NoSuchFieldException thrown if can't find field\r\n     * @throws IllegalAccessException thrown if the field isn't accessible (shouldn't be a problem w/ setAccessible(true))\r\n     */\r\n    public static < T > T getFieldValue(Object obj, String name) throws NoSuchFieldException, IllegalAccessException {\r\n        Field field = findField(obj.getClass(), name);\r\n        field.setAccessible(true);\r\n        return (T) field.get(obj);\r\n    }\r\n\r\n    /**\r\n     * Set the value of the field on a given object\r\n     * @param obj the object with the field to set value on\r\n     * @param name name of the field in the object\r\n     * @param value the value to set on the field\r\n     * @throws NoSuchFieldException thrown if can't find the field\r\n     * @throws IllegalAccessException thrown if the field isn't accessible (shouldn't be a problem w/ setAccessible(true))\r\n     */\r\n    public static void setFieldValue(Object obj, String name, Object value) throws NoSuchFieldException, IllegalAccessException {\r\n        Field field = findField(obj.getClass(), name);\r\n        field.setAccessible(true);\r\n        field.set(obj, value);\r\n    }\r\n\r\n    /**\r\n     * Helper method to find the field in the class\r\n     * @param clzz class type of the object\r\n     * @param name name of the field\r\n     * @return the java.lang.reflect.Field\r\n     * @throws NoSuchFieldException thrown if method recurses to java.lang.Object w/o finding the field by the given name\r\n     */\r\n    static Field findField(Class clzz, String name) throws NoSuchFieldException {\r\n        Field field = null;\r\n        try {\r\n            field = clzz.getDeclaredField(name);\r\n        } catch (NoSuchFieldException e) {\r\n            if (clzz.getSuperclass() != null) {\r\n                field = ReflectionUtil.findField(clzz.getSuperclass(), name);\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n        return field;\r\n    }\r\n}\r\n</code>\r\n\r\nw00t, go tests!", 
      "date_updated": "2010-05-04 12:08:58", 
      "demo": null, 
      "markup": "h", 
      "title": "Expose Fields via Java Reflection", 
      "source_path": null, 
      "collection": 1, 
      "summary": "For unit testing purposes, I often want to set field values in objects so that I can setup for the test conditions.  One of most annoying things about testing is the urge to change code design for just the sake of testing -- especially if it's in a way that is considered less safe, like exposing elements or lessening accessibility.  (This is not to say that trying to test code can reveal certain code smells and prompt refactoring).  I, myself, have a number of setter methods with this comment prepended: \"// for test only comments\".  Stinkers!  Well, sometimes enough becomes enough.  So, here's a way to set any field on an object w/o exposing it.  This is done via reflection.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-06-08 14:30:44", 
       
      "tags": "java reflection unit-testing"
    }
  }, 
  {
    "pk": 336, 
    "model": "blog.article", 
    "fields": {
      "body": "We are working on a dashboard that will queue up NUnit categories for a suite run.  The categories will be determined dynamically - and so I couldn't rely on some hard-coded NUnit configurations as we've done in the past while trying to keep things simple.\r\n\r\nTo work around this, I add the build details to a SQL Server database as a queuing spot.  In order to leverage some of CruiseControl.NET's goodness, I wanted a trigger to kick off a build if rows existed.  I tried to load the datatable onto a page of the Dashboard - and update the HTTP Header Last Modified Date to work with the UrlTrigger, but that didn't work quite right.\r\n\r\nSo I created my own.\r\n\r\n1. Create new solution.\r\n2. Add references to NetReflector.dll, ThoughtWorks.CruiseControl.Core.dll, ThoughtWorks.CruiseControl.Remote.dll.\r\n3. Create a new class, such as MyTrigger\r\n4. Implement the ITrigger interface.\r\n5. Implement each of the interface's members.\r\n6. Note: Be sure to add the attribute declaration at the class level : [ReflectorType(\"myTrigger\")]\r\n7. Build\r\n8. Copy .dll to CC.Net's main folder (C:\\Program Files\\CruiseControl.NET\\server).\r\n9. Rename dll to \"ccnet.MyTrigger.plugin.dll\"\r\n10. In your ccnet.config, reference the trigger.\r\n\r\n\r\n<code class=\"java\">\r\nusing System;\r\nusing Exortech.NetReflector;\r\nusing ThoughtWorks.CruiseControl.Core.Util;\r\nusing ThoughtWorks.CruiseControl.Remote;\r\n\r\nnamespace DatabaseTrigger\r\n{\r\n    [ReflectorType(\"myTrigger\")]\r\n    public class MyTrigger : ITrigger\r\n    {\r\n        //member variables here\r\n\r\n        public MyTrigger()\r\n        {\r\n            \r\n        }\r\n\r\n        [ReflectorProperty(\"buildCondition\", Required = false)]\r\n        public BuildCondition BuildCondition = BuildCondition.IfModificationExists;\r\n\r\n        public void IntegrationCompleted()\r\n        {\r\n            IncrementNextBuildTime();\r\n        }\r\n\r\n        public IntegrationRequest Fire()\r\n        {\r\n            BuildCondition buildCondition = ShouldRunIntegration();\r\n            if (buildCondition == BuildCondition.NoBuild) return null;\r\n            return new IntegrationRequest(buildCondition, Name, null);\r\n        }\r\n\r\n        private BuildCondition ShouldRunIntegration()\r\n        {\r\n            if (databaseRowExists())\r\n                return BuildCondition.ForceBuild;\r\n\r\n            return BuildCondition;\r\n        }\r\n\r\n        private bool databaseRowExists()\r\n        {\r\n            return parser.CheckForRowsInQueue();\r\n        }\r\n\r\n        public DateTime NextBuild\r\n        {\r\n            get { return nextBuildTime; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// The name of the trigger. This name is passed to external tools as a means to identify the trigger that requested the build.\r\n        /// </summary>\r\n        /// <version>1.1</version>\r\n        /// <default>IntervalTrigger</default>\r\n        [ReflectorProperty(\"name\", Required = false)]\r\n        public virtual string Name\r\n        {\r\n            get\r\n            {\r\n                if (name == null) name = GetType().Name;\r\n                return name;\r\n            }\r\n            set { name = value; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// The number of seconds after an integration cycle completes before triggering the next integration cycle.\r\n        /// </summary>\r\n        /// <version>1.0</version>\r\n        /// <default>60</default>\r\n        [ReflectorProperty(\"seconds\", Required = false)]\r\n        public double IntervalSeconds\r\n        {\r\n            get { return intervalSeconds; }\r\n            set\r\n            {\r\n                intervalSeconds = value;\r\n                IncrementNextBuildTime();\r\n            }\r\n        }\r\n\r\n        protected DateTime IncrementNextBuildTime()\r\n        {\r\n            double delaySeconds;\r\n            if (isInitialInterval)\r\n                delaySeconds = InitialIntervalSeconds;\r\n            else\r\n                delaySeconds = IntervalSeconds;\r\n\r\n            return nextBuildTime = dateTimeProvider.Now.AddSeconds(delaySeconds);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The delay (in seconds) from CCNet startup to the first check for modifications.\r\n        /// </summary>\r\n        /// <version>1.4</version>\r\n        /// <default>Defaults to the IntervalSettings value.</default>\r\n        [ReflectorProperty(\"initialSeconds\", Required = false)]\r\n        public double InitialIntervalSeconds\r\n        {\r\n            get\r\n            {\r\n                if (initialIntervalSeconds == -1)\r\n                    return IntervalSeconds;     // If no setting for this, use IntervalSeconds instead.\r\n                else\r\n                    return initialIntervalSeconds;\r\n            }\r\n            set\r\n            {\r\n                initialIntervalSeconds = value;\r\n                IncrementNextBuildTime();\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\n</code>\r\n\r\nIn the ccnet.config file : \r\n\r\n<code class=\"java\">\r\n<triggers>\r\n\t<myTrigger name=\"dashboard\" seconds=\"30\" buildCondidtion=\"ForceBuild\" initialSeconds=\"30\" />\r\n    </triggers>\r\n</code>", 
      "date_published": "2010-08-17 10:51:02", 
      "image_path": "", 
      "title_slug": "extending-ccnet-write-your-own-trigger", 
      "rendered_body": "We are working on a dashboard that will queue up NUnit categories for a suite run.  The categories will be determined dynamically - and so I couldn't rely on some hard-coded NUnit configurations as we've done in the past while trying to keep things simple.\r\n\r\nTo work around this, I add the build details to a SQL Server database as a queuing spot.  In order to leverage some of CruiseControl.NET's goodness, I wanted a trigger to kick off a build if rows existed.  I tried to load the datatable onto a page of the Dashboard - and update the HTTP Header Last Modified Date to work with the UrlTrigger, but that didn't work quite right.\r\n\r\nSo I created my own.\r\n\r\n1. Create new solution.\r\n2. Add references to NetReflector.dll, ThoughtWorks.CruiseControl.Core.dll, ThoughtWorks.CruiseControl.Remote.dll.\r\n3. Create a new class, such as MyTrigger\r\n4. Implement the ITrigger interface.\r\n5. Implement each of the interface's members.\r\n6. Note: Be sure to add the attribute declaration at the class level : [ReflectorType(\"myTrigger\")]\r\n7. Build\r\n8. Copy .dll to CC.Net's main folder (C:\\Program Files\\CruiseControl.NET\\server).\r\n9. Rename dll to \"ccnet.MyTrigger.plugin.dll\"\r\n10. In your ccnet.config, reference the trigger.\r\n\r\n\r\n<code class=\"java\">\r\nusing System;\r\nusing Exortech.NetReflector;\r\nusing ThoughtWorks.CruiseControl.Core.Util;\r\nusing ThoughtWorks.CruiseControl.Remote;\r\n\r\nnamespace DatabaseTrigger\r\n{\r\n    [ReflectorType(\"myTrigger\")]\r\n    public class MyTrigger : ITrigger\r\n    {\r\n        //member variables here\r\n\r\n        public MyTrigger()\r\n        {\r\n            \r\n        }\r\n\r\n        [ReflectorProperty(\"buildCondition\", Required = false)]\r\n        public BuildCondition BuildCondition = BuildCondition.IfModificationExists;\r\n\r\n        public void IntegrationCompleted()\r\n        {\r\n            IncrementNextBuildTime();\r\n        }\r\n\r\n        public IntegrationRequest Fire()\r\n        {\r\n            BuildCondition buildCondition = ShouldRunIntegration();\r\n            if (buildCondition == BuildCondition.NoBuild) return null;\r\n            return new IntegrationRequest(buildCondition, Name, null);\r\n        }\r\n\r\n        private BuildCondition ShouldRunIntegration()\r\n        {\r\n            if (databaseRowExists())\r\n                return BuildCondition.ForceBuild;\r\n\r\n            return BuildCondition;\r\n        }\r\n\r\n        private bool databaseRowExists()\r\n        {\r\n            return parser.CheckForRowsInQueue();\r\n        }\r\n\r\n        public DateTime NextBuild\r\n        {\r\n            get { return nextBuildTime; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// The name of the trigger. This name is passed to external tools as a means to identify the trigger that requested the build.\r\n        /// </summary>\r\n        /// <version>1.1</version>\r\n        /// <default>IntervalTrigger</default>\r\n        [ReflectorProperty(\"name\", Required = false)]\r\n        public virtual string Name\r\n        {\r\n            get\r\n            {\r\n                if (name == null) name = GetType().Name;\r\n                return name;\r\n            }\r\n            set { name = value; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// The number of seconds after an integration cycle completes before triggering the next integration cycle.\r\n        /// </summary>\r\n        /// <version>1.0</version>\r\n        /// <default>60</default>\r\n        [ReflectorProperty(\"seconds\", Required = false)]\r\n        public double IntervalSeconds\r\n        {\r\n            get { return intervalSeconds; }\r\n            set\r\n            {\r\n                intervalSeconds = value;\r\n                IncrementNextBuildTime();\r\n            }\r\n        }\r\n\r\n        protected DateTime IncrementNextBuildTime()\r\n        {\r\n            double delaySeconds;\r\n            if (isInitialInterval)\r\n                delaySeconds = InitialIntervalSeconds;\r\n            else\r\n                delaySeconds = IntervalSeconds;\r\n\r\n            return nextBuildTime = dateTimeProvider.Now.AddSeconds(delaySeconds);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The delay (in seconds) from CCNet startup to the first check for modifications.\r\n        /// </summary>\r\n        /// <version>1.4</version>\r\n        /// <default>Defaults to the IntervalSettings value.</default>\r\n        [ReflectorProperty(\"initialSeconds\", Required = false)]\r\n        public double InitialIntervalSeconds\r\n        {\r\n            get\r\n            {\r\n                if (initialIntervalSeconds == -1)\r\n                    return IntervalSeconds;     // If no setting for this, use IntervalSeconds instead.\r\n                else\r\n                    return initialIntervalSeconds;\r\n            }\r\n            set\r\n            {\r\n                initialIntervalSeconds = value;\r\n                IncrementNextBuildTime();\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\n</code>\r\n\r\nIn the ccnet.config file : \r\n\r\n<code class=\"java\">\r\n<triggers>\r\n\t<myTrigger name=\"dashboard\" seconds=\"30\" buildCondidtion=\"ForceBuild\" initialSeconds=\"30\" />\r\n    </triggers>\r\n</code>", 
      "date_updated": "2010-08-17 11:04:37", 
      "demo": "", 
      "markup": "h", 
      "title": "Extending CC.Net to write your own trigger", 
      "source_path": "", 
      "collection": 1, 
      "summary": "The default triggers provided by CruiseControl.NET just didn't fit my unique scenario.  I needed a trigger that could check a database table, and if rows exist - to force a build.  Check the low down...", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-08-17 11:03:27", 
       
      "tags": "ccnet trigger"
    }
  }, 
  {
    "pk": 178, 
    "model": "blog.article", 
    "fields": {
      "body": "If I want to do an include and pass in some sort of parameter value, I could do this:\r\n\r\n<code class=\"xml\">\r\n<ui:include src=\"inclusion.xhtml\">\r\n\t<ui:param name=\"ilikebeans\" value=\"true\" />\r\n\r\n</ui:include>\r\n</code>\r\n\r\nThus, in the inclusion.xhtml file, I could reference #{ilikebeans}, and the value would be \"true\".\r\n\r\nParameters can also be included on child templates and then read on parent templates.  Here's an example:\r\n\r\nParent:\r\n<code class=\"xml\">\r\n<ui:composition>\r\n<!-- ... -->\r\n<ul>\r\n\t<li class=\"#{tab eq 'info' ? 'selected' : ''}\">Info tab</li>\r\n</ul>\r\n</ui:composition>\r\n</code>\r\n\r\nChild:\r\n<code class=\"xml\">\r\n<ui:composition template=\"parent.xhtml\">\r\n<!-- ... -->\r\n<ui:param name=\"tab\" value=\"info\" />\r\n</ui:composition>\r\n</code>\r\n\r\nThus, the child template can have certain values that affect the parent.  As seen in the example, this could be useful for showing certain tabs in a list as selected when that particular page (the child) is shown.\r\n\r\nOne note on my findings for parameter names...  they cannot have hyphens (-) in the name!  Otherwise, the value does not come thru properly.  Beats me!\r\n\r\nHave fun with Facelets!", 
      "date_published": "2009-03-24 08:36:38", 
      "image_path": null, 
      "title_slug": "facelets-template-includes-and-params", 
      "rendered_body": "If I want to do an include and pass in some sort of parameter value, I could do this:\r\n\r\n<code class=\"xml\">\r\n<ui:include src=\"inclusion.xhtml\">\r\n\t<ui:param name=\"ilikebeans\" value=\"true\" />\r\n\r\n</ui:include>\r\n</code>\r\n\r\nThus, in the inclusion.xhtml file, I could reference #{ilikebeans}, and the value would be \"true\".\r\n\r\nParameters can also be included on child templates and then read on parent templates.  Here's an example:\r\n\r\nParent:\r\n<code class=\"xml\">\r\n<ui:composition>\r\n<!-- ... -->\r\n<ul>\r\n\t<li class=\"#{tab eq 'info' ? 'selected' : ''}\">Info tab</li>\r\n</ul>\r\n</ui:composition>\r\n</code>\r\n\r\nChild:\r\n<code class=\"xml\">\r\n<ui:composition template=\"parent.xhtml\">\r\n<!-- ... -->\r\n<ui:param name=\"tab\" value=\"info\" />\r\n</ui:composition>\r\n</code>\r\n\r\nThus, the child template can have certain values that affect the parent.  As seen in the example, this could be useful for showing certain tabs in a list as selected when that particular page (the child) is shown.\r\n\r\nOne note on my findings for parameter names...  they cannot have hyphens (-) in the name!  Otherwise, the value does not come thru properly.  Beats me!\r\n\r\nHave fun with Facelets!", 
      "date_updated": "2010-05-04 12:14:06", 
      "demo": null, 
      "markup": "h", 
      "title": "Facelets Template Includes and Params", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Facelets is a great template framework that sits on top of JSF.  They have some fun template includes and parameters that you can pass into the included templates.  Here is an example with one gotcha pertaining to the parameter name.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-03-24 08:44:53", 
       
      "tags": "facelets java jsf"
    }
  }, 
  {
    "pk": 255, 
    "model": "blog.article", 
    "fields": {
      "body": "\r\ndjango-admin.py is in the your site-packages/django/bin/ directory.  And that brings up another good point.  Where is your site-packages directory specifically?  You can find it with this command:\r\n\r\n<code class=\"bash\">\r\npython -c \"from distutils.sysconfig import get_python_lib; print get_python_lib()\"\r\n</code>\r\n\r\nOnce you find the site-packages directory, go to the bin/ subdirectory to find the django-admin.py.  You just need to put this in your path so that it's findable from wherever you need to use it.  Here's a possibility:\r\n\r\n<code class=\"bash\">\r\ncd /usr/local/bin/ &&\r\nsudo ln -s [site-packages]/bin/django-admin.py django-admin.py\r\n</code>", 
      "date_published": "2009-09-03 08:49:24", 
      "image_path": null, 
      "title_slug": "find-django-adminpy", 
      "rendered_body": "\r\ndjango-admin.py is in the your site-packages/django/bin/ directory.  And that brings up another good point.  Where is your site-packages directory specifically?  You can find it with this command:\r\n\r\n<code class=\"bash\">\r\npython -c \"from distutils.sysconfig import get_python_lib; print get_python_lib()\"\r\n</code>\r\n\r\nOnce you find the site-packages directory, go to the bin/ subdirectory to find the django-admin.py.  You just need to put this in your path so that it's findable from wherever you need to use it.  Here's a possibility:\r\n\r\n<code class=\"bash\">\r\ncd /usr/local/bin/ &&\r\nsudo ln -s [site-packages]/bin/django-admin.py django-admin.py\r\n</code>", 
      "date_updated": "2010-05-04 12:14:06", 
      "demo": null, 
      "markup": "h", 
      "title": "Find django-admin.py", 
      "source_path": null, 
      "collection": 1, 
      "summary": "django-admin.py is a utility script that is used by django to start projects, etc.  Sometimes, it seems that it's available to me in the terminal.  At other times, it melts away, unavailable.  So, where is it, and how do I make it findable?\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-03 08:50:50", 
       
      "tags": "bash django python"
    }
  }, 
  {
    "pk": 272, 
    "model": "blog.article", 
    "fields": {
      "body": "nmap, according to the man page, is a network exploration tool and security/port scanner.  Basically, I only ran it in a few forms.  But, on the man page, there are many, many options listed. \r\n\r\nTo use a ping broadcast and find the hosts on the subnet:\r\n\r\n<code class=\"bash\">\r\n\r\n# determine local box IP address and assuming subnet mask 255.255.255.0:\r\nifconfig\r\n\r\n# ping all hosts in range (* = 1-255)\r\nnmap -sP 10.109.16.*\r\n\r\n# output will look like this:\r\nHost 10.109.16.141 appears to be up.\r\n...\r\nNmap done: 256 IP addresses (12 hosts up) scanned in 0.93 seconds\r\n\r\n</code>\r\n\r\nFor some reason, and if someone knows how to enable this please let me know, my remote box wasn't advertising its hostname, so I wanted to look specifically at the ssh port to see if it was open.  To do this, I used a new option and had to run as root:\r\n\r\n<code class=\"bash\">\r\n\r\n# IP protocol scan, looking at port 22 (default ssh)\r\nsudo nmap -sO 10.109.16.* -p22\r\n\r\n</code>\r\n\r\nNote that if you don't include the -p option, this could take some time.  Also, the -sO option is a capital \"oh\", not a zero.\r\n\r\nSo, sweet stuff, eh.  Now you can see who else on your network has unsecured ports. :)", 
      "date_published": "2009-09-30 14:05:11", 
      "image_path": null, 
      "title_slug": "find-network-hosts-nmap", 
      "rendered_body": "nmap, according to the man page, is a network exploration tool and security/port scanner.  Basically, I only ran it in a few forms.  But, on the man page, there are many, many options listed. \r\n\r\nTo use a ping broadcast and find the hosts on the subnet:\r\n\r\n<code class=\"bash\">\r\n\r\n# determine local box IP address and assuming subnet mask 255.255.255.0:\r\nifconfig\r\n\r\n# ping all hosts in range (* = 1-255)\r\nnmap -sP 10.109.16.*\r\n\r\n# output will look like this:\r\nHost 10.109.16.141 appears to be up.\r\n...\r\nNmap done: 256 IP addresses (12 hosts up) scanned in 0.93 seconds\r\n\r\n</code>\r\n\r\nFor some reason, and if someone knows how to enable this please let me know, my remote box wasn't advertising its hostname, so I wanted to look specifically at the ssh port to see if it was open.  To do this, I used a new option and had to run as root:\r\n\r\n<code class=\"bash\">\r\n\r\n# IP protocol scan, looking at port 22 (default ssh)\r\nsudo nmap -sO 10.109.16.* -p22\r\n\r\n</code>\r\n\r\nNote that if you don't include the -p option, this could take some time.  Also, the -sO option is a capital \"oh\", not a zero.\r\n\r\nSo, sweet stuff, eh.  Now you can see who else on your network has unsecured ports. :)", 
      "date_updated": "2010-05-04 12:14:06", 
      "demo": null, 
      "markup": "h", 
      "title": "Find network hosts with nmap", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I had some fun this morning when the headless box that I'm ssh'ing into to do test app runs randomly changed IP address.  My goal was to find it on the network from my local box.  To my rescue: a cool tool called nmap.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-30 14:05:58", 
       
      "tags": "networking"
    }
  }, 
  {
    "pk": 338, 
    "model": "blog.article", 
    "fields": {
      "body": "The focus of requirements on every project is different.  This fact is influenced by many things: the type of project, the members of the team, the culture of the company, the maturity of your process, the number of specialists with eyes on your project (eg, think of the equivalent of a security Nazi in your organization), and so on.  This list is definitely not definitive or all-inclusive, but I'd call my favorite animal a liger before I'd bet that no half-awesome software type has forgotten to specify one of these requirements.  Just let your Internet-bored eyes glaze over those bullets that aren't applicable to your project.\r\n\r\nIn no particular order, try not to forget...\r\n\r\n* Integration with authentication system\r\n\r\n* Version control repository setup\r\n\r\n* Test environment setups\r\n\r\n* Hardware - requirements, setup, VIPs, clustering, load balancing\r\n\r\n* Uptime / Service Level Agreement (SLA) - consider lowest SLA of integrated subsystem\r\n\r\n* Bug-tracking system setup\r\n\r\n* Local development environment setup\r\n\r\n* Unit test environment and actual unit testing\r\n\r\n* Integration and automated tests\r\n\r\n* Test case-tracking environment\r\n\r\n* Web framework selection and setup\r\n\r\n* Coding standard\r\n\r\n* Targeted environment/browser, screen resolutions, capabilities, required plugins, graceful degredation, and cross-browser testing\r\n\r\n* Training for new platforms/environments\r\n\r\n* 3rd-party library selection and integration\r\n\r\n* Urls - exact paths required\r\n\r\n* Errors - conditions, handling, messages, triggers\r\n\r\n* Performance - response times, page sizes, http requests\r\n\r\n* UI - corporate standards, validation, max lengths, empty views\r\n\r\n* Timeouts - requirements/limitations of request, session, server\r\n\r\n* Privacy - terms of agreement\r\n\r\n* Data - backup, security\r\n\r\n* Scalability - future growth model\r\n\r\n* Deployment - method, schedule, automation\r\n\r\n* Operations - support after launch\r\n\r\nThis list is born of my experience -- both triumphs and frustrations.  What are some of the requirements that you would either add or remove?\r\n\r\nAfter listing all these potentially missed requirements/activities, I'm driven to also say that the best projects are the ones that meet the business need by delivering the simplest product for the least cash.  So, don't make it more complicated than requirements come to dictate.", 
      "date_published": "2010-09-03 07:48:35", 
      "image_path": "", 
      "title_slug": "forgotten-requirements", 
      "rendered_body": "<p>The focus of requirements on every project is different.  This fact is influenced by many things: the type of project, the members of the team, the culture of the company, the maturity of your process, the number of specialists with eyes on your project (eg, think of the equivalent of a security Nazi in your organization), and so on.  This list is definitely not definitive or all-inclusive, but I'd call my favorite animal a liger before I'd bet that no half-awesome software type has forgotten to specify one of these requirements.  Just let your Internet-bored eyes glaze over those bullets that aren't applicable to your project.</p>\n<p>In no particular order, try not to forget...</p>\n<ul class=\"simple\">\n<li>Integration with authentication system</li>\n<li>Version control repository setup</li>\n<li>Test environment setups</li>\n<li>Hardware - requirements, setup, VIPs, clustering, load balancing</li>\n<li>Uptime / Service Level Agreement (SLA) - consider lowest SLA of integrated subsystem</li>\n<li>Bug-tracking system setup</li>\n<li>Local development environment setup</li>\n<li>Unit test environment and actual unit testing</li>\n<li>Integration and automated tests</li>\n<li>Test case-tracking environment</li>\n<li>Web framework selection and setup</li>\n<li>Coding standard</li>\n<li>Targeted environment/browser, screen resolutions, capabilities, required plugins, graceful degredation, and cross-browser testing</li>\n<li>Training for new platforms/environments</li>\n<li>3rd-party library selection and integration</li>\n<li>Urls - exact paths required</li>\n<li>Errors - conditions, handling, messages, triggers</li>\n<li>Performance - response times, page sizes, http requests</li>\n<li>UI - corporate standards, validation, max lengths, empty views</li>\n<li>Timeouts - requirements/limitations of request, session, server</li>\n<li>Privacy - terms of agreement</li>\n<li>Data - backup, security</li>\n<li>Scalability - future growth model</li>\n<li>Deployment - method, schedule, automation</li>\n<li>Operations - support after launch</li>\n</ul>\n<p>This list is born of my experience -- both triumphs and frustrations.  What are some of the requirements that you would either add or remove?</p>\n<p>After listing all these potentially missed requirements/activities, I'm driven to also say that the best projects are the ones that meet the business need by delivering the simplest product for the least cash.  So, don't make it more complicated than requirements come to dictate.</p>\n", 
      "date_updated": "2010-09-03 07:53:02", 
      "demo": "", 
      "markup": "r", 
      "title": "Forgotten Requirements", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Recently, I had the opportunity to look at a set of user stories on an upcoming project and apply a high level estimate to each.  These estimates were going to provide a starting point for determining project timeline and schedule.  Every time I'm presented with a request for estimation, I shiver a little because I'm so bad at it.  As I understand it, I'm not alone in this weakness.  I have found, however, that the more requirements that can be defined and the more detail that can be described for each, the more accurate a timeline can be established.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-09-03 07:50:40", 
       
      "tags": "project-management requirements"
    }
  }, 
  {
    "pk": 266, 
    "model": "blog.article", 
    "fields": {
      "body": "You have to configure the server (remote box) and the client (you).\r\n\r\nFor server, install and run the sshd daemon:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install ssh-server;\r\nsudo /etc/init.d/ssh restart\r\n</code>\r\n\r\nThen adjust the server config:\r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/ssh/ssh_config;\r\n# add/modify this line to read...\r\nForwardX11   yes\r\n</code>\r\n\r\nFor the client, install and run ssh:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install ssh;\r\nssh [remote-host-ip] -X\r\n</code>\r\n\r\nThe -X option will enable the X11 forwarding.  Now, try to pop something in a window.  (eg, emacs &, xclock &, nautilus &).  ", 
      "date_published": "2009-09-22 12:39:11", 
      "image_path": null, 
      "title_slug": "forward-x11-thru-ssh", 
      "rendered_body": "You have to configure the server (remote box) and the client (you).\r\n\r\nFor server, install and run the sshd daemon:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install ssh-server;\r\nsudo /etc/init.d/ssh restart\r\n</code>\r\n\r\nThen adjust the server config:\r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/ssh/ssh_config;\r\n# add/modify this line to read...\r\nForwardX11   yes\r\n</code>\r\n\r\nFor the client, install and run ssh:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install ssh;\r\nssh [remote-host-ip] -X\r\n</code>\r\n\r\nThe -X option will enable the X11 forwarding.  Now, try to pop something in a window.  (eg, emacs &, xclock &, nautilus &).  ", 
      "date_updated": "2010-05-04 12:14:06", 
      "demo": null, 
      "markup": "h", 
      "title": "Forward X11 Thru SSH", 
      "source_path": null, 
      "collection": 1, 
      "summary": "SSH is a great protocol that allows secure connections to remote systems.  It's easy to use, gives you terminal access to the system in question and allows you to function as you would were you at the machine itself -- in the terminal.  But, if you want to see actual windows, thru a GUI window management system like Gnome, for instance, you need to enable <a href=\"http://en.wikipedia.org/wiki/X11\">X11</a> forwarding.  ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-22 12:47:24", 
       
      "tags": "ssh xserver"
    }
  }, 
  {
    "pk": 333, 
    "model": "blog.article", 
    "fields": {
      "body": "Interfaces allow you to immediately apply a new adjective to an object.  In this case, we're dealing with enums specifically.  We've got a pile of enums in a codebase that I worked on recently that correspond with a lookup table of values in the database.  The lookup values are essentially static, but still in the database so we can make the appropriate associations between data bits.  Take this contrived example:  Here's our enum with an associated PK on the database side specified for each:\r\n\r\n.. code-block :: java\r\n\r\n  public enum MagicalItem {\r\n    LAMP(1L),\r\n    SWORD(2L),\r\n    SMOKE_BOMB(3L);\r\n    \r\n    private final Long id;\r\n    \r\n    MagicalItem(Long id) { this.id = id; }  \r\n    \r\n    public Long getId() { return id; }\r\n  }\r\n\r\nIn business logic, we're generally wanting to use the enum value for its safety, ease of reading, etc.  But in going back and forth from DB data to data in the app layer, we're going to have to be able to translate between the two.  We could simply add a method to the enum to allow a translation to MagicItems from their associated ids:\r\n\r\n.. code-block :: java\r\n\r\n  public enum MagicalItem {\r\n    LAMP(1L),\r\n    SWORD(2L),\r\n    SMOKE_BOMB(3L);\r\n    \r\n    private final Long id;\r\n    \r\n    MagicalItem(Long id) { this.id = id; }  \r\n    \r\n    public Long getId() { return id; }\r\n    \r\n    public MagicalItem getItemById(Long itemId) {\r\n      MagicalItem retval = null;\r\n      for (MagicalItem item : MagicalItems.values() {\r\n        if (item.getId().equals(itemId)) {\r\n          retval = item;\r\n          break;\r\n        }\r\n      }\r\n      return retval;\r\n    }\r\n  }\r\n\r\nBut, then if we ever had an enum of WishesToMakeOfAGenie (as if that could ever be enumerated), then we'd be writing (or cut and pasting) essentially the same code.  \"I wish to be able to use interfaces correctly every time!\"  Let's try an interface.  It's something simple that merely translates from an input to an output.  We know at least the output type will change, and we have no confidence that the outputs will ever be related datatypes.  Well, now we're wishing that we know how to use generics.  Here's a pass at an interface:\r\n\r\n.. code-block :: java\r\n\r\n  public interface MatchableEnum<E, T extends Enum<T>> {\r\n      public E getMatchElement();\r\n  }\r\n\r\nThis interface's only method will simply identify for us what element of data in the enum will be the field we try to match/translate on.  To explain (or, as it is, sum up):\r\n\r\n* E and T - the names for the generic types that I chose.  That was arbitrary.  \r\n* T extends Enum&lt;T&gt; - this interface can only be used on enums\r\n\r\nFor MagicalItem, the implementation might look like this:\r\n\r\n.. code-block :: java\r\n\r\n  public enum MagicalItem implements MatchableEnum<Long, MagicalItem> {\r\n    LAMP(1L),\r\n    SWORD(2L),\r\n    SMOKE_BOMB(3L);\r\n    \r\n    private final Long id;\r\n    \r\n    MagicalItem(Long id) { this.id = id; }  \r\n    \r\n    public Long getId() { return id; }\r\n    \r\n    public Long getMatchElement() {\r\n      return id;\r\n    }\r\n  }\r\n\r\nAnd what about the code to consume this?  The code that we didn't want to write over and over for the specific case.  Well, this type of functional code is going to go in some sort of util class as a static method, like so:\r\n\r\n.. code-block :: java\r\n\r\n  public static <E, T extends Enum<T>> T matchEnumByElement(Class<? extends MatchableEnum> clzz, E element) {\r\n    T retval = null;\r\n    for (MatchableEnum elem : clzz.getEnumConstants()) {\r\n      if (elem.getMatchElement().equals(element)) {\r\n        retval = (T) elem;\r\n        break;\r\n      }\r\n    }\r\n    return retval;\r\n  }\r\n  \r\nAgain, to sum up:\r\n\r\n* The method is genericized (&lt;, T extends Enum&lt;T&gt;&gt;) -- you'd think the JVM would be able to infer and not require that given the input\r\n* T is the return type (our enum)\r\n* It consumes MatchableEnums and subtypes (see param1)\r\n* And also needs the element you're trying to match on -- in this case, our Long (see param2)\r\n* Within the method we can use special methods on the class, because we know it's an enum (clzz.getEnumConstants()), and the getMatchElement() method from the interface is the only other thing we need.\r\n\r\nThen, when you want to use it, you can do something like this:\r\n\r\n.. code-block :: java\r\n\r\n  Long id = 3L;\r\n  MagicalItem item = EnumUtil.<Long,MagicalItem>matchEnumByElement(MagicalItem.class, id);\r\n  // item should be MagicalItem.SMOKE_BOMB from our example above\r\n\r\nIt's a beautiful thing.  It's bought this codebase a lot of mileage, and it's a handy tool to have around.  \r\n\r\nFor the longest time, the 2nd param was simply a Long, because, as you see in this example, that was the common case.  Making that parameter also a generic allowed for more varied uses -- for instance, when you get an enum like this:\r\n\r\n.. code-block :: java\r\n\r\n  public enum FileType implements MatchableEnum<String, FileType> {\r\n    JPG(\"image/jpeg\"),\r\n    PNG(\"image/png\"),\r\n    /* ... */\r\n\r\n    private final String mime;\r\n\r\n    FileType(String m) { mime = m; }\r\n\r\n    public String getMime() { return mime; }\r\n\r\n    public String getMatchElement() { return mime; }\r\n  }\r\n\r\nSo, enjoy the magic: generics, enums, and interfaces.  See through the cloud of smoke to the ninja in front of you.  Attack with sure confidence and cunning.  The drawback is that you might get stuck with a stray Chinese throwing angle bracket when using generics like this.  I guess know your first aid as well. :)\r\n", 
      "date_published": "2010-08-06 13:47:35", 
      "image_path": "", 
      "title_slug": "generic-interfaces-arabian-magic", 
      "rendered_body": "<p>Interfaces allow you to immediately apply a new adjective to an object.  In this case, we're dealing with enums specifically.  We've got a pile of enums in a codebase that I worked on recently that correspond with a lookup table of values in the database.  The lookup values are essentially static, but still in the database so we can make the appropriate associations between data bits.  Take this contrived example:  Here's our enum with an associated PK on the database side specified for each:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"n\">MagicalItem</span> <span class=\"o\">{</span>\n  <span class=\"n\">LAMP</span><span class=\"o\">(</span><span class=\"mi\">1L</span><span class=\"o\">),</span>\n  <span class=\"n\">SWORD</span><span class=\"o\">(</span><span class=\"mi\">2L</span><span class=\"o\">),</span>\n  <span class=\"n\">SMOKE_BOMB</span><span class=\"o\">(</span><span class=\"mi\">3L</span><span class=\"o\">);</span>\n\n  <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n\n  <span class=\"n\">MagicalItem</span><span class=\"o\">(</span><span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">id</span> <span class=\"o\">=</span> <span class=\"n\">id</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"n\">Long</span> <span class=\"nf\">getId</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">id</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div><p>In business logic, we're generally wanting to use the enum value for its safety, ease of reading, etc.  But in going back and forth from DB data to data in the app layer, we're going to have to be able to translate between the two.  We could simply add a method to the enum to allow a translation to MagicItems from their associated ids:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"n\">MagicalItem</span> <span class=\"o\">{</span>\n  <span class=\"n\">LAMP</span><span class=\"o\">(</span><span class=\"mi\">1L</span><span class=\"o\">),</span>\n  <span class=\"n\">SWORD</span><span class=\"o\">(</span><span class=\"mi\">2L</span><span class=\"o\">),</span>\n  <span class=\"n\">SMOKE_BOMB</span><span class=\"o\">(</span><span class=\"mi\">3L</span><span class=\"o\">);</span>\n\n  <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n\n  <span class=\"n\">MagicalItem</span><span class=\"o\">(</span><span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">id</span> <span class=\"o\">=</span> <span class=\"n\">id</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"n\">Long</span> <span class=\"nf\">getId</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">id</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"n\">MagicalItem</span> <span class=\"nf\">getItemById</span><span class=\"o\">(</span><span class=\"n\">Long</span> <span class=\"n\">itemId</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">MagicalItem</span> <span class=\"n\">retval</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">MagicalItem</span> <span class=\"n\">item</span> <span class=\"o\">:</span> <span class=\"n\">MagicalItems</span><span class=\"o\">.</span><span class=\"na\">values</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">().</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">itemId</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        <span class=\"n\">retval</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">;</span>\n        <span class=\"k\">break</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">retval</span><span class=\"o\">;</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div><p>But, then if we ever had an enum of WishesToMakeOfAGenie (as if that could ever be enumerated), then we'd be writing (or cut and pasting) essentially the same code.  &quot;I wish to be able to use interfaces correctly every time!&quot;  Let's try an interface.  It's something simple that merely translates from an input to an output.  We know at least the output type will change, and we have no confidence that the outputs will ever be related datatypes.  Well, now we're wishing that we know how to use generics.  Here's a pass at an interface:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">MatchableEnum</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"kd\">extends</span> <span class=\"n\">Enum</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">E</span> <span class=\"nf\">getMatchElement</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div><p>This interface's only method will simply identify for us what element of data in the enum will be the field we try to match/translate on.  To explain (or, as it is, sum up):</p>\n<ul class=\"simple\">\n<li>E and T - the names for the generic types that I chose.  That was arbitrary.</li>\n<li>T extends Enum&amp;lt;T&amp;gt; - this interface can only be used on enums</li>\n</ul>\n<p>For MagicalItem, the implementation might look like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"n\">MagicalItem</span> <span class=\"kd\">implements</span> <span class=\"n\">MatchableEnum</span><span class=\"o\">&lt;</span><span class=\"n\">Long</span><span class=\"o\">,</span> <span class=\"n\">MagicalItem</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">LAMP</span><span class=\"o\">(</span><span class=\"mi\">1L</span><span class=\"o\">),</span>\n  <span class=\"n\">SWORD</span><span class=\"o\">(</span><span class=\"mi\">2L</span><span class=\"o\">),</span>\n  <span class=\"n\">SMOKE_BOMB</span><span class=\"o\">(</span><span class=\"mi\">3L</span><span class=\"o\">);</span>\n\n  <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n\n  <span class=\"n\">MagicalItem</span><span class=\"o\">(</span><span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">id</span> <span class=\"o\">=</span> <span class=\"n\">id</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"n\">Long</span> <span class=\"nf\">getId</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">id</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"n\">Long</span> <span class=\"nf\">getMatchElement</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div><p>And what about the code to consume this?  The code that we didn't want to write over and over for the specific case.  Well, this type of functional code is going to go in some sort of util class as a static method, like so:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"kd\">extends</span> <span class=\"n\">Enum</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">T</span> <span class=\"n\">matchEnumByElement</span><span class=\"o\">(</span><span class=\"n\">Class</span><span class=\"o\">&lt;?</span> <span class=\"kd\">extends</span> <span class=\"n\">MatchableEnum</span><span class=\"o\">&gt;</span> <span class=\"n\">clzz</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">element</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">T</span> <span class=\"n\">retval</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">MatchableEnum</span> <span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"n\">clzz</span><span class=\"o\">.</span><span class=\"na\">getEnumConstants</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">.</span><span class=\"na\">getMatchElement</span><span class=\"o\">().</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">element</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">retval</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">elem</span><span class=\"o\">;</span>\n      <span class=\"k\">break</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">retval</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div><p>Again, to sum up:</p>\n<ul class=\"simple\">\n<li>The method is genericized (&amp;lt;, T extends Enum&amp;lt;T&amp;gt;&amp;gt;) -- you'd think the JVM would be able to infer and not require that given the input</li>\n<li>T is the return type (our enum)</li>\n<li>It consumes MatchableEnums and subtypes (see param1)</li>\n<li>And also needs the element you're trying to match on -- in this case, our Long (see param2)</li>\n<li>Within the method we can use special methods on the class, because we know it's an enum (clzz.getEnumConstants()), and the getMatchElement() method from the interface is the only other thing we need.</li>\n</ul>\n<p>Then, when you want to use it, you can do something like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"n\">Long</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">3L</span><span class=\"o\">;</span>\n<span class=\"n\">MagicalItem</span> <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">EnumUtil</span><span class=\"o\">.&lt;</span><span class=\"n\">Long</span><span class=\"o\">,</span><span class=\"n\">MagicalItem</span><span class=\"o\">&gt;</span><span class=\"n\">matchEnumByElement</span><span class=\"o\">(</span><span class=\"n\">MagicalItem</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">);</span>\n<span class=\"c\">// item should be MagicalItem.SMOKE_BOMB from our example above</span>\n</pre></div>\n</div><p>It's a beautiful thing.  It's bought this codebase a lot of mileage, and it's a handy tool to have around.</p>\n<p>For the longest time, the 2nd param was simply a Long, because, as you see in this example, that was the common case.  Making that parameter also a generic allowed for more varied uses -- for instance, when you get an enum like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"n\">FileType</span> <span class=\"kd\">implements</span> <span class=\"n\">MatchableEnum</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">FileType</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">JPG</span><span class=\"o\">(</span><span class=\"s\">&quot;image/jpeg&quot;</span><span class=\"o\">),</span>\n  <span class=\"n\">PNG</span><span class=\"o\">(</span><span class=\"s\">&quot;image/png&quot;</span><span class=\"o\">),</span>\n  <span class=\"c\">/* ... */</span>\n\n  <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">mime</span><span class=\"o\">;</span>\n\n  <span class=\"n\">FileType</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">mime</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getMime</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">mime</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getMatchElement</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">mime</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div><p>So, enjoy the magic: generics, enums, and interfaces.  See through the cloud of smoke to the ninja in front of you.  Attack with sure confidence and cunning.  The drawback is that you might get stuck with a stray Chinese throwing angle bracket when using generics like this.  I guess know your first aid as well. :)</p>\n", 
      "date_updated": "2010-08-06 14:56:43", 
      "demo": "", 
      "markup": "r", 
      "title": "Generic Interfaces Arabian Magic", 
      "source_path": "", 
      "collection": 1, 
      "summary": "[flash bang!]  Say words like generics, enums, or interfaces, and you've immediately transported to the realm of conjured whirlwind sandstorms and curved-sword-weilding assasins.  Well, I guess we're going there, because I think this is pretty cool.  Plus, undocumented, or at least un-reiterated to myself, and later I'll look at it and think it's just pretty complicated.  Prepare for angle brackets in the amount of parens in lisp. ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-08-06 13:48:45", 
       
      "tags": "generics java"
    }
  }, 
  {
    "pk": 337, 
    "model": "blog.article", 
    "fields": {
      "body": "You will need to reference these assemblies: nunit.core.dll, nunit.core.interfaces.dll, nunit.framework.dll, nunit.ukit.dll, nunit.util.dll.\r\n\r\nIn order to load the assembly correctly, I needed to use a .nunit project file.  I had never used one before, but it made things so simple.  The assembly I was loading has about 15 referenced dlls.  It was ridiculous to put all the dll's in a specific directory to keep the assembly loading process smooth.  I didn't have to worry about changing directories to make sure all the referenced dll's were together.\r\n\r\nMy .nunit file\r\n<code class=\"java\">\r\n\r\n<NUnitProject>\r\n\t<Settings appbase=\"./directoryOfCode\"/>\r\n\t<Config name=\"Default\" binpath=\"\" runtimeFramework=\"v2.0\">\r\n\t\t<assembly path=myDllName.dll />\r\n\t</Config>\r\n</NUnitProject>\r\n</code>\r\n  \r\nMy code to get the List of Categories using Nunit.\r\n\r\n<code class=\"java\">\r\npublic static ArrayList GetListOfCategories(Projects.App app)\r\n        {\r\n            ServiceManager.Services.AddService(new SettingsService());\r\n            ServiceManager.Services.AddService(new DomainManager());\r\n            ServiceManager.Services.AddService(new RecentFilesService());\r\n            ServiceManager.Services.AddService(new ProjectService());\r\n            ServiceManager.Services.AddService(new TestLoader(new GuiTestEventDispatcher()));\r\n            ServiceManager.Services.AddService(new AddinRegistry());\r\n            ServiceManager.Services.AddService(new AddinManager());\r\n            ServiceManager.Services.AddService(new TestAgency());\r\n\r\n            ServiceManager.Services.InitializeServices();\r\n\r\n            string fileName = Updater.convertAppToConfig(app);\r\n            ProjectConfig config = new ProjectConfig(fileName);\r\n\r\n            string nUnitProjectFileName = generateNUnitProjectFile(config.BaseDir, config.DllName, config.BuildDir);\r\n\r\n            TestLoader loader = new TestLoader();\r\n            loader.LoadProject(config.BaseDir + \"\\\\\" + nUnitProjectFileName);\r\n            loader.LoadTest(null);\r\n\r\n            if (loader.IsTestLoaded)\r\n            {\r\n                IList list = loader.GetCategories();\r\n                return (ArrayList) list;\r\n            }\r\n            throw new Exception(\"The TestLoader.LoadTest() did not succeed, therefore you cannot get the Categories.\\nError : \" + loader.LastException);\r\n        }\r\n</code>\r\n\r\n", 
      "date_published": "2010-08-17 11:06:00", 
      "image_path": "", 
      "title_slug": "get-list-categories-test-assembly-using-nunit", 
      "rendered_body": "You will need to reference these assemblies: nunit.core.dll, nunit.core.interfaces.dll, nunit.framework.dll, nunit.ukit.dll, nunit.util.dll.\r\n\r\nIn order to load the assembly correctly, I needed to use a .nunit project file.  I had never used one before, but it made things so simple.  The assembly I was loading has about 15 referenced dlls.  It was ridiculous to put all the dll's in a specific directory to keep the assembly loading process smooth.  I didn't have to worry about changing directories to make sure all the referenced dll's were together.\r\n\r\nMy .nunit file\r\n<code class=\"java\">\r\n\r\n<NUnitProject>\r\n\t<Settings appbase=\"./directoryOfCode\"/>\r\n\t<Config name=\"Default\" binpath=\"\" runtimeFramework=\"v2.0\">\r\n\t\t<assembly path=myDllName.dll />\r\n\t</Config>\r\n</NUnitProject>\r\n</code>\r\n  \r\nMy code to get the List of Categories using Nunit.\r\n\r\n<code class=\"java\">\r\npublic static ArrayList GetListOfCategories(Projects.App app)\r\n        {\r\n            ServiceManager.Services.AddService(new SettingsService());\r\n            ServiceManager.Services.AddService(new DomainManager());\r\n            ServiceManager.Services.AddService(new RecentFilesService());\r\n            ServiceManager.Services.AddService(new ProjectService());\r\n            ServiceManager.Services.AddService(new TestLoader(new GuiTestEventDispatcher()));\r\n            ServiceManager.Services.AddService(new AddinRegistry());\r\n            ServiceManager.Services.AddService(new AddinManager());\r\n            ServiceManager.Services.AddService(new TestAgency());\r\n\r\n            ServiceManager.Services.InitializeServices();\r\n\r\n            string fileName = Updater.convertAppToConfig(app);\r\n            ProjectConfig config = new ProjectConfig(fileName);\r\n\r\n            string nUnitProjectFileName = generateNUnitProjectFile(config.BaseDir, config.DllName, config.BuildDir);\r\n\r\n            TestLoader loader = new TestLoader();\r\n            loader.LoadProject(config.BaseDir + \"\\\\\" + nUnitProjectFileName);\r\n            loader.LoadTest(null);\r\n\r\n            if (loader.IsTestLoaded)\r\n            {\r\n                IList list = loader.GetCategories();\r\n                return (ArrayList) list;\r\n            }\r\n            throw new Exception(\"The TestLoader.LoadTest() did not succeed, therefore you cannot get the Categories.\\nError : \" + loader.LastException);\r\n        }\r\n</code>\r\n\r\n", 
      "date_updated": "2010-08-17 11:20:49", 
      "demo": "", 
      "markup": "h", 
      "title": "Get List of Categories from test assembly using NUnit", 
      "source_path": "", 
      "collection": 1, 
      "summary": "In NUnit, you can specify a category on a test method or test fixture.  I needed that list in a totally different context.  Here's how to do it.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-08-17 11:16:27", 
       
      "tags": "csharp nunit"
    }
  }, 
  {
    "pk": 348, 
    "model": "blog.article", 
    "fields": {
      "body": "The main documentation site: http://confluence.jetbrains.net/display/TCD5/TeamCity+Addin+for+NUnit\r\n\r\nBlog information: http://blogs.jetbrains.com/teamcity/2008/07/28/unfolding-teamcity-addin-for-nunit-secrets/\r\n\r\nThis turned out to be much easier than they indicated, but of course they try to handle multiple runners.  I am using the NUnit Console runner specifically.\r\n\r\nI added these properties to my NAnt default.build script:\r\n\r\n .. code-block :: xml\r\n\r\n  <property name=\"teamCityDir\" value=\"C:/TeamCity/buildAgent/plugins/dotnetPlugin/bin\"/>\r\n  <property name=\"nUnitAddinDir\" value=\"C:/Program Files/NUnit 2.5.5/bin/net-2.0/addins\"/>\r\n  <property name=\"teamcity.dotnet.nunitaddin\"  value=\"${teamCityDir}/JetBrains.TeamCity.NUnitAddin-NUnit\" />\r\n\r\n\r\n\r\n\r\nAnd then this target, making sure it ran before the test suite ran.\r\n\r\n .. code-block :: xml\r\n\r\n  <target name=\"prepareNUnitTeamCity\" >\r\n    <if test=\"${directory::exists('C:\\TeamCity')}\">\r\n      <echo message=\"Copying TeamCity Nunit files to Nunit addins directory\"/>\r\n      <copy todir=\"${nUnitAddinDir}\">\r\n        <fileset basedir=\"${teamCityDir}\" >\r\n          <include name=\"${teamcity.dotnet.nunitaddin}-2.5.5.*\" />\r\n        </fileset>\r\n      </copy>\r\n    </if>\r\n  </target>\r\n\r\n\r\n\r\nDone!", 
      "date_published": "2010-10-27 11:28:12", 
      "image_path": "", 
      "title_slug": "getting-nunit-fly-results-teamcity", 
      "rendered_body": "<p>The main documentation site: <a class=\"reference external\" href=\"http://confluence.jetbrains.net/display/TCD5/TeamCity+Addin+for+NUnit\">http://confluence.jetbrains.net/display/TCD5/TeamCity+Addin+for+NUnit</a></p>\n<p>Blog information: <a class=\"reference external\" href=\"http://blogs.jetbrains.com/teamcity/2008/07/28/unfolding-teamcity-addin-for-nunit-secrets/\">http://blogs.jetbrains.com/teamcity/2008/07/28/unfolding-teamcity-addin-for-nunit-secrets/</a></p>\n<p>This turned out to be much easier than they indicated, but of course they try to handle multiple runners.  I am using the NUnit Console runner specifically.</p>\n<p>I added these properties to my NAnt default.build script:</p>\n<blockquote>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&quot;teamCityDir&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;C:/TeamCity/buildAgent/plugins/dotnetPlugin/bin&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&quot;nUnitAddinDir&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;C:/Program Files/NUnit 2.5.5/bin/net-2.0/addins&quot;</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&quot;teamcity.dotnet.nunitaddin&quot;</span>  <span class=\"na\">value=</span><span class=\"s\">&quot;${teamCityDir}/JetBrains.TeamCity.NUnitAddin-NUnit&quot;</span> <span class=\"nt\">/&gt;</span>\n</pre></div>\n</div></blockquote>\n<p>And then this target, making sure it ran before the test suite ran.</p>\n<blockquote>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;target</span> <span class=\"na\">name=</span><span class=\"s\">&quot;prepareNUnitTeamCity&quot;</span> <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;if</span> <span class=\"na\">test=</span><span class=\"s\">&quot;${directory::exists(&#39;C:\\TeamCity&#39;)}&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;echo</span> <span class=\"na\">message=</span><span class=\"s\">&quot;Copying TeamCity Nunit files to Nunit addins directory&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;copy</span> <span class=\"na\">todir=</span><span class=\"s\">&quot;${nUnitAddinDir}&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;fileset</span> <span class=\"na\">basedir=</span><span class=\"s\">&quot;${teamCityDir}&quot;</span> <span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;include</span> <span class=\"na\">name=</span><span class=\"s\">&quot;${teamcity.dotnet.nunitaddin}-2.5.5.*&quot;</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/fileset&gt;</span>\n    <span class=\"nt\">&lt;/copy&gt;</span>\n  <span class=\"nt\">&lt;/if&gt;</span>\n<span class=\"nt\">&lt;/target&gt;</span>\n</pre></div>\n</div></blockquote>\n<p>Done!</p>\n", 
      "date_updated": "2010-12-27 12:42:10", 
      "demo": "", 
      "markup": "r", 
      "title": "Getting NUnit on the fly results with TeamCity", 
      "source_path": "", 
      "collection": 1, 
      "summary": "When running large test suites, it's useful to get results on the fly, rather than waiting until the suite completes to get results.  Some of my test suites take 20, 30+ hours to complete.  Here is how you can get immediate results using NUnit Console and TeamCity.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-10-27 11:32:33", 
       
      "tags": "nant nunit teamcity"
    }
  }, 
  {
    "pk": 381, 
    "model": "blog.article", 
    "fields": {
      "body": "Ebb and Flow\r\n------------\r\n\r\nProgrammers are lazy.  Designers are lazy.  I guess most people are, including those that are trying access our web content.  Historically, constraints, technical and cultural, made it easier for us to stay lazy as programmers and designers.  But now that you can view the web on screens many sizes and abilities, we can't live behind our naive constraints any more.  We must adapt or die -- that is, the exploding mobile web viewership will be lost to us and to our precious adwords.  Literally, if we don't adapt our designs, markup, and styles, it will break when viewed in a way that we didn't anticipate.\r\n\r\nThe Unstoppable Robot Ninja\r\n---------------------------\r\n\r\nIn May 2010, Ethan Marcotte introduced his `article on Responsive Design <http://www.alistapart.com/articles/responsive-web-design/>`_ at A List Apart.  I remember seeing the article pop up but obviously didn't realize the bodaciousness of the idea, because my ADD-prone website eyes couldn't finish the article.  (A List Apart articles are generally more well thought-out than the average blog muttering -- and longer!)  I first had my real exposure to the core ideas of responsive design at a webinar in Jan 2011.  Since then, I've dipped my toes in it a few times, and I like it.  The water's fine!  Come on in.  I really think it's a way to get some quick satisfaction that you're just a little closer to doing something -- anything -- for your mobile web users.\r\n\r\nIt's quick because the ideas are simple.  As Beep says, there are 3 main elements of responsive design:\r\n\r\n* Fluid grid\r\n* Flexible images\r\n* Media queries\r\n\r\nResponsive design seems to make people extremely... happy or mad.  Hehe.  I'm in the happy camp.  The mad camp seem to be those that believe that responsive design doesn't solve any real problems for mobile users.  I say, quit whining.  Take what good you can get from the ideas of responsive design and add something better to it.\r\n\r\nI personally think it's almost easiest to just create a static width, unresponsive site first and then convert it to use more responsive styles.  Why?  Because a design is usually static (PSD).  And you can create the dimensions and ratios just right before trying to make them react to their environment.  \r\n\r\nFluid Grid\r\n----------\r\n\r\nSo far, I've found myself ripping out blueprint, my previous static width grid system of choice and just doing my own thing.  Usually, the steps I follow are something close to this:\r\n\r\n1. Build with static widths\r\n2. Give max-width to outermost container and a percentage width\r\n3. Search for widths or px values in stylesheet (Include things like left-right margin/padding, absolute positioning)\r\n4. Comment each with:  current_width / container_width\r\n5. Divide, multiply by 100, use % instead of px (Take full precision.  Ugly, but more precise)\r\n6. Clean up -- figure out what shouldn't be variable width, instead fixed or mins, maxes\r\n\r\nNote that I am usually changing only the widths because we're expecting that we didn't set heights, so the ratios will adjust automatically, and because vertical scrolling is acceptable and normal.\r\n\r\nFluid Images\r\n------------\r\n\r\nReally, most of the designs that I've converted to be responsive don't have images that go beyond their container's minimum width.  So, I haven't made my images of fluid width.  But, the idea with images is the same as the grid.  Set the width to be a percentage and probably some max-width as well.\r\n\r\nMedia Queries\r\n-------------\r\n\r\nThese babies have been with us for a while (why, then, \"babies\"?), but it hasn't been long since we've started using them for responsive designs.  You've seen many a link to a stylesheet that specifies media=\"screen\".  Well, now we'll add some compound logic and specify something about the screen or device dimensions.\r\n\r\nSteps I usually follow for media query creation:\r\n\r\n1. Choose your thresholds - I prefer simple lrg, med, sm versions\r\n2. Use max-width on media query  (Put smallest at the bottom, so it will inherit all the attributes of the lrg and med stylesheets -- this cuts down on specific number of attributes in smaller dimension's stylesheets.)\r\n3. Add viewport initial scale meta tag\r\n4. Adjust elements that need to be different in smaller versions\r\n\r\nMy favorite combonation is usually 3 threshold sizes, approximately corresponding with a smartphone, tablet, and desktop-size screen.  I also tend to favor screen size queries instead of device mins and maxes.  It just seems more simple to me, and I don't have to know too much about devices. (And I don't -- they're too expensive. :)  Something like this (used for rockycode):\r\n\r\n.. code-block:: html\r\n\r\n\t<link rel=\"stylesheet\" href=\"media/styles/style-lrg.css\" media=\"screen\" />\r\n\t<link rel=\"stylesheet\" href=\"media/styles/style-med.css\" media=\"screen and (max-width:1023px)\" />\r\n\t<link rel=\"stylesheet\" href=\"media/styles/style-sm.css\" media=\"screen and (max-width: 639px)\" />\r\n\r\nThe max-widths are quite arbitrary and are really up to you.  I don't know if anyone's nailed down the \"best\" thresholds to make your media query jumps.  I tend to think it really depends on the vision for the site use and your main content.  How is that going to be best viewed?  And that potentially changes quite a bit between sites.\r\n\r\nNow add this gem to make sure that you get no zoom out action happening when you load up your site on a small mobile screen that has a browser too smart for its britches:\r\n\r\n.. code-block:: html\r\n\r\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\r\nVoila!  That's really it.  At least it's as awesome as I'm making any of my sites right now.  I'm sure I have much kung fu to learn.  Again, I'm happy because it's something, and it gets me excited to learn more because it's easy and with a cool effect.  If you want to learn more, there are resources a plenty -- so many that someone needs to make a resource to compile a list of other resources.  And Beep's new book is out in a month.  Oh, then what awesome shalt be spewn forth upon the responsive web!\r\n\r\nOther Musings\r\n-------------\r\n\r\n* Images are easier to resize if they're <img /> instead of background-images\r\n* Limitation - using media queries only, content like a sidebar is only going to flowable on top of on bottom of the main content\r\n* Flow can get messed up quickly.  Things that were floated side by side might now be one on top of the other.  Have to look at adjusting top/bottom margin, etc (eg, the article tags on rockycode)\r\n* Inline styles are not your friends for media queries.  Can't override.  Unless you use !important, then it feels messy.\r\n* Responsive design makes you question where you put things in the markup.  If things are related to one another, they probably belong beside one another in the markup.  (eg, the clear filter link on rockycode that ended up at the bottom of the page)\r\n* Just because your design is fluid doesn't mean it'll show up well in mobile browsers as your small-windowed desktop browser.  Mobile browsers have their own quirks too.  Test.\r\n\r\nBurning Horizons\r\n----------------\r\n\r\n* Images - background-image flexibility\r\n* Fonts - not quite as directly adjustable by screen dimension\r\n* Forms, apps - everyone's belly-aching about this; what's the deal?\r\n* Small js frameworks- network latent device friendly replacements for monolith frameworks\r\n* Flexible grid systems - might not have to roll my own for much longer\r\n* User generated content -- accomodating for what's not on the site at launch.\r\n* Modernizr - device feature availability mixed with media query awesome\r\n\r\nFinal Gem\r\n------------\r\n\r\n\"At some point, everything breaks.  (But it's okay!  Really!)\" - Ethan Marcotte, respected founding father of the responsive web\r\n\r\nA File for a Workshop\r\n---------------------\r\n\r\n`responsive.zip <https://bitbucket.org/jtsnake/rockycode/downloads/responsive.zip>`_ - static html version of an example article from this site roughly corresponding to a revision that was not responsive (`r124 <https://bitbucket.org/jtsnake/rockycode/changeset/6d4d197239da>`_), ready for some coding to advance to the responsive revision (`r136 <https://bitbucket.org/jtsnake/rockycode/changeset/fc4d96ec91f2>`_).", 
      "date_published": "2011-05-18 20:45:08", 
      "image_path": "", 
      "title_slug": "greater-flexibility-with-responsive-design", 
      "rendered_body": "<div class=\"section\" id=\"ebb-and-flow\">\n<h1>Ebb and Flow</h1>\n<p>Programmers are lazy.  Designers are lazy.  I guess most people are, including those that are trying access our web content.  Historically, constraints, technical and cultural, made it easier for us to stay lazy as programmers and designers.  But now that you can view the web on screens many sizes and abilities, we can't live behind our naive constraints any more.  We must adapt or die -- that is, the exploding mobile web viewership will be lost to us and to our precious adwords.  Literally, if we don't adapt our designs, markup, and styles, it will break when viewed in a way that we didn't anticipate.</p>\n</div>\n<div class=\"section\" id=\"the-unstoppable-robot-ninja\">\n<h1>The Unstoppable Robot Ninja</h1>\n<p>In May 2010, Ethan Marcotte introduced his <a class=\"reference external\" href=\"http://www.alistapart.com/articles/responsive-web-design/\">article on Responsive Design</a> at A List Apart.  I remember seeing the article pop up but obviously didn't realize the bodaciousness of the idea, because my ADD-prone website eyes couldn't finish the article.  (A List Apart articles are generally more well thought-out than the average blog muttering -- and longer!)  I first had my real exposure to the core ideas of responsive design at a webinar in Jan 2011.  Since then, I've dipped my toes in it a few times, and I like it.  The water's fine!  Come on in.  I really think it's a way to get some quick satisfaction that you're just a little closer to doing something -- anything -- for your mobile web users.</p>\n<p>It's quick because the ideas are simple.  As Beep says, there are 3 main elements of responsive design:</p>\n<ul class=\"simple\">\n<li>Fluid grid</li>\n<li>Flexible images</li>\n<li>Media queries</li>\n</ul>\n<p>Responsive design seems to make people extremely... happy or mad.  Hehe.  I'm in the happy camp.  The mad camp seem to be those that believe that responsive design doesn't solve any real problems for mobile users.  I say, quit whining.  Take what good you can get from the ideas of responsive design and add something better to it.</p>\n<p>I personally think it's almost easiest to just create a static width, unresponsive site first and then convert it to use more responsive styles.  Why?  Because a design is usually static (PSD).  And you can create the dimensions and ratios just right before trying to make them react to their environment.</p>\n</div>\n<div class=\"section\" id=\"fluid-grid\">\n<h1>Fluid Grid</h1>\n<p>So far, I've found myself ripping out blueprint, my previous static width grid system of choice and just doing my own thing.  Usually, the steps I follow are something close to this:</p>\n<ol class=\"arabic simple\">\n<li>Build with static widths</li>\n<li>Give max-width to outermost container and a percentage width</li>\n<li>Search for widths or px values in stylesheet (Include things like left-right margin/padding, absolute positioning)</li>\n<li>Comment each with:  current_width / container_width</li>\n<li>Divide, multiply by 100, use % instead of px (Take full precision.  Ugly, but more precise)</li>\n<li>Clean up -- figure out what shouldn't be variable width, instead fixed or mins, maxes</li>\n</ol>\n<p>Note that I am usually changing only the widths because we're expecting that we didn't set heights, so the ratios will adjust automatically, and because vertical scrolling is acceptable and normal.</p>\n</div>\n<div class=\"section\" id=\"fluid-images\">\n<h1>Fluid Images</h1>\n<p>Really, most of the designs that I've converted to be responsive don't have images that go beyond their container's minimum width.  So, I haven't made my images of fluid width.  But, the idea with images is the same as the grid.  Set the width to be a percentage and probably some max-width as well.</p>\n</div>\n<div class=\"section\" id=\"media-queries\">\n<h1>Media Queries</h1>\n<p>These babies have been with us for a while (why, then, &quot;babies&quot;?), but it hasn't been long since we've started using them for responsive designs.  You've seen many a link to a stylesheet that specifies media=&quot;screen&quot;.  Well, now we'll add some compound logic and specify something about the screen or device dimensions.</p>\n<p>Steps I usually follow for media query creation:</p>\n<ol class=\"arabic simple\">\n<li>Choose your thresholds - I prefer simple lrg, med, sm versions</li>\n<li>Use max-width on media query  (Put smallest at the bottom, so it will inherit all the attributes of the lrg and med stylesheets -- this cuts down on specific number of attributes in smaller dimension's stylesheets.)</li>\n<li>Add viewport initial scale meta tag</li>\n<li>Adjust elements that need to be different in smaller versions</li>\n</ol>\n<p>My favorite combonation is usually 3 threshold sizes, approximately corresponding with a smartphone, tablet, and desktop-size screen.  I also tend to favor screen size queries instead of device mins and maxes.  It just seems more simple to me, and I don't have to know too much about devices. (And I don't -- they're too expensive. :)  Something like this (used for rockycode):</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;media/styles/style-lrg.css&quot;</span> <span class=\"na\">media=</span><span class=\"s\">&quot;screen&quot;</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;media/styles/style-med.css&quot;</span> <span class=\"na\">media=</span><span class=\"s\">&quot;screen and (max-width:1023px)&quot;</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;media/styles/style-sm.css&quot;</span> <span class=\"na\">media=</span><span class=\"s\">&quot;screen and (max-width: 639px)&quot;</span> <span class=\"nt\">/&gt;</span>\n</pre></div>\n</div><p>The max-widths are quite arbitrary and are really up to you.  I don't know if anyone's nailed down the &quot;best&quot; thresholds to make your media query jumps.  I tend to think it really depends on the vision for the site use and your main content.  How is that going to be best viewed?  And that potentially changes quite a bit between sites.</p>\n<p>Now add this gem to make sure that you get no zoom out action happening when you load up your site on a small mobile screen that has a browser too smart for its britches:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">&quot;viewport&quot;</span> <span class=\"na\">content=</span><span class=\"s\">&quot;width=device-width, initial-scale=1.0&quot;</span><span class=\"nt\">&gt;</span>\n</pre></div>\n</div><p>Voila!  That's really it.  At least it's as awesome as I'm making any of my sites right now.  I'm sure I have much kung fu to learn.  Again, I'm happy because it's something, and it gets me excited to learn more because it's easy and with a cool effect.  If you want to learn more, there are resources a plenty -- so many that someone needs to make a resource to compile a list of other resources.  And Beep's new book is out in a month.  Oh, then what awesome shalt be spewn forth upon the responsive web!</p>\n</div>\n<div class=\"section\" id=\"other-musings\">\n<h1>Other Musings</h1>\n<ul class=\"simple\">\n<li>Images are easier to resize if they're &lt;img /&gt; instead of background-images</li>\n<li>Limitation - using media queries only, content like a sidebar is only going to flowable on top of on bottom of the main content</li>\n<li>Flow can get messed up quickly.  Things that were floated side by side might now be one on top of the other.  Have to look at adjusting top/bottom margin, etc (eg, the article tags on rockycode)</li>\n<li>Inline styles are not your friends for media queries.  Can't override.  Unless you use !important, then it feels messy.</li>\n<li>Responsive design makes you question where you put things in the markup.  If things are related to one another, they probably belong beside one another in the markup.  (eg, the clear filter link on rockycode that ended up at the bottom of the page)</li>\n<li>Just because your design is fluid doesn't mean it'll show up well in mobile browsers as your small-windowed desktop browser.  Mobile browsers have their own quirks too.  Test.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"burning-horizons\">\n<h1>Burning Horizons</h1>\n<ul class=\"simple\">\n<li>Images - background-image flexibility</li>\n<li>Fonts - not quite as directly adjustable by screen dimension</li>\n<li>Forms, apps - everyone's belly-aching about this; what's the deal?</li>\n<li>Small js frameworks- network latent device friendly replacements for monolith frameworks</li>\n<li>Flexible grid systems - might not have to roll my own for much longer</li>\n<li>User generated content -- accomodating for what's not on the site at launch.</li>\n<li>Modernizr - device feature availability mixed with media query awesome</li>\n</ul>\n</div>\n<div class=\"section\" id=\"final-gem\">\n<h1>Final Gem</h1>\n<p>&quot;At some point, everything breaks.  (But it's okay!  Really!)&quot; - Ethan Marcotte, respected founding father of the responsive web</p>\n</div>\n<div class=\"section\" id=\"a-file-for-a-workshop\">\n<h1>A File for a Workshop</h1>\n<p><a class=\"reference external\" href=\"https://bitbucket.org/jtsnake/rockycode/downloads/responsive.zip\">responsive.zip</a> - static html version of an example article from this site roughly corresponding to a revision that was not responsive (<a class=\"reference external\" href=\"https://bitbucket.org/jtsnake/rockycode/changeset/6d4d197239da\">r124</a>), ready for some coding to advance to the responsive revision (<a class=\"reference external\" href=\"https://bitbucket.org/jtsnake/rockycode/changeset/fc4d96ec91f2\">r136</a>).</p>\n</div>\n", 
      "date_updated": "2011-05-19 09:39:28", 
      "demo": "", 
      "markup": "r", 
      "title": "Greater Flexibility with Responsive Design", 
      "source_path": "", 
      "collection": 1, 
      "summary": "With the advent of mobile devices, tablets, and screens attached to your toaster, we as web developers -- er, ninjas -- can no longer be ok with creating markup and styles that only appear properly in a traditional desktop environment.  Well, I guess we could, but we'd soon be defeated by much more gnarly ninjas.  Based on work and ideas of the Unstoppable Robot Ninja himself, your css dexterity is sure to reach levels of cosmic explosion by reviewing just a few principles of responsive design.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-05-18 20:46:13", 
       
      "tags": "css design html responsive-design"
    }
  }, 
  {
    "pk": 332, 
    "model": "blog.article", 
    "fields": {
      "body": "Consider the following groovy code:\r\n<code lang=\"java\">\r\na = 9\r\nb = 14\r\nassert 4 == a-b\r\n</code>\r\nIn pre-1.7 Groovy, you could still do this, but you'd get an AssertionError exception thrown. Works, but muddies the waters, so to speak.\r\nConsider the output when you run this code using 1.7 Groovy. You still get an exception stack trace, but also this:\r\n<code lang=\"java\">\r\nAssertion failed: \r\n\r\nassert 4 == a - b\r\n         |  | | |\r\n         |  9 | 14\r\n         |    -5\r\n         false\r\n\r\n</code>\r\nSweet corn! Easy to read, expressive, and powerful. Oh, I'm feeling it.", 
      "date_published": "2010-08-06 12:29:26", 
      "image_path": "", 
      "title_slug": "groovy-17-power-asserts", 
      "rendered_body": "Consider the following groovy code:\r\n<code lang=\"java\">\r\na = 9\r\nb = 14\r\nassert 4 == a-b\r\n</code>\r\nIn pre-1.7 Groovy, you could still do this, but you'd get an AssertionError exception thrown. Works, but muddies the waters, so to speak.\r\nConsider the output when you run this code using 1.7 Groovy. You still get an exception stack trace, but also this:\r\n<code lang=\"java\">\r\nAssertion failed: \r\n\r\nassert 4 == a - b\r\n         |  | | |\r\n         |  9 | 14\r\n         |    -5\r\n         false\r\n\r\n</code>\r\nSweet corn! Easy to read, expressive, and powerful. Oh, I'm feeling it.", 
      "date_updated": "2010-08-06 13:04:12", 
      "demo": "", 
      "markup": "h", 
      "title": "Groovy 1.7 power asserts", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Asserts were a breath of fresh air sweeping over the JVM landscape with Groovy. Now, feel the power of Groovy 1.7's power asserts!", 
      "source": "", 
      "user": 6, 
      "active": true, 
      "date_created": "2010-08-06 12:34:08", 
       
      "tags": "groovy"
    }
  }, 
  {
    "pk": 354, 
    "model": "blog.article", 
    "fields": {
      "body": ".. image:: http://www.brehmcenter.com/mediafiles/a-whole-new-mind-why-right-brainers-will-rule-the-future.jpg\r\n   :align: left\r\n\r\nPink does, I think, a good job laying out his case.  His book is well organized, and the voice is engaging and conversational.  I do get a little tongue-tied reading this book aloud, however, if I'm wanting to share a particularly riveting passage about neuroscience with my wife because of all the lengthy doctor titles or lofty names of research institutions that produced many of the ideas that Pink compiles in his book.  It is, in large part, a compilation, but I think he weaves it together into a compelling narrative.  \r\n\r\nHis thesis?  There are three things that will drive you to needing the right side of your brain to succeed in business during the coming years, dubbed the Conceptual Age:\r\n\r\n1. Abundance\r\n2. Asia\r\n3. Automation\r\n\r\nAbundance\r\n---------\r\n\r\nThe world, particularly the Western world, is more affluent than at any other point in history.  We essentially have everything that we can imagine ourselves needing or wanting.  (And yet somehow we always manage to want more -- interesting.)  So, when we go to the store to buy a toaster, we don't have just one option, but many models grace the shelves with many features.  We now can move above just favoring function for favoring form.  I *will* have a toaster, because they're so cheap;  everyone has one;  but, mine will appeal to me as whimsical or trendy.\r\n\r\nAsia\r\n----\r\n\r\nDuring the past decades, left-brain or L-directed thinking has been of the highest value -- this consists mathematical, analytical, logic-type thinking.  Now, there are many, many more people than there used to be in the Eastern world that have education levels that equal or exceed ours in the U.S. and who are willing to perform the work at a much lower cost.\r\n\r\nAutomation\r\n----------\r\n\r\nI witness this at work every day.  Jobs that simply consist of performing a regiment of repeatable steps can be done my a computer -- and much more quickly and accurately.\r\n\r\nSo, what can we do to counteract these 3 factors of change?  We must constantly evolve:\r\n\r\n\tThe forces of Abundance, Asia, and Automation turn goods and services into commodities so quickly that the only way to survive is by constantly developing new innovations, inventing new categories, and (in Paola Antonelli's lovely phrase) giving the world something it didn't know it was missing. (Pink, 81)\r\n\r\nPink uses the balance of the book to present these ideas.  He calls them \"high touch\" concepts.  They are:  \r\n\r\n1. Design\r\n2. Story\r\n3. Symphony\r\n4. Empathy\r\n5. Play\r\n6. Meaning\r\n\r\nThese are all innately human traits that we all have existing levels of experience and comfort in using.  But, the argument is that the need is even greater now, given our changing business environment and need to stay competitve, that we exercise them to greater levels of deftness.  And apparently I, in a stereotypical L-directed line of work, need all the help I can get:\r\n\r\n\tGo back to those Information Age rock stars, computer programmers.  The outsourcing of routine software work is putting a new premium on software engineers with high-concept abilities.  As the [Indians] of the world take over the routine work of software fabrication, maintenance, testing, and upgrading, Conceptual AGe software types will concentrate on novelty and nuance.  After all, before the Indian programmers have something to fabricate, maintain, test, or upgrade, that something first must be imagined or invented.  And these creations must the be explained and tailored to customers and entered into the swirl of commerce, all of which requires aptitudes that can't be reduced to a set of rules on a spec sheet -- ingenuity, personal rapport, and gut instinct. (57)\r\n\r\nDesign\r\n------\r\n\r\nI think this is one of the most fun concepts.  This speaks the most to the factor of abundance affecting how people choose which products or services they will consume.  These products must now be attractive and unique compared to all the other options that exist, because there are simply so many repeat/knock-off ideas.  People will decide what most matches their personality and preferences.  And so go to town.  Make something particularly impressive.  New covers on old books are valuable if what was in the book was originally valuable but under-valued.  The mediums for design these days are virtually limitless, allowing production of about anything one can imagine.\r\n\r\nStory\r\n-----\r\n\r\nIn this age, where information for everything is so readily available, it will not be enough to merely declare features or services in a series of bulleted highlights.  In order to more effectly show how people will be affected by what you have to offer, narratives in the style of testimonials of real people will become more important.  People are compelled by a good narrative.  Story-telling is a skill that is being increasingly taught in business courses.  Most people have been affected by the telling of stories since a very young age.  Our predisposition to being caught up in a good plot continues to be shown in our obsession with media.  These same story-telling techniques can be used to make what we create more attractive and compelling.\r\n\r\nSymphony\r\n--------\r\n\r\nSymphony relates to how we can process the big picture in our minds.  A conductor in an orchestra isn't making any of the sounds at all, he's merely feeling out the mood of the music and then pulling more volume and expression out or decreasing decibals and suggesting subtleness, to convey that musical mural to the minds of many making up the audience.  Hehe.  \r\n\r\n\tSuccessful individuals and organizations must be relentless.  They must focus maniacally on invention -- while outsourcing or automating much of the execution.  This requires those with the ability and fortitude to experiment with novel combinations and to make the many mistakes that inevitably come with an inspiration-centered approach. (138)\r\n\r\nDrawing is an interesting example of symphony in action.  Drawing is essentially an observation of shapes and their relationship to each other in size and space.  Some shapes are not even distinctly shapes by themselves at all, but rather they are implicit shapes -- negative space formed from the shapes by which they are surrounded.  We need to be able to see these negative spaces in our world and be able to fill them with interesting combinations of the existing products and services around them.\r\n\r\nEmpathy\r\n-------\r\n\r\nWe need to be able to experience the feelings of those that we serve or design products for.  In this way, we'll be able to more closely match what their real needs are and be able to, for instance, relieve some pain of their every day work with greater accuracy because we're trying to fit into their shoes.  Being more attune to the fears, sorrows, joys, or excitement of specific customers or the greater market in general will allow us to react more quickly to opportunities to fill their needs with great business ideas.\r\n\r\nPlay\r\n----\r\n\r\nStudying the work ethic and production of people over time, it has been discovered (and perhaps now obviously so) that people do their best work when they're doing something they love and having a good time with it.  This shouldn't come as a surprise, but then maybe we should be surprised considering many companies' cultures still encourage the stoic business brow that graces many a conference room table.  I'm not sure what the draw to the business brow is.  Perhaps by being so serious we want to be \"taken seriously\".  Atmospheres that foster more creativity and free-thought and discussion are likely those that are more light-hearted and less brow-beating.\r\n\r\n\tIt's time to rescue humor from its status as mere entertainment and recognize it for what it is -- a sophisticated and peculiarly human form of intelligence that can't be replicated by computers and that is becoming increasingly valuable in a high-concept, high-touch world. (199)\r\n\r\nMeaning\r\n-------\r\n\r\nI enjoy working for a good cause as much as the next person.  And, in fact, I have the great pleasure of putting my shoulder to the wheel in what I consider the greatest of causes every day.  I was a little sceptical about this high-touch concept, however, because I feel that work is something that must be done regardless for the sustinence of myself and my family.  But, as Pink described what he means by \"meaning\", some of the things that have befuddled me in my observation of the current day became a little clearer.  \r\n\r\nCurrent day abundance has really brought us out of having to live day-to-day.  The vast majority have what they need to survive and are thus freed to go beyond survival and focus on things that provide extra depth to what they do.  This allows their work to leave them more fulfilled and more willing to do extra challenging work extra well.\r\n\r\n\tThe paradox of prosperity is that while living standards have risen steadily decade after decade, personal, family, and life satisfaction haven't budged.  That's why more people -- liberated by propserity but not fulfilled by it -- are resolving the paradox by searching fror meaning.  (35)\r\n\t\r\n\tFreed from the struggle for survival, we have the luxury of devoting more of our lives to the search for meaning. (218)\r\n\t\r\n\tMeantime, technology continues its unrelenting march, deluging us with data and choking us with choirces.  All these forces have gathered into a perfect storm of circumstances that is making the search for meaning more possible and the will to find meaning the sixth essential aptitude of the Conceptual Age. (218)\r\n\t\r\n\tGregg Easterbrook ... puts it more boldly: 'A transition from material want to meaning want is in progress on an historically unprecented scale -- involving hundresds of millions of people -- and may eventually be recognized as the principal cultural development of our age.' (219)\r\n\t\r\n\tMitroff and Denton also found that companies that acknowledged spiritual values and aligned them with company goals outperformed those that did not.  In other words, letting spirituality into the workplace didn't distract organizations from their goals.   It often helped them reach those goals. (224)\r\n\t\r\nAfter consideration of these, some of my favorite excerpts, I am extremely excited about the opportunities, if not challenges, that the age of abundance has allowed us to experience.  Meaning can indeed bring greater possibilities of happiness and fulfillment into our lives.\r\n\r\n\r\nAnd indeed, all the factors of change that we're experiencing -- Abudance, Asia, and Automation -- will push the boundaries of what we are personally able to accomplish.  Our now-honed L-directed thinking mixed with R-directed concepts that we're striving to exercise will create in us creative and pragmatic inventors of the great products and services of the coming decades.  It's gonna be blasted fun!", 
      "date_published": "2010-11-08 19:37:04", 
      "image_path": "", 
      "title_slug": "growing-a-whole-new-mind", 
      "rendered_body": "<img alt=\"http://www.brehmcenter.com/mediafiles/a-whole-new-mind-why-right-brainers-will-rule-the-future.jpg\" class=\"align-left\" src=\"http://www.brehmcenter.com/mediafiles/a-whole-new-mind-why-right-brainers-will-rule-the-future.jpg\" />\n<p>Pink does, I think, a good job laying out his case.  His book is well organized, and the voice is engaging and conversational.  I do get a little tongue-tied reading this book aloud, however, if I'm wanting to share a particularly riveting passage about neuroscience with my wife because of all the lengthy doctor titles or lofty names of research institutions that produced many of the ideas that Pink compiles in his book.  It is, in large part, a compilation, but I think he weaves it together into a compelling narrative.</p>\n<p>His thesis?  There are three things that will drive you to needing the right side of your brain to succeed in business during the coming years, dubbed the Conceptual Age:</p>\n<ol class=\"arabic simple\">\n<li>Abundance</li>\n<li>Asia</li>\n<li>Automation</li>\n</ol>\n<div class=\"section\" id=\"abundance\">\n<h1>Abundance</h1>\n<p>The world, particularly the Western world, is more affluent than at any other point in history.  We essentially have everything that we can imagine ourselves needing or wanting.  (And yet somehow we always manage to want more -- interesting.)  So, when we go to the store to buy a toaster, we don't have just one option, but many models grace the shelves with many features.  We now can move above just favoring function for favoring form.  I <em>will</em> have a toaster, because they're so cheap;  everyone has one;  but, mine will appeal to me as whimsical or trendy.</p>\n</div>\n<div class=\"section\" id=\"asia\">\n<h1>Asia</h1>\n<p>During the past decades, left-brain or L-directed thinking has been of the highest value -- this consists mathematical, analytical, logic-type thinking.  Now, there are many, many more people than there used to be in the Eastern world that have education levels that equal or exceed ours in the U.S. and who are willing to perform the work at a much lower cost.</p>\n</div>\n<div class=\"section\" id=\"automation\">\n<h1>Automation</h1>\n<p>I witness this at work every day.  Jobs that simply consist of performing a regiment of repeatable steps can be done my a computer -- and much more quickly and accurately.</p>\n<p>So, what can we do to counteract these 3 factors of change?  We must constantly evolve:</p>\n<blockquote>\nThe forces of Abundance, Asia, and Automation turn goods and services into commodities so quickly that the only way to survive is by constantly developing new innovations, inventing new categories, and (in Paola Antonelli's lovely phrase) giving the world something it didn't know it was missing. (Pink, 81)</blockquote>\n<p>Pink uses the balance of the book to present these ideas.  He calls them &quot;high touch&quot; concepts.  They are:</p>\n<ol class=\"arabic simple\">\n<li>Design</li>\n<li>Story</li>\n<li>Symphony</li>\n<li>Empathy</li>\n<li>Play</li>\n<li>Meaning</li>\n</ol>\n<p>These are all innately human traits that we all have existing levels of experience and comfort in using.  But, the argument is that the need is even greater now, given our changing business environment and need to stay competitve, that we exercise them to greater levels of deftness.  And apparently I, in a stereotypical L-directed line of work, need all the help I can get:</p>\n<blockquote>\nGo back to those Information Age rock stars, computer programmers.  The outsourcing of routine software work is putting a new premium on software engineers with high-concept abilities.  As the [Indians] of the world take over the routine work of software fabrication, maintenance, testing, and upgrading, Conceptual AGe software types will concentrate on novelty and nuance.  After all, before the Indian programmers have something to fabricate, maintain, test, or upgrade, that something first must be imagined or invented.  And these creations must the be explained and tailored to customers and entered into the swirl of commerce, all of which requires aptitudes that can't be reduced to a set of rules on a spec sheet -- ingenuity, personal rapport, and gut instinct. (57)</blockquote>\n</div>\n<div class=\"section\" id=\"design\">\n<h1>Design</h1>\n<p>I think this is one of the most fun concepts.  This speaks the most to the factor of abundance affecting how people choose which products or services they will consume.  These products must now be attractive and unique compared to all the other options that exist, because there are simply so many repeat/knock-off ideas.  People will decide what most matches their personality and preferences.  And so go to town.  Make something particularly impressive.  New covers on old books are valuable if what was in the book was originally valuable but under-valued.  The mediums for design these days are virtually limitless, allowing production of about anything one can imagine.</p>\n</div>\n<div class=\"section\" id=\"story\">\n<h1>Story</h1>\n<p>In this age, where information for everything is so readily available, it will not be enough to merely declare features or services in a series of bulleted highlights.  In order to more effectly show how people will be affected by what you have to offer, narratives in the style of testimonials of real people will become more important.  People are compelled by a good narrative.  Story-telling is a skill that is being increasingly taught in business courses.  Most people have been affected by the telling of stories since a very young age.  Our predisposition to being caught up in a good plot continues to be shown in our obsession with media.  These same story-telling techniques can be used to make what we create more attractive and compelling.</p>\n</div>\n<div class=\"section\" id=\"symphony\">\n<h1>Symphony</h1>\n<p>Symphony relates to how we can process the big picture in our minds.  A conductor in an orchestra isn't making any of the sounds at all, he's merely feeling out the mood of the music and then pulling more volume and expression out or decreasing decibals and suggesting subtleness, to convey that musical mural to the minds of many making up the audience.  Hehe.</p>\n<blockquote>\nSuccessful individuals and organizations must be relentless.  They must focus maniacally on invention -- while outsourcing or automating much of the execution.  This requires those with the ability and fortitude to experiment with novel combinations and to make the many mistakes that inevitably come with an inspiration-centered approach. (138)</blockquote>\n<p>Drawing is an interesting example of symphony in action.  Drawing is essentially an observation of shapes and their relationship to each other in size and space.  Some shapes are not even distinctly shapes by themselves at all, but rather they are implicit shapes -- negative space formed from the shapes by which they are surrounded.  We need to be able to see these negative spaces in our world and be able to fill them with interesting combinations of the existing products and services around them.</p>\n</div>\n<div class=\"section\" id=\"empathy\">\n<h1>Empathy</h1>\n<p>We need to be able to experience the feelings of those that we serve or design products for.  In this way, we'll be able to more closely match what their real needs are and be able to, for instance, relieve some pain of their every day work with greater accuracy because we're trying to fit into their shoes.  Being more attune to the fears, sorrows, joys, or excitement of specific customers or the greater market in general will allow us to react more quickly to opportunities to fill their needs with great business ideas.</p>\n</div>\n<div class=\"section\" id=\"play\">\n<h1>Play</h1>\n<p>Studying the work ethic and production of people over time, it has been discovered (and perhaps now obviously so) that people do their best work when they're doing something they love and having a good time with it.  This shouldn't come as a surprise, but then maybe we should be surprised considering many companies' cultures still encourage the stoic business brow that graces many a conference room table.  I'm not sure what the draw to the business brow is.  Perhaps by being so serious we want to be &quot;taken seriously&quot;.  Atmospheres that foster more creativity and free-thought and discussion are likely those that are more light-hearted and less brow-beating.</p>\n<blockquote>\nIt's time to rescue humor from its status as mere entertainment and recognize it for what it is -- a sophisticated and peculiarly human form of intelligence that can't be replicated by computers and that is becoming increasingly valuable in a high-concept, high-touch world. (199)</blockquote>\n</div>\n<div class=\"section\" id=\"meaning\">\n<h1>Meaning</h1>\n<p>I enjoy working for a good cause as much as the next person.  And, in fact, I have the great pleasure of putting my shoulder to the wheel in what I consider the greatest of causes every day.  I was a little sceptical about this high-touch concept, however, because I feel that work is something that must be done regardless for the sustinence of myself and my family.  But, as Pink described what he means by &quot;meaning&quot;, some of the things that have befuddled me in my observation of the current day became a little clearer.</p>\n<p>Current day abundance has really brought us out of having to live day-to-day.  The vast majority have what they need to survive and are thus freed to go beyond survival and focus on things that provide extra depth to what they do.  This allows their work to leave them more fulfilled and more willing to do extra challenging work extra well.</p>\n<blockquote>\n<p>The paradox of prosperity is that while living standards have risen steadily decade after decade, personal, family, and life satisfaction haven't budged.  That's why more people -- liberated by propserity but not fulfilled by it -- are resolving the paradox by searching fror meaning.  (35)</p>\n<p>Freed from the struggle for survival, we have the luxury of devoting more of our lives to the search for meaning. (218)</p>\n<p>Meantime, technology continues its unrelenting march, deluging us with data and choking us with choirces.  All these forces have gathered into a perfect storm of circumstances that is making the search for meaning more possible and the will to find meaning the sixth essential aptitude of the Conceptual Age. (218)</p>\n<p>Gregg Easterbrook ... puts it more boldly: 'A transition from material want to meaning want is in progress on an historically unprecented scale -- involving hundresds of millions of people -- and may eventually be recognized as the principal cultural development of our age.' (219)</p>\n<p>Mitroff and Denton also found that companies that acknowledged spiritual values and aligned them with company goals outperformed those that did not.  In other words, letting spirituality into the workplace didn't distract organizations from their goals.   It often helped them reach those goals. (224)</p>\n</blockquote>\n<p>After consideration of these, some of my favorite excerpts, I am extremely excited about the opportunities, if not challenges, that the age of abundance has allowed us to experience.  Meaning can indeed bring greater possibilities of happiness and fulfillment into our lives.</p>\n<p>And indeed, all the factors of change that we're experiencing -- Abudance, Asia, and Automation -- will push the boundaries of what we are personally able to accomplish.  Our now-honed L-directed thinking mixed with R-directed concepts that we're striving to exercise will create in us creative and pragmatic inventors of the great products and services of the coming decades.  It's gonna be blasted fun!</p>\n</div>\n", 
      "date_updated": "2010-11-10 07:52:44", 
      "demo": "", 
      "markup": "r", 
      "title": "Growing a Whole New Mind", 
      "source_path": "", 
      "collection": 1, 
      "summary": "I recently finished reading a great book by Daniel Pink, A Whole New Mind: Why Right-Brainers Will Rule the Future.  Naturally, I wanted to determine what my coming destiny was.  I guess I already knew that if I painted the closet, I would be my wife's hero and would get to enjoy some succulent dinner in order to recupe my energy.  And I believe that in the (perhaps) distant future, unless I meet an unexpected end, we can all attain great reward and glory.  But, in terms of a decade from now, wondering how my career would look and what kind of skills would be appreciable to employers, I picked up this book.  How right-brained am I?  And how does one go about ruling?  ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-11-08 19:37:48", 
       
      "tags": "career-building design evolution"
    }
  }, 
  {
    "pk": 361, 
    "model": "blog.article", 
    "fields": {
      "body": "First, I have only tested this with JQuery.  I found articles talking about the .NET AjaxToolkit, but that didn't apply to me.\r\n\r\nSecond, we are using 2 different automation frameworks. WatiN and Webdriver/Selenium2.  Both frameworks give us the ability to inject javascript on the page.  This is vital to making this solution work.\r\n\r\nPrior to a Click() event in your automation, you need to run a javascript command.\r\n<code class='java'>\r\n$(document).bind(\\\"ajaxStart\\\", function() {$(\\\"body\\\").append(\\\"<div id='ajaxhidden' style='display:none;'></div>\\\");}).bind(\\\"ajaxStop\\\", function() {$('#ajaxhidden').remove();});\r\n</code>\r\n\r\nThis call will insert a hidden DIV on the page when the \"ajaxStart\" event is fired.\r\n\r\nWhen the Click() is fired, if an AJAX call is initiated, this script will run, inserting that hidden div.  The automation will then just check to see if the hidden DIV is present.  As long as the DIV is on the page, it will wait until the AJAX call has finished.  When done, it removes the hidden DIV.\r\n\r\nWell, what if the click doesn't initiate an AJAX call.  That's okay.  90% of the time, it causes a page refresh, thus wiping out the injected javascript.  No harm, no foul.\r\n\r\nThere are some times where a Click() event occurs and is not related to either scenario, such as clicking a check box or radio button.  We added some additional logic to not run the javascript multiple times if it was already there.\r\n\r\nIt is working fantastic!  Very pleased.\r\n\r\nAfter the Click() event is done, ajax or not, we unbind the event.\r\n\r\n<code class='java'>$(document).unbind(\\\"ajaxStart\\\").unbind(\\\"ajaxStop\\\");</code>\r\n\r\nFor WatiN + IE, WebDriver + FF, this worked great.  For WatiN + FF, we had to replace 2 strings.  We changed \"$\" to \"window.$\".  Also, \"(document)\", to \"(doc)\".  For WebDriver + IE, I've had problems running it but those issues have been fixed in the Trunk.  I'm still running the 2.0 Beta 1 version.  As for WebDriver + Chrome, it still isn't working but I'm working on it.", 
      "date_published": "2011-02-01 14:58:19", 
      "image_path": "", 
      "title_slug": "handling-ajax-automation-frameworks", 
      "rendered_body": "First, I have only tested this with JQuery.  I found articles talking about the .NET AjaxToolkit, but that didn't apply to me.\r\n\r\nSecond, we are using 2 different automation frameworks. WatiN and Webdriver/Selenium2.  Both frameworks give us the ability to inject javascript on the page.  This is vital to making this solution work.\r\n\r\nPrior to a Click() event in your automation, you need to run a javascript command.\r\n<code class='java'>\r\n$(document).bind(\\\"ajaxStart\\\", function() {$(\\\"body\\\").append(\\\"<div id='ajaxhidden' style='display:none;'></div>\\\");}).bind(\\\"ajaxStop\\\", function() {$('#ajaxhidden').remove();});\r\n</code>\r\n\r\nThis call will insert a hidden DIV on the page when the \"ajaxStart\" event is fired.\r\n\r\nWhen the Click() is fired, if an AJAX call is initiated, this script will run, inserting that hidden div.  The automation will then just check to see if the hidden DIV is present.  As long as the DIV is on the page, it will wait until the AJAX call has finished.  When done, it removes the hidden DIV.\r\n\r\nWell, what if the click doesn't initiate an AJAX call.  That's okay.  90% of the time, it causes a page refresh, thus wiping out the injected javascript.  No harm, no foul.\r\n\r\nThere are some times where a Click() event occurs and is not related to either scenario, such as clicking a check box or radio button.  We added some additional logic to not run the javascript multiple times if it was already there.\r\n\r\nIt is working fantastic!  Very pleased.\r\n\r\nAfter the Click() event is done, ajax or not, we unbind the event.\r\n\r\n<code class='java'>$(document).unbind(\\\"ajaxStart\\\").unbind(\\\"ajaxStop\\\");</code>\r\n\r\nFor WatiN + IE, WebDriver + FF, this worked great.  For WatiN + FF, we had to replace 2 strings.  We changed \"$\" to \"window.$\".  Also, \"(document)\", to \"(doc)\".  For WebDriver + IE, I've had problems running it but those issues have been fixed in the Trunk.  I'm still running the 2.0 Beta 1 version.  As for WebDriver + Chrome, it still isn't working but I'm working on it.", 
      "date_updated": "2011-02-13 21:40:41", 
      "demo": "", 
      "markup": "h", 
      "title": "Handling AJAX with automation frameworks", 
      "source_path": "", 
      "collection": 1, 
      "summary": "In running functional automation testing, it has always been difficult to know whether the AJAX call has finished.  Most people just put a Thread.Sleep() in the code, but it clutters up things and isn't accurate.  To handle this appropriately, we found a way to watch for those JQuery AJAX calls and drive the automation accordingly.\r\n\r\n", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2011-02-01 15:19:43", 
       
      "tags": "ajax csharp jquery watin webdriver"
    }
  }, 
  {
    "pk": 247, 
    "model": "blog.article", 
    "fields": {
      "body": "I was trying to do something like this:\r\n\r\n<code class=\"java\">\r\npublic class Service {\r\n   @PersistenceContext\r\n   private EntityManager em;\r\n\r\n   public List<Object[]> search(String sortProperty) {\r\n      Query q = em.createNativeQuery(\"select col from table order by :sortProperty\");\r\n      q.setParameter(\"sortProperty\", sortProperty);\r\n      return q.getResultList();   \r\n   }\r\n}\r\n</code>\r\n\r\nThis will yield something awesome, like this:\r\n<code class=\"java\">\r\njava.sql.SQLException: ORA-01745: invalid host/bind variable name\r\n</code>\r\n\r\nSeriously, the only way I've found around this is append, similar to this:\r\n<code class=\"java\">\r\n/* ... */\r\nQuery q = em.createNativeQuery(\"select col from table order by \" + sortProperty);\r\n/* ... */\r\n</code>\r\n\r\nJust make sure you've got something scrubbing the data coming in.\r\n\r\nAny better suggestions?", 
      "date_published": "2009-08-24 14:29:07", 
      "image_path": null, 
      "title_slug": "hibernate-bind-variable-orderby-clause", 
      "rendered_body": "I was trying to do something like this:\r\n\r\n<code class=\"java\">\r\npublic class Service {\r\n   @PersistenceContext\r\n   private EntityManager em;\r\n\r\n   public List<Object[]> search(String sortProperty) {\r\n      Query q = em.createNativeQuery(\"select col from table order by :sortProperty\");\r\n      q.setParameter(\"sortProperty\", sortProperty);\r\n      return q.getResultList();   \r\n   }\r\n}\r\n</code>\r\n\r\nThis will yield something awesome, like this:\r\n<code class=\"java\">\r\njava.sql.SQLException: ORA-01745: invalid host/bind variable name\r\n</code>\r\n\r\nSeriously, the only way I've found around this is append, similar to this:\r\n<code class=\"java\">\r\n/* ... */\r\nQuery q = em.createNativeQuery(\"select col from table order by \" + sortProperty);\r\n/* ... */\r\n</code>\r\n\r\nJust make sure you've got something scrubbing the data coming in.\r\n\r\nAny better suggestions?", 
      "date_updated": "2010-05-04 12:14:06", 
      "demo": null, 
      "markup": "h", 
      "title": "Hibernate Bind Variable in OrderBy Clause", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I have spent mucho time trying to get some named parameters working in the \"order by\" clause of a dynamic sql query that I'm building.  The query isn't even HQL/JPQL.  It's native.  And yet, it turns out that you cannot use bind variables, named or ordered, in an order by clause.  ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-08-24 14:35:39", 
       
      "tags": "hibernate jpa orm"
    }
  }, 
  {
    "pk": 119, 
    "model": "blog.article", 
    "fields": {
      "body": "The object-relational mapping world of JPA and Hibernate has made a lot of things really nice and easy.  As with any framework of this sort, however, it becomes frustrating when the pieces that are supposed to provide magic ease of development do not work as expected.  The frustration is only exacerbated when the docs are skimpy.\r\n\r\nType conversions usually happen automatically in JPA, but possibly due to some databases incredibly not having implemented boolean fields yet (Oracle and pre-5.0 MySQL), an extra bit of help in conversion is needed.\r\n\r\nThe mechanism for showing that a conversion will need to be manually specified is this annotation:\r\n\r\n<code class=\"java\">\r\n@Type(type=\"[type here]\")\r\nprivate Boolean active;\r\n</code>\r\n\r\nIn your database, if you store your boolean values as 'Y' or 'N', then you will want to use this:\r\n\r\n<code class=\"java\">\r\n@Type(type=\"yes_no\")\r\nprivate Boolean active;\r\n</code>\r\n\r\nIn your database, if you store your boolean values as '1' or '0', then you will want to use this:\r\n\r\n<code class=\"java\">\r\n@Type(type=\"boolean\")\r\nprivate Boolean active;\r\n</code>\r\n\r\nIn your database, if you store your boolean values as 'T or 'F', then you will want to use this:\r\n\r\n<code class=\"java\">\r\n@Type(type=\"true_false\")\r\nprivate Boolean active;\r\n</code>\r\n\r\nNote that these solutions are Hibernate-dependent, and not sticking with the general standard of JPA.  Too bad JPA doesn't provide something like this (as of now, anyway)!\r\n\r\nAfter much searching, I found this <a href=\"http://www.hibernate.org/hib_docs/reference/en/html/mapping-types.html\">doc</a> that you may find useful.\r\n\r\nIf you want a Java logic-specific (but more portable) solution, you could try this:\r\n\r\n<code class=\"java\">\r\n\r\n@Basic\r\nprivate Character active;\r\n\r\npublic Boolean getActive() {\r\n    if (active == null) return null;\r\n    return active == 'Y' ? Boolean.TRUE : Boolean.FALSE;\r\n}\r\n\r\npublic void setActive(Boolean active) {\r\n    if (active == null) {\r\n      this.active = null;\r\n    } else {\r\n      this.active = active == true ? 'Y' : 'N';\r\n    }\r\n}\r\n\r\n</code>\r\n\r\n", 
      "date_published": "2008-10-09 15:14:19", 
      "image_path": null, 
      "title_slug": "hibernate-boolean-conversion", 
      "rendered_body": "The object-relational mapping world of JPA and Hibernate has made a lot of things really nice and easy.  As with any framework of this sort, however, it becomes frustrating when the pieces that are supposed to provide magic ease of development do not work as expected.  The frustration is only exacerbated when the docs are skimpy.\r\n\r\nType conversions usually happen automatically in JPA, but possibly due to some databases incredibly not having implemented boolean fields yet (Oracle and pre-5.0 MySQL), an extra bit of help in conversion is needed.\r\n\r\nThe mechanism for showing that a conversion will need to be manually specified is this annotation:\r\n\r\n<code class=\"java\">\r\n@Type(type=\"[type here]\")\r\nprivate Boolean active;\r\n</code>\r\n\r\nIn your database, if you store your boolean values as 'Y' or 'N', then you will want to use this:\r\n\r\n<code class=\"java\">\r\n@Type(type=\"yes_no\")\r\nprivate Boolean active;\r\n</code>\r\n\r\nIn your database, if you store your boolean values as '1' or '0', then you will want to use this:\r\n\r\n<code class=\"java\">\r\n@Type(type=\"boolean\")\r\nprivate Boolean active;\r\n</code>\r\n\r\nIn your database, if you store your boolean values as 'T or 'F', then you will want to use this:\r\n\r\n<code class=\"java\">\r\n@Type(type=\"true_false\")\r\nprivate Boolean active;\r\n</code>\r\n\r\nNote that these solutions are Hibernate-dependent, and not sticking with the general standard of JPA.  Too bad JPA doesn't provide something like this (as of now, anyway)!\r\n\r\nAfter much searching, I found this <a href=\"http://www.hibernate.org/hib_docs/reference/en/html/mapping-types.html\">doc</a> that you may find useful.\r\n\r\nIf you want a Java logic-specific (but more portable) solution, you could try this:\r\n\r\n<code class=\"java\">\r\n\r\n@Basic\r\nprivate Character active;\r\n\r\npublic Boolean getActive() {\r\n    if (active == null) return null;\r\n    return active == 'Y' ? Boolean.TRUE : Boolean.FALSE;\r\n}\r\n\r\npublic void setActive(Boolean active) {\r\n    if (active == null) {\r\n      this.active = null;\r\n    } else {\r\n      this.active = active == true ? 'Y' : 'N';\r\n    }\r\n}\r\n\r\n</code>\r\n\r\n", 
      "date_updated": "2010-05-04 12:14:06", 
      "demo": null, 
      "markup": "h", 
      "title": "Hibernate Boolean Conversion", 
      "source_path": null, 
      "collection": 1, 
      "summary": "The object-relational mapping world of JPA and Hibernate has made a lot of things really nice and easy.  As with any framework of this sort, however, it becomes frustrating when the pieces that are supposed to provide magic ease of development do not work as expected.  The frustration is only exacerbated when the docs are skimpy.\r\n\r\nType conversions usually happen automatically in JPA, but possibly due to some databases incredibly not having implemented boolean fields yet (Oracle and pre-5.0 MySQL), an extra bit of help in conversion is needed.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:15:04", 
       
      "tags": "hibernate jpa orm"
    }
  }, 
  {
    "pk": 156, 
    "model": "blog.article", 
    "fields": {
      "body": "1. The enumeration has a 0th value place, so you need a PLACEHOLDER in your enum.\r\n2. The enumeration values are contiguous, so your primary keys on the corresponding lookup table in the database must be as well.  \r\n\r\nThe second point is the one that seems most problematic.  If a lookup value becomes obsolete, it cannot be deleted.  If a sequence is used to generate the primary key value in the lookup table, it cannot skip a number without needing to put in extra placeholders equal to the amount of numbers skipped.\r\n\r\nAt least for me in my solution, to get around this problem I am putting the ENUM_NAME's in the database and in my mapping relating the table, replacing @Enumerated(EnumType.ORDINAL) and then using EnumType.STRING on the Entity representing the lookup table in order to link to my enum.", 
      "date_published": "2009-02-23 09:27:39", 
      "image_path": null, 
      "title_slug": "hibernates-enumerated-annotation-brittle", 
      "rendered_body": "1. The enumeration has a 0th value place, so you need a PLACEHOLDER in your enum.\r\n2. The enumeration values are contiguous, so your primary keys on the corresponding lookup table in the database must be as well.  \r\n\r\nThe second point is the one that seems most problematic.  If a lookup value becomes obsolete, it cannot be deleted.  If a sequence is used to generate the primary key value in the lookup table, it cannot skip a number without needing to put in extra placeholders equal to the amount of numbers skipped.\r\n\r\nAt least for me in my solution, to get around this problem I am putting the ENUM_NAME's in the database and in my mapping relating the table, replacing @Enumerated(EnumType.ORDINAL) and then using EnumType.STRING on the Entity representing the lookup table in order to link to my enum.", 
      "date_updated": "2010-05-04 12:14:06", 
      "demo": null, 
      "markup": "h", 
      "title": "Hibernate's @Enumerated Annotation is Brittle", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Hibernate's @Enumerated annotation seems much too brittle in the case of using it with EnumType.ORDINAL.   If you're using EnumType.STRING, I think it works beautifully.  This is because the annotation can use the name of the enum to make the mapping.  In the case of ORDINAL, the value of the enum is used.  This presents a couple problems...", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-02-23 09:35:48", 
       
      "tags": "hibernate jpa orm"
    }
  }, 
  {
    "pk": 108, 
    "model": "blog.article", 
    "fields": {
      "body": "Development on JEE projects can be a real pain sometime.  1/2 of this (sometimes in literal minutes) is because of the need to spin up the server in order to run your code.  This server startup time can be a killer of one's development momentum.  If one is trying to make a change to code and then follow through and check the resulting differences, it can be much like running downstairs in one's house to fetch something, forgetting what that something was upon arrival.\r\n\r\nIt seems that the solutions to this problem are varied.  For me, it has meant: - Coding webapps in interpreted languages\r\n- Trying IDE-based hotdeploy schemes\r\n- Trying 3rd-party plugins like JavaRebel.\r\n\r\nI have had problems with all 3 solutions:\r\n- These are fun, but not what my employer uses\r\n- I haven't found an IDE yet that hotdeploys to my liking.  It's always extremely hard to tell if an IDE has really done its job and if what the browser is giving back to me is the new version. Eclipse has tried to give a visual indicator with its 'Published'/'Republish' verbage in its Servers view, but it seems that this indicator is often wrong.\r\n- I haven't had hardly any luck with JavaRebel.  Pre-version 1.0, it seemed buggy.  Then, I had problems integrating it with my IDE's build/deploy process.  Since the version 1.0 release, I haven't tried it again, but I hear it's still buggy.\r\n\r\nAs imperfect as the solutions are, it seems to me that the current best solution to the Java webapp hotdeploy is still the IDE-based hotdeploy scheme.  As my favorite IDE is IntelliJ IDEA, here's a little 1-2-3 on how to get hotdeploy working in IntelliJ 8 (as of Milestone 1, Diana):\r\n\r\n<h3>Select two important options</h3>\r\n\r\nGo to Settings > Compiler, and set \"Deploy web applications to server after compilation\" to \"Never\"\r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/qOoybG2F413C8IkbKljbug\"><img src=\"http://lh5.ggpht.com/trent.jake/SNgOk1bJ1cI/AAAAAAAAENs/DTZhP4ZvYBk/s800/compileropt.png\" /></a>\r\n\r\nGo to Settings > Debugger, and set \"Reload classes after compilation\" to \"Always\" and optionally check \"Reload classes in background\".\r\n\r\n<h3>Compile after a code change</h3>\r\n\r\nNow, every time you make a change to compiled code (e.g., .java files), make sure you re-compile.  The shortcut is Ctrl-Shift-F9.\r\n\r\nAnd that's it!  Pleasurable development was meant to be fast and simple.\r\n\r\nI'm a little unclear as to the essentialness, but as a general rule, I also set another option in the deployment settings for static file hotdeploy:\r\n\r\nGo to Settings > Project Settings > your web module > Java EE Build Settings and check \"Build on frame deactivation\" and check \"Build Web resources only\"\r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/hsw-VeKzduwMGCANP4p5xg\"><img src=\"http://lh4.ggpht.com/trent.jake/SNgSOwB4qyI/AAAAAAAAEOI/d07_gHC89nI/s400/projsettings.png\" /></a>\r\n\r\nI haven't tested the utter-most limits of this hotdeploy.  I'm not really sure at their limitations, but I would guess that changes to method signatures or changes to descriptor files would require a server restart.  I am, however, unsure.  How about you?\r\n\r\nBesides just the handy hotdeploy, one should also keep in mind that other things can help startup time: viva los smaller projects!  But, for anyone wanting to enjoy a behemoth, enjoy Napi.", 
      "date_published": "2008-11-22 15:02:12", 
      "image_path": null, 
      "title_slug": "hotdeploy-intellij-8", 
      "rendered_body": "Development on JEE projects can be a real pain sometime.  1/2 of this (sometimes in literal minutes) is because of the need to spin up the server in order to run your code.  This server startup time can be a killer of one's development momentum.  If one is trying to make a change to code and then follow through and check the resulting differences, it can be much like running downstairs in one's house to fetch something, forgetting what that something was upon arrival.\r\n\r\nIt seems that the solutions to this problem are varied.  For me, it has meant: - Coding webapps in interpreted languages\r\n- Trying IDE-based hotdeploy schemes\r\n- Trying 3rd-party plugins like JavaRebel.\r\n\r\nI have had problems with all 3 solutions:\r\n- These are fun, but not what my employer uses\r\n- I haven't found an IDE yet that hotdeploys to my liking.  It's always extremely hard to tell if an IDE has really done its job and if what the browser is giving back to me is the new version. Eclipse has tried to give a visual indicator with its 'Published'/'Republish' verbage in its Servers view, but it seems that this indicator is often wrong.\r\n- I haven't had hardly any luck with JavaRebel.  Pre-version 1.0, it seemed buggy.  Then, I had problems integrating it with my IDE's build/deploy process.  Since the version 1.0 release, I haven't tried it again, but I hear it's still buggy.\r\n\r\nAs imperfect as the solutions are, it seems to me that the current best solution to the Java webapp hotdeploy is still the IDE-based hotdeploy scheme.  As my favorite IDE is IntelliJ IDEA, here's a little 1-2-3 on how to get hotdeploy working in IntelliJ 8 (as of Milestone 1, Diana):\r\n\r\n<h3>Select two important options</h3>\r\n\r\nGo to Settings > Compiler, and set \"Deploy web applications to server after compilation\" to \"Never\"\r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/qOoybG2F413C8IkbKljbug\"><img src=\"http://lh5.ggpht.com/trent.jake/SNgOk1bJ1cI/AAAAAAAAENs/DTZhP4ZvYBk/s800/compileropt.png\" /></a>\r\n\r\nGo to Settings > Debugger, and set \"Reload classes after compilation\" to \"Always\" and optionally check \"Reload classes in background\".\r\n\r\n<h3>Compile after a code change</h3>\r\n\r\nNow, every time you make a change to compiled code (e.g., .java files), make sure you re-compile.  The shortcut is Ctrl-Shift-F9.\r\n\r\nAnd that's it!  Pleasurable development was meant to be fast and simple.\r\n\r\nI'm a little unclear as to the essentialness, but as a general rule, I also set another option in the deployment settings for static file hotdeploy:\r\n\r\nGo to Settings > Project Settings > your web module > Java EE Build Settings and check \"Build on frame deactivation\" and check \"Build Web resources only\"\r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/hsw-VeKzduwMGCANP4p5xg\"><img src=\"http://lh4.ggpht.com/trent.jake/SNgSOwB4qyI/AAAAAAAAEOI/d07_gHC89nI/s400/projsettings.png\" /></a>\r\n\r\nI haven't tested the utter-most limits of this hotdeploy.  I'm not really sure at their limitations, but I would guess that changes to method signatures or changes to descriptor files would require a server restart.  I am, however, unsure.  How about you?\r\n\r\nBesides just the handy hotdeploy, one should also keep in mind that other things can help startup time: viva los smaller projects!  But, for anyone wanting to enjoy a behemoth, enjoy Napi.", 
      "date_updated": "2010-05-04 12:14:06", 
      "demo": null, 
      "markup": "h", 
      "title": "Hotdeploy in Intellij 8", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Development on JEE projects can be a real pain sometime.  1/2 of this (sometimes in literal minutes) is because of the need to spin up the server in order to run your code.  This server startup time can be a killer of one's development momentum. \r\n\r\nTrue to its mantra, IntelliJ IDEA delivers some goodness is making this pain a little more pleasurable -- if that's possible.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:02:34", 
       
      "tags": "deployment ide intellij"
    }
  }, 
  {
    "pk": 326, 
    "model": "blog.article", 
    "fields": {
      "body": "To uninstall a .deb package, open a terminal, and enter:\r\n<code>\r\nsudo dpkg -r package_name\r\n</code>\r\n", 
      "date_published": "2010-07-20 08:22:55", 
      "image_path": "", 
      "title_slug": "how-uninstall-deb-package-ubuntu", 
      "rendered_body": "To uninstall a .deb package, open a terminal, and enter:\r\n<code>\r\nsudo dpkg -r package_name\r\n</code>\r\n", 
      "date_updated": "2010-07-20 08:28:00", 
      "demo": "", 
      "markup": "h", 
      "title": "How to uninstall a .deb package (Ubuntu)", 
      "source_path": "", 
      "collection": 1, 
      "summary": "New version of virtual box. Problem was, I needed to uninstall the old version first.", 
      "source": "", 
      "user": 6, 
      "active": true, 
      "date_created": "2010-07-20 08:27:11", 
       
      "tags": "linux ubuntu"
    }
  }, 
  {
    "pk": 391, 
    "model": "blog.article", 
    "fields": {
      "body": "The Situation\r\n-------------\r\n\r\n* We're using MarkLogic on the backend -- our data is stored in xml.  Our server-side code is XQuery.\r\n* Some of these strings are needed on the server side as well, so storing them all on the client in .js files wasn't going to cut it.\r\n* We wanted to get all of the strings into the same place to make the list more manageable to update and maintain.\r\n\r\nSo, now there are two parts to getting internationalized strings available in the front-end code: The data transform on the backend and the strings made available on the front-end.\r\n\r\nThe Backend Transform\r\n---------------------\r\n\r\nThe resource bundle data looks like this:\r\n\r\n.. code-block:: xml\r\n\r\n  <resource-bundle xml:lang=\"spa\">\r\n    <resource key=\"my.key.name\">\r\n      <value>Translated String</value>\r\n    </resource>\r\n  <!-- ... more ... -->\r\n  </resource-bundle>\r\n\r\nThe transform a la:\r\n\r\n.. code-block:: xquery\r\n\r\n  declare function get-lang-dict($bundle-collection as xs:string, $lang as xs:string?, $keys as xs:string*) as xs:string* {\r\n    let $eng :=\r\n      if (fn:exists($keys)) then\r\n        get-resource-bundle($bundle-collection, \"eng\")/resource[@key = $keys]\r\n      else\r\n        get-resource-bundle($bundle-collection, \"eng\")/resource\r\n    let $translations :=\r\n      if (fn:exists($keys)) then\r\n        get-resource-bundle($bundle-collection, $lang)/resource[@key = $keys]\r\n      else\r\n        get-resource-bundle($bundle-collection, $lang)/resource\r\n    let $max := fn:count($translations)\r\n    for $translation at $i in $translations\r\n    let $engTxt := $eng[@key eq $translation/@key]/value/text()\r\n    let $key := if (fn:exists($engTxt)) then\r\n      json:escape(fn:normalize-space(fn:string($engTxt[1])))\r\n    else\r\n      fn:string($translation/@key)\r\n    return fn:concat(\"'\", $key, \"': '\", json:escape(xdmp:quote($translation/value/text())), \"'\",\r\n      if ($i eq $max) then () else \",\")\r\n  };\r\n\r\n  declare function get-resource-bundle($bundle-collection as xs:string, $lang as xs:string) as element()* {\r\n    fn:collection($resource-collection-uri)/resource-bundle[@xml:lang eq $lang]\r\n  };\r\n\r\nNow we have our xml transformed into a sequence of xs:string, each a json object where the English text is the key and the language text is the value, like this:\r\n\r\n.. code-block:: json\r\n\r\n  { \"English String\": \"Translated String\" }\r\n\r\nThe XQuery expression that renders the html page includes a call to populate the Javascript \"lang\" object with the json:\r\n\r\n.. code-block:: xquery\r\n\r\n  declare function lang-dictionary($lang as xs:string?) as element(script) {\r\n    <script type=\"text/javascript\">\r\n      jQuery(document).ready(function(){{\r\n        lang.dict(\"{$lang}\", {{\r\n          {get-lang-dict(\"bundle-collection\", \"spa\", (\"keys\", \"if\", \"any\"))}\r\n        }});\r\n      }});\r\n    </script>\r\n  };\r\n\r\nNote that if you provide a pre-known set of i18n string $keys to the get-lang-dict() function, it will only add those resources to the dictionary.  Otherwsie, all the resources in your bundle are added.\r\n\r\nFront-end Usage\r\n---------------\r\n\r\nThe lang object that stores the dictionary of translated strings is like so:\r\n\r\n.. code-block:: javascript\r\n\r\n  var lang = (function () {\r\n\r\n    var current_dict = \"eng\";\r\n    var dicts = {};\r\n\r\n    var is_array = function (obj) {\r\n      return Object.prototype.toString.call(obj) === '[object Array]';\r\n    };\r\n    var set_lang = function (lang_code) {\r\n      current_dict = lang_code;\r\n    };\r\n    var dict = function (lang_code, dict) {\r\n      dicts[lang_code] = dict;\r\n      set_lang(lang_code);\r\n    };\r\n    var get_translation = function (key, number) {\r\n      var isPlural = number != undefined && number != 1;\r\n      var dict = dicts[current_dict];\r\n      var entry = dict == undefined ? undefined : dict[key];\r\n      var val = null;\r\n      if (is_array(entry)) {\r\n        val = isPlural && entry[1] != undefined ? entry[1] : entry[0];\r\n      } else {\r\n        val = entry;\r\n      }\r\n      return val == null ? key : val;\r\n    };\r\n\r\n    return {\r\n      dict: dict,\r\n      _: get_translation,\r\n      get_current_lang: function () {\r\n        return current_dict;\r\n      }\r\n    };\r\n\r\n  })();\r\n\r\nAnd when you want to grab a string from the language dictionary, just call:\r\n\r\n.. code-block:: javascript\r\n\r\n  lang._(\"English String\")\r\n\r\nPlurals\r\n-------\r\n\r\nNote that the lang object implementation also allows for storage of a plural form of the translated word.  In practice, it was decided not to store our resource bundles in a parallel format.  Still, you provided data to the lang.dict() populating function that looked like this:\r\n\r\n.. code-block:: json\r\n\r\n  { \"Result\": [\"Resultado\", \"Resultados\"] }\r\n\r\nAnd then got the translation like this:\r\n\r\n.. code-block:: javascript\r\n\r\n  lang._(\"Result\", results.length)\r\n\r\nIf it had a plural form, it would use it, falling back to the singular (1st) form.\r\n\r\nThoughts\r\n-----------\r\n\r\nSo, what are the pros and cons here?  The main design issue that I felt created a bit of give and take was the keying of the strings by the English word.  The pro: If the string doesn't exist, the intelligible English string is shown in its place.  The con: It's less reliable and more brittle because you have to be able to control and escape properly the text that appears in the key.  What alternate solutions might you create?\r\n", 
      "date_published": "2011-08-23 14:17:49", 
      "image_path": "", 
      "title_slug": "i18n-strings-javascript", 
      "rendered_body": "<div class=\"section\" id=\"the-situation\">\n<h1>The Situation</h1>\n<ul class=\"simple\">\n<li>We're using MarkLogic on the backend -- our data is stored in xml.  Our server-side code is XQuery.</li>\n<li>Some of these strings are needed on the server side as well, so storing them all on the client in .js files wasn't going to cut it.</li>\n<li>We wanted to get all of the strings into the same place to make the list more manageable to update and maintain.</li>\n</ul>\n<p>So, now there are two parts to getting internationalized strings available in the front-end code: The data transform on the backend and the strings made available on the front-end.</p>\n</div>\n<div class=\"section\" id=\"the-backend-transform\">\n<h1>The Backend Transform</h1>\n<p>The resource bundle data looks like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;resource-bundle</span> <span class=\"na\">xml:lang=</span><span class=\"s\">&quot;spa&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;resource</span> <span class=\"na\">key=</span><span class=\"s\">&quot;my.key.name&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;value&gt;</span>Translated String<span class=\"nt\">&lt;/value&gt;</span>\n  <span class=\"nt\">&lt;/resource&gt;</span>\n<span class=\"c\">&lt;!-- ... more ... --&gt;</span>\n<span class=\"nt\">&lt;/resource-bundle&gt;</span>\n</pre></div>\n</div><p>The transform a la:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>declare function get-lang-dict($bundle-collection as xs:string, $lang as xs:string?, $keys as xs:string*) as xs:string* {\n  let $eng :=\n    if (fn:exists($keys)) then\n      get-resource-bundle($bundle-collection, &quot;eng&quot;)/resource[@key = $keys]\n    else\n      get-resource-bundle($bundle-collection, &quot;eng&quot;)/resource\n  let $translations :=\n    if (fn:exists($keys)) then\n      get-resource-bundle($bundle-collection, $lang)/resource[@key = $keys]\n    else\n      get-resource-bundle($bundle-collection, $lang)/resource\n  let $max := fn:count($translations)\n  for $translation at $i in $translations\n  let $engTxt := $eng[@key eq $translation/@key]/value/text()\n  let $key := if (fn:exists($engTxt)) then\n    json:escape(fn:normalize-space(fn:string($engTxt[1])))\n  else\n    fn:string($translation/@key)\n  return fn:concat(&quot;&#39;&quot;, $key, &quot;&#39;: &#39;&quot;, json:escape(xdmp:quote($translation/value/text())), &quot;&#39;&quot;,\n    if ($i eq $max) then () else &quot;,&quot;)\n};\n\ndeclare function get-resource-bundle($bundle-collection as xs:string, $lang as xs:string) as element()* {\n  fn:collection($resource-collection-uri)/resource-bundle[@xml:lang eq $lang]\n};\n</pre></div>\n</div><p>Now we have our xml transformed into a sequence of xs:string, each a json object where the English text is the key and the language text is the value, like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>{ &quot;English String&quot;: &quot;Translated String&quot; }\n</pre></div>\n</div><p>The XQuery expression that renders the html page includes a call to populate the Javascript &quot;lang&quot; object with the json:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>declare function lang-dictionary($lang as xs:string?) as element(script) {\n  &lt;script type=&quot;text/javascript&quot;&gt;\n    jQuery(document).ready(function(){{\n      lang.dict(&quot;{$lang}&quot;, {{\n        {get-lang-dict(&quot;bundle-collection&quot;, &quot;spa&quot;, (&quot;keys&quot;, &quot;if&quot;, &quot;any&quot;))}\n      }});\n    }});\n  &lt;/script&gt;\n};\n</pre></div>\n</div><p>Note that if you provide a pre-known set of i18n string $keys to the get-lang-dict() function, it will only add those resources to the dictionary.  Otherwsie, all the resources in your bundle are added.</p>\n</div>\n<div class=\"section\" id=\"front-end-usage\">\n<h1>Front-end Usage</h1>\n<p>The lang object that stores the dictionary of translated strings is like so:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">lang</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">var</span> <span class=\"nx\">current_dict</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;eng&quot;</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">dicts</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n\n  <span class=\"kd\">var</span> <span class=\"nx\">is_array</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;[object Array]&#39;</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">set_lang</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">lang_code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">current_dict</span> <span class=\"o\">=</span> <span class=\"nx\">lang_code</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">dict</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">lang_code</span><span class=\"p\">,</span> <span class=\"nx\">dict</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">dicts</span><span class=\"p\">[</span><span class=\"nx\">lang_code</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">dict</span><span class=\"p\">;</span>\n    <span class=\"nx\">set_lang</span><span class=\"p\">(</span><span class=\"nx\">lang_code</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">get_translation</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">number</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">isPlural</span> <span class=\"o\">=</span> <span class=\"nx\">number</span> <span class=\"o\">!=</span> <span class=\"kc\">undefined</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">number</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">dict</span> <span class=\"o\">=</span> <span class=\"nx\">dicts</span><span class=\"p\">[</span><span class=\"nx\">current_dict</span><span class=\"p\">];</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">entry</span> <span class=\"o\">=</span> <span class=\"nx\">dict</span> <span class=\"o\">==</span> <span class=\"kc\">undefined</span> <span class=\"o\">?</span> <span class=\"kc\">undefined</span> <span class=\"o\">:</span> <span class=\"nx\">dict</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">];</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">is_array</span><span class=\"p\">(</span><span class=\"nx\">entry</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">isPlural</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">entry</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"kc\">undefined</span> <span class=\"o\">?</span> <span class=\"nx\">entry</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"nx\">entry</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">entry</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"nx\">key</span> <span class=\"o\">:</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">dict</span><span class=\"o\">:</span> <span class=\"nx\">dict</span><span class=\"p\">,</span>\n    <span class=\"nx\">_</span><span class=\"o\">:</span> <span class=\"nx\">get_translation</span><span class=\"p\">,</span>\n    <span class=\"nx\">get_current_lang</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">current_dict</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n\n<span class=\"p\">})();</span>\n</pre></div>\n</div><p>And when you want to grab a string from the language dictionary, just call:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nx\">lang</span><span class=\"p\">.</span><span class=\"nx\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;English String&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div></div>\n<div class=\"section\" id=\"plurals\">\n<h1>Plurals</h1>\n<p>Note that the lang object implementation also allows for storage of a plural form of the translated word.  In practice, it was decided not to store our resource bundles in a parallel format.  Still, you provided data to the lang.dict() populating function that looked like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>{ &quot;Result&quot;: [&quot;Resultado&quot;, &quot;Resultados&quot;] }\n</pre></div>\n</div><p>And then got the translation like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nx\">lang</span><span class=\"p\">.</span><span class=\"nx\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;Result&quot;</span><span class=\"p\">,</span> <span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span>\n</pre></div>\n</div><p>If it had a plural form, it would use it, falling back to the singular (1st) form.</p>\n</div>\n<div class=\"section\" id=\"thoughts\">\n<h1>Thoughts</h1>\n<p>So, what are the pros and cons here?  The main design issue that I felt created a bit of give and take was the keying of the strings by the English word.  The pro: If the string doesn't exist, the intelligible English string is shown in its place.  The con: It's less reliable and more brittle because you have to be able to control and escape properly the text that appears in the key.  What alternate solutions might you create?</p>\n</div>\n", 
      "date_updated": "2011-08-23 14:20:32", 
      "demo": "", 
      "markup": "r", 
      "title": "I18n Strings in Javascript", 
      "source_path": "", 
      "collection": 1, 
      "summary": "I've seen a number of different ways that internationalized strings get put into Javascript code.  Of all of them, I kind of like just bundling the resource bundle of key value pairs in Javascript files themselves, one for each language or something close to that.  But, in a recent project, there were a few other constraints, so we did it another way.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-08-23 14:18:35", 
       
      "tags": "i18n javascript marklogic xquery"
    }
  }, 
  {
    "pk": 106, 
    "model": "blog.article", 
    "fields": {
      "body": "For our view layer on our current project at work, we use JSF/Facelets + some jQuery goodness.  I have found that at some times these two tech's have a hard time working with each other.  I ocassionally have problems with the id's.  Here's a nice little way to guarantee you id's are awesome.\r\n\r\nOn the job, we're lucky enough to have designers hand us high-fidelity prototypes with jQuery often in place to do some fancy shmancy stuff.  It doesn't often work to port this html straight to jsf and drop in jsf components.  \r\n\r\nWhy?  Because jsf loves to prepend id's with parent element id's.  For instance, h:commandButton's are going to get their id's prepended with the id of the parent h:form.  Blast!  So, we have to adjust the id's.  \r\n\r\nThe second problem is that the parent id and the original id are now separated by a colon.  jQuery doesn't like the colon's using the usual id-based selector:\r\n\r\n<code class=\"javascript\">\r\n$(\"#formid:myid\").doSomething();\r\n</code>\r\n\r\nTo get around the colon in id problem, use the attribute selector for id:\r\n\r\n<code class=\"javascript\">\r\n$(\"[@id=formid:myid]\").doSomething();\r\n</code>\r\n\r\nVoila!  (said like Chris K.)", 
      "date_published": "2008-11-22 14:58:47", 
      "image_path": null, 
      "title_slug": "ids-jsf-used-jquery", 
      "rendered_body": "For our view layer on our current project at work, we use JSF/Facelets + some jQuery goodness.  I have found that at some times these two tech's have a hard time working with each other.  I ocassionally have problems with the id's.  Here's a nice little way to guarantee you id's are awesome.\r\n\r\nOn the job, we're lucky enough to have designers hand us high-fidelity prototypes with jQuery often in place to do some fancy shmancy stuff.  It doesn't often work to port this html straight to jsf and drop in jsf components.  \r\n\r\nWhy?  Because jsf loves to prepend id's with parent element id's.  For instance, h:commandButton's are going to get their id's prepended with the id of the parent h:form.  Blast!  So, we have to adjust the id's.  \r\n\r\nThe second problem is that the parent id and the original id are now separated by a colon.  jQuery doesn't like the colon's using the usual id-based selector:\r\n\r\n<code class=\"javascript\">\r\n$(\"#formid:myid\").doSomething();\r\n</code>\r\n\r\nTo get around the colon in id problem, use the attribute selector for id:\r\n\r\n<code class=\"javascript\">\r\n$(\"[@id=formid:myid]\").doSomething();\r\n</code>\r\n\r\nVoila!  (said like Chris K.)", 
      "date_updated": "2010-05-04 12:16:22", 
      "demo": null, 
      "markup": "h", 
      "title": "Id's from JSF, used in jQuery", 
      "source_path": null, 
      "collection": 1, 
      "summary": "For our view layer on our current project at work, we use JSF/Facelets + some jQuery goodness.  I have found that at some times these two tech's have a hard time working with each other.  I ocassionally have problems with the id's.  Here's a nice little way to guarantee you id's are awesome.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 14:59:36", 
       
      "tags": "javascript jquery jsf"
    }
  }, 
  {
    "pk": 324, 
    "model": "blog.article", 
    "fields": {
      "body": "My Ideal\r\n---------\r\n\r\n* **Local venue** - so I don't have to travel -- or a warm venue by the beach so I can boogie board.\r\n\r\n* **Great technical content** - send me away with actual skills and knowledge to help my everyday development dream.  This will also imply interesting speakers.\r\n\r\n* **Gobs of code** - preferably hands on workshops/exercises, but even onscreen it's much better than psychadelic slide decks.\r\n\r\n* **No marketing material** - this is the number one excitement killer for me when looking at potential conf session schedules: it reeks of marketing.\r\n\r\n* **Inspiration** - in depth of knowledge, in motivation to learn more, in effective use of tools, and in clarity of teaching\r\n\r\n* **Nice people** - preferably attend with friends and meet some new ones to expand the code-loving circle.\r\n\r\n* **Delicious food** - does nothing to advance my career, but sure makes me feel nice while attending.\r\n\r\nAnd I'm sure more...  Obviously, the ideal is pretty dang exciting.\r\n\r\nNFJS\r\n-------\r\n\r\nI just recently attended the `No Fluff, Just Stuff <http://www.nofluffjuststuff.com/>`_ conf in Salt Lake City.  It was two days of all of the ideal rolled into one.  It was very enjoyable, and I'm never disappointed.  Thanks to Jay and the crew that puts that on successfully every year.\r\n\r\nQuotes for Fun\r\n-----------------\r\n\r\nHere are a handful of my favorite quotes from the conference:\r\n\r\n* \"Trying to settle on scope *and* date is nonsense.\" -Venkat Subramaniam\r\n\r\n* \"Writing code that spits out XML should be given to people in prison.\" - Venkat Subramaniam\r\n\r\n* \"XML is like human beings -- cute when they're small, annoying when they get bigger.\" - Venkat Subramaniam\r\n\r\n* \"The best way to slow down is to speed up.\" - Venkat Subramaniam\r\n\r\n* \"The code you don't write has the fewest bugs.\" - Venkat Subramaniam\r\n\r\n* \"Good code is like a good joke; how many people think it's funny after you explain it?\" - Venkat Subramaniam\r\n\r\nHehe, Venkat always has very engaging sessions, partly, I think, because he can put things very succinctly in a way that is humorous and rememberable as well.", 
      "date_published": "2010-07-12 12:17:56", 
      "image_path": "", 
      "title_slug": "ideal-tech-conferences", 
      "rendered_body": "<div class=\"section\" id=\"my-ideal\">\n<h1>My Ideal</h1>\n<ul class=\"simple\">\n<li><strong>Local venue</strong> - so I don't have to travel -- or a warm venue by the beach so I can boogie board.</li>\n<li><strong>Great technical content</strong> - send me away with actual skills and knowledge to help my everyday development dream.  This will also imply interesting speakers.</li>\n<li><strong>Gobs of code</strong> - preferably hands on workshops/exercises, but even onscreen it's much better than psychadelic slide decks.</li>\n<li><strong>No marketing material</strong> - this is the number one excitement killer for me when looking at potential conf session schedules: it reeks of marketing.</li>\n<li><strong>Inspiration</strong> - in depth of knowledge, in motivation to learn more, in effective use of tools, and in clarity of teaching</li>\n<li><strong>Nice people</strong> - preferably attend with friends and meet some new ones to expand the code-loving circle.</li>\n<li><strong>Delicious food</strong> - does nothing to advance my career, but sure makes me feel nice while attending.</li>\n</ul>\n<p>And I'm sure more...  Obviously, the ideal is pretty dang exciting.</p>\n</div>\n<div class=\"section\" id=\"nfjs\">\n<h1>NFJS</h1>\n<p>I just recently attended the <a class=\"reference external\" href=\"http://www.nofluffjuststuff.com/\">No Fluff, Just Stuff</a> conf in Salt Lake City.  It was two days of all of the ideal rolled into one.  It was very enjoyable, and I'm never disappointed.  Thanks to Jay and the crew that puts that on successfully every year.</p>\n</div>\n<div class=\"section\" id=\"quotes-for-fun\">\n<h1>Quotes for Fun</h1>\n<p>Here are a handful of my favorite quotes from the conference:</p>\n<ul class=\"simple\">\n<li>&quot;Trying to settle on scope <em>and</em> date is nonsense.&quot; -Venkat Subramaniam</li>\n<li>&quot;Writing code that spits out XML should be given to people in prison.&quot; - Venkat Subramaniam</li>\n<li>&quot;XML is like human beings -- cute when they're small, annoying when they get bigger.&quot; - Venkat Subramaniam</li>\n<li>&quot;The best way to slow down is to speed up.&quot; - Venkat Subramaniam</li>\n<li>&quot;The code you don't write has the fewest bugs.&quot; - Venkat Subramaniam</li>\n<li>&quot;Good code is like a good joke; how many people think it's funny after you explain it?&quot; - Venkat Subramaniam</li>\n</ul>\n<p>Hehe, Venkat always has very engaging sessions, partly, I think, because he can put things very succinctly in a way that is humorous and rememberable as well.</p>\n</div>\n", 
      "date_updated": "2010-07-12 12:21:33", 
      "demo": "", 
      "markup": "r", 
      "title": "Ideal Tech Conferences", 
      "source_path": "", 
      "collection": 1, 
      "summary": "It seems that in the IT, there are many, many conferences offered every year that people are invited to attend in order to glean something of use.  Which are the good?  Which are the bad?  There are a few points that may make a differentiation.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-07-12 12:19:05", 
       
      "tags": "confs"
    }
  }, 
  {
    "pk": 190, 
    "model": "blog.article", 
    "fields": {
      "body": "I originally had this query:\r\n\r\n<code class=\"java\">\r\n@NamedQuery(name = Queue.REMOVE_ROWS_OF_EARLY_RELEASE_REASON,\r\n   query = \"delete from Queue q \" +\r\n           \"where  q.enabledMember = :enabledMember \" +\r\n           \"and    q.letter.eventReason.event.type = :eventType \" +\r\n           \"and    q.letter.eventReason.reason = :reason \")\r\n</code>\r\n\r\nIt had to evolve to this:\r\n<code class=\"java\">\r\n@NamedQuery(name = Queue.REMOVE_ROWS_OF_EARLY_RELEASE_REASON,\r\n   query = \"delete from Queue q \" +\r\n           \"where q in (select sq from Queue sq \" +\r\n           \"            where  sq.enabledMember = :enabledMember \" +\r\n           \"            and    sq.letter.eventReason.event.type = :eventType \" +\r\n           \"            and    sq.letter.eventReason.reason = :reason )\"\r\n</code>\r\n\r\nThe only solution that I could think of in order to keep the filter that I need was to use a subquery.  Anyone know of any other awesome solutions?", 
      "date_published": "2009-04-29 12:46:43", 
      "image_path": null, 
      "title_slug": "inner-joins-jpql-delete-statements", 
      "rendered_body": "I originally had this query:\r\n\r\n<code class=\"java\">\r\n@NamedQuery(name = Queue.REMOVE_ROWS_OF_EARLY_RELEASE_REASON,\r\n   query = \"delete from Queue q \" +\r\n           \"where  q.enabledMember = :enabledMember \" +\r\n           \"and    q.letter.eventReason.event.type = :eventType \" +\r\n           \"and    q.letter.eventReason.reason = :reason \")\r\n</code>\r\n\r\nIt had to evolve to this:\r\n<code class=\"java\">\r\n@NamedQuery(name = Queue.REMOVE_ROWS_OF_EARLY_RELEASE_REASON,\r\n   query = \"delete from Queue q \" +\r\n           \"where q in (select sq from Queue sq \" +\r\n           \"            where  sq.enabledMember = :enabledMember \" +\r\n           \"            and    sq.letter.eventReason.event.type = :eventType \" +\r\n           \"            and    sq.letter.eventReason.reason = :reason )\"\r\n</code>\r\n\r\nThe only solution that I could think of in order to keep the filter that I need was to use a subquery.  Anyone know of any other awesome solutions?", 
      "date_updated": "2010-05-04 12:16:22", 
      "demo": null, 
      "markup": "h", 
      "title": "Inner Joins in JPQL Delete Statements ", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I'm working on a project that utilizes JPA/Hibernate as its ORM.  I was writing a few named queries for an JPQL/HQL delete and was getting an SQLGrammarException.  I soon found out that I couldn't use inner joins on a delete statement, even at the SQL level.  Here's the query transformation:", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-04-29 12:52:48", 
       
      "tags": "hibernate hql jpa jpql"
    }
  }, 
  {
    "pk": 302, 
    "model": "blog.article", 
    "fields": {
      "body": "Since it's not in the Karmic repo, add in the Jaunty repo goodness.  Add this to /etc/apt/sources.list:\r\n\r\n(Remember to use sudo)\r\n\r\n<code class=\"text\">\r\ndeb http://us.archive.ubuntu.com/ubuntu/ jaunty multiverse\r\ndeb http://us.archive.ubuntu.com/ubuntu/ jaunty-updates multiverse\r\n</code>\r\n\r\nThen reload your sources.list:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get update\r\n</code>\r\n\r\nAnd finally install Java 5:\r\n<code class=\"bash\">\r\nsudo apt-get install sun-java5-jdk\r\n</code>\r\n", 
      "date_published": "2009-12-30 08:36:28", 
      "image_path": null, 
      "title_slug": "install-java-5-karmic-koala", 
      "rendered_body": "Since it's not in the Karmic repo, add in the Jaunty repo goodness.  Add this to /etc/apt/sources.list:\r\n\r\n(Remember to use sudo)\r\n\r\n<code class=\"text\">\r\ndeb http://us.archive.ubuntu.com/ubuntu/ jaunty multiverse\r\ndeb http://us.archive.ubuntu.com/ubuntu/ jaunty-updates multiverse\r\n</code>\r\n\r\nThen reload your sources.list:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get update\r\n</code>\r\n\r\nAnd finally install Java 5:\r\n<code class=\"bash\">\r\nsudo apt-get install sun-java5-jdk\r\n</code>\r\n", 
      "date_updated": "2010-05-04 12:16:22", 
      "demo": null, 
      "markup": "h", 
      "title": "Install Java 5 on Karmic Koala", 
      "source_path": null, 
      "collection": 1, 
      "summary": "In Ubuntu 9.10, they removed Java 5 from the update repositories for Karmic because Java 5 was end of lifed in Oct. 09.  This has made it more cumbersome for the Java 5 user on Karmic.  Luckily, cumbersome is still pretty easy.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-12-30 08:45:09", 
       
      "tags": "java linux ubuntu"
    }
  }, 
  {
    "pk": 365, 
    "model": "blog.article", 
    "fields": {
      "body": "Apache is a great webserver, but it may pack along more than you need. If all you need is a simple webserver with php then use nginx.\r\n\r\nI've used this method to install on ubuntu 8.10, 9.04, 9.10, 10.4 and 10.10\r\n\r\nHere are the steps to get it on your system.\r\n\r\n1. Install nginx:\r\n\r\n.. code-block:: xquery\r\n\r\n   sudo apt-get install nginx\r\n\r\n2. Install spawn-fcgi: \r\n\r\n.. code-block:: xquery\r\n  \r\n   sudo apt-get install spawn-fcgi\r\n\r\n3. Install php : \r\n\r\n.. code-block:: xquery\r\n\r\n    sudo apt-get install php5-cgi\r\n\r\n4. Create a startup script for php: \r\n\r\n.. code-block:: xquery\r\n\r\n  sudo vi /etc/init.d/php-fastcgi\r\n\r\n5. paste the following in that file\r\n\r\n.. code-block:: xquery\r\n\r\n  #!/bin/bash\r\n  BIND=127.0.0.1:9000 \r\n  USER=www-data\r\n  PHP_FCGI_CHILDREN=15\r\n  PHP_FCGI_MAX_REQUESTS=1000\r\n  \r\n  PHP_CGI=/usr/bin/php-cgi\r\n  PHP_CGI_NAME=`basename $PHP_CGI`\r\n  PHP_CGI_ARGS=\"- USER=$USER PATH=/usr/bin PHP_FCGI_CHILDREN=$PHP_FCGI_CHILDREN         \r\n  PHP_FCGI_MAX_REQUESTS=$PHP_FCGI_MAX_REQUESTS $PHP_CGI -b $BIND\"\r\n  RETVAL=0\r\n\r\n  start() {\r\n      echo -n \"Starting PHP FastCGI: \"\r\n      start-stop-daemon --quiet --start --background --chuid \"$USER\" --exec /usr/bin/env --   $PHP_CGI_ARGS\r\n      RETVAL=$?\r\n      echo \"$PHP_CGI_NAME.\"\r\n  }\r\n  stop() {\r\n      echo -n \"Stopping PHP FastCGI: \"\r\n      killall -q -w -u $USER $PHP_CGI\r\n      RETVAL=$?\r\n      echo \"$PHP_CGI_NAME.\"\r\n  }\r\n  \r\n    case \"$1\" in\r\n      start)\r\n        start\r\n    ;;\r\n      stop)\r\n        stop\r\n    ;;\r\n      restart)\r\n        stop\r\n        start\r\n    ;;\r\n      *)\r\n        echo \"Usage: php-fastcgi {start|stop|restart}\"\r\n        exit 1\r\n    ;;\r\n  esac\r\n  exit $RETVAL\r\n\r\n\r\n6. Make the file executable: \r\n\r\n.. code-block:: xquery\r\n\r\n   sudo chmod 755 /etc/init.d/php-fastcgi\r\n\r\n7. Try it: \r\n\r\n.. code-block:: xquery\r\n\r\n   sudo /etc/init.d/php-fastcgi start\r\n\r\n8. Make the script run at boot: \r\n\r\n.. code-block:: xquery\r\n\r\n   sudo update-rc.d php-fastcgi defaults\r\n\r\n9. Add this in your nginx script (usually in sites-enabled):\r\n\r\n.. code-block:: xquery\r\n\r\n  location ~ \\.php$ {\r\n      fastcgi_pass    127.0.0.1:9000;\r\n      fastcgi_index   index.php;\r\n      fastcgi_param   SCRIPT_FILENAME /var/www/nginx-default$fastcgi_script_name;\r\n      include         fastcgi_params;\r\n  }\r\n\r\n10. Restart nginx: \r\n\r\n.. code-block:: xquery\r\n\r\n   sudo service nginx restart\r\n\r\nNow create a php test file and test this:\r\n\r\n.. code-block:: xquery\r\n\r\n    vi phptest.html\r\n\r\nput this in it:\r\n\r\n.. code-block:: xquery\r\n\r\n  <?php\r\n  echo \"hello\"\r\n  phpinfo();\r\n  ?>\r\n\r\nBrowse over to phptest.html and see if you get the php info page. If so, you are successful.\r\n\r\n\r\n\r\n\r\n", 
      "date_published": "2011-02-06 10:54:00", 
      "image_path": "", 
      "title_slug": "install-php-and-nginx-ubuntu", 
      "rendered_body": "<p>Apache is a great webserver, but it may pack along more than you need. If all you need is a simple webserver with php then use nginx.</p>\n<p>I've used this method to install on ubuntu 8.10, 9.04, 9.10, 10.4 and 10.10</p>\n<p>Here are the steps to get it on your system.</p>\n<ol class=\"arabic simple\">\n<li>Install nginx:</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo apt-get install nginx\n</pre></div>\n</div><ol class=\"arabic simple\" start=\"2\">\n<li>Install spawn-fcgi:</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo apt-get install spawn-fcgi\n</pre></div>\n</div><ol class=\"arabic simple\" start=\"3\">\n<li>Install php :</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo apt-get install php5-cgi\n</pre></div>\n</div><ol class=\"arabic simple\" start=\"4\">\n<li>Create a startup script for php:</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo vi /etc/init.d/php-fastcgi\n</pre></div>\n</div><ol class=\"arabic simple\" start=\"5\">\n<li>paste the following in that file</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>#!/bin/bash\nBIND=127.0.0.1:9000\nUSER=www-data\nPHP_FCGI_CHILDREN=15\nPHP_FCGI_MAX_REQUESTS=1000\n\nPHP_CGI=/usr/bin/php-cgi\nPHP_CGI_NAME=`basename $PHP_CGI`\nPHP_CGI_ARGS=&quot;- USER=$USER PATH=/usr/bin PHP_FCGI_CHILDREN=$PHP_FCGI_CHILDREN\nPHP_FCGI_MAX_REQUESTS=$PHP_FCGI_MAX_REQUESTS $PHP_CGI -b $BIND&quot;\nRETVAL=0\n\nstart() {\n    echo -n &quot;Starting PHP FastCGI: &quot;\n    start-stop-daemon --quiet --start --background --chuid &quot;$USER&quot; --exec /usr/bin/env --   $PHP_CGI_ARGS\n    RETVAL=$?\n    echo &quot;$PHP_CGI_NAME.&quot;\n}\nstop() {\n    echo -n &quot;Stopping PHP FastCGI: &quot;\n    killall -q -w -u $USER $PHP_CGI\n    RETVAL=$?\n    echo &quot;$PHP_CGI_NAME.&quot;\n}\n\n  case &quot;$1&quot; in\n    start)\n      start\n  ;;\n    stop)\n      stop\n  ;;\n    restart)\n      stop\n      start\n  ;;\n    *)\n      echo &quot;Usage: php-fastcgi {start|stop|restart}&quot;\n      exit 1\n  ;;\nesac\nexit $RETVAL\n</pre></div>\n</div><ol class=\"arabic simple\" start=\"6\">\n<li>Make the file executable:</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo chmod 755 /etc/init.d/php-fastcgi\n</pre></div>\n</div><ol class=\"arabic simple\" start=\"7\">\n<li>Try it:</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo /etc/init.d/php-fastcgi start\n</pre></div>\n</div><ol class=\"arabic simple\" start=\"8\">\n<li>Make the script run at boot:</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo update-rc.d php-fastcgi defaults\n</pre></div>\n</div><ol class=\"arabic simple\" start=\"9\">\n<li>Add this in your nginx script (usually in sites-enabled):</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>location ~ \\.php$ {\n    fastcgi_pass    127.0.0.1:9000;\n    fastcgi_index   index.php;\n    fastcgi_param   SCRIPT_FILENAME /var/www/nginx-default$fastcgi_script_name;\n    include         fastcgi_params;\n}\n</pre></div>\n</div><ol class=\"arabic simple\" start=\"10\">\n<li>Restart nginx:</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo service nginx restart\n</pre></div>\n</div><p>Now create a php test file and test this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>vi phptest.html\n</pre></div>\n</div><p>put this in it:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>&lt;?php\necho &quot;hello&quot;\nphpinfo();\n?&gt;\n</pre></div>\n</div><p>Browse over to phptest.html and see if you get the php info page. If so, you are successful.</p>\n", 
      "date_updated": "2011-02-06 13:03:50", 
      "demo": "", 
      "markup": "r", 
      "title": "Install PHP and NGINX on Ubuntu ", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Nginx and PHP make a high performance combination on Ubuntu; here's how to get the system up and running.", 
      "source": "", 
      "user": 2, 
      "active": true, 
      "date_created": "2011-02-06 11:00:24", 
       
      "tags": "nginx php ubuntu"
    }
  }, 
  {
    "pk": 261, 
    "model": "blog.article", 
    "fields": {
      "body": "Interesting to me, the <a href=\"http://blogs.sun.com/andreas/resource/InstallCert.java\">InstallCert.java</a> code is found mostly on Sun blogs.  But, there you have it.  If you have much trouble with the manual process of installing these certificates, there's a good <a href=\"http://stufftohelpyouout.blogspot.com/2008/10/unable-to-find-valid-certification-path.html\">blog post</a> to help you figure it out.\r\n\r\nAfter multiple updates to my JDK, my biggest problem was not so much that I couldn't figure out how to do it, but more that I had to do it again and again because the certs were being blown away.\r\n\r\nSo, here's a quick python script to help make the process a little more automatic:  \r\n\r\n<code class=\"python\">\r\n#!/bin/python\r\n\r\nimport sys\r\nimport subprocess\r\nimport os\r\n\r\nCURR_DIR = os.getcwd()\r\nSECURITY_SUBDIR = os.path.join(\"jre\", \"lib\", \"security\")\r\nJAVA_ARGS = \"your-cert-host\" # host:port passphrase\r\nJDK_HOMES = [] # path to desired JDKs\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    if os.path.isfile(os.path.join(CURR_DIR, \"InstallCert.java\")) == 0:\r\n        raise Exception(\"Must have InstallCert.java in current directory\")\r\n\r\n    if len(sys.argv) < 2:\r\n        if len(JDK_HOMES) > 0:\r\n            paths = JDK_HOMES\r\n        else:\r\n            raise Exception(\"Must specify JDK paths args or JDK_HOMES var\")\r\n    else:\r\n        paths = sys.argv[1:]\r\n\r\n    for javapath in paths:\r\n        secpath = os.path.join(javapath, SECURITY_SUBDIR)\r\n        cmds = [\r\n            \"cd %s\" % CURR_DIR,\r\n            \"cp InstallCert.java %s\" % (secpath),\r\n            \"javac %s\" % (os.path.join(secpath, \"InstallCert.java\")),\r\n            \"cd %s && java %s %s\" % (secpath, \"InstallCert\", JAVA_ARGS)\r\n            ]\r\n\r\n        for cmd in cmds:\r\n            print cmd\r\n            subprocess.call(cmd, shell=True)\r\n</code>\r\n\r\nI have only run/tested this in Linux.  Make sure that you run this script with the proper user/permissions to write all the needed files.  For instance, I have to sudo this because my JDKs are in /usr/lib/...  ", 
      "date_published": "2009-09-16 10:39:08", 
      "image_path": null, 
      "title_slug": "installcert-java-security-certificate", 
      "rendered_body": "Interesting to me, the <a href=\"http://blogs.sun.com/andreas/resource/InstallCert.java\">InstallCert.java</a> code is found mostly on Sun blogs.  But, there you have it.  If you have much trouble with the manual process of installing these certificates, there's a good <a href=\"http://stufftohelpyouout.blogspot.com/2008/10/unable-to-find-valid-certification-path.html\">blog post</a> to help you figure it out.\r\n\r\nAfter multiple updates to my JDK, my biggest problem was not so much that I couldn't figure out how to do it, but more that I had to do it again and again because the certs were being blown away.\r\n\r\nSo, here's a quick python script to help make the process a little more automatic:  \r\n\r\n<code class=\"python\">\r\n#!/bin/python\r\n\r\nimport sys\r\nimport subprocess\r\nimport os\r\n\r\nCURR_DIR = os.getcwd()\r\nSECURITY_SUBDIR = os.path.join(\"jre\", \"lib\", \"security\")\r\nJAVA_ARGS = \"your-cert-host\" # host:port passphrase\r\nJDK_HOMES = [] # path to desired JDKs\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    if os.path.isfile(os.path.join(CURR_DIR, \"InstallCert.java\")) == 0:\r\n        raise Exception(\"Must have InstallCert.java in current directory\")\r\n\r\n    if len(sys.argv) < 2:\r\n        if len(JDK_HOMES) > 0:\r\n            paths = JDK_HOMES\r\n        else:\r\n            raise Exception(\"Must specify JDK paths args or JDK_HOMES var\")\r\n    else:\r\n        paths = sys.argv[1:]\r\n\r\n    for javapath in paths:\r\n        secpath = os.path.join(javapath, SECURITY_SUBDIR)\r\n        cmds = [\r\n            \"cd %s\" % CURR_DIR,\r\n            \"cp InstallCert.java %s\" % (secpath),\r\n            \"javac %s\" % (os.path.join(secpath, \"InstallCert.java\")),\r\n            \"cd %s && java %s %s\" % (secpath, \"InstallCert\", JAVA_ARGS)\r\n            ]\r\n\r\n        for cmd in cmds:\r\n            print cmd\r\n            subprocess.call(cmd, shell=True)\r\n</code>\r\n\r\nI have only run/tested this in Linux.  Make sure that you run this script with the proper user/permissions to write all the needed files.  For instance, I have to sudo this because my JDKs are in /usr/lib/...  ", 
      "date_updated": "2010-05-04 12:16:22", 
      "demo": null, 
      "markup": "h", 
      "title": "InstallCert for Java Security Certificate", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Sometimes you need to install a security certificate for authentication to work for certain services -- services that are accessed by your java application that requirement a secure connection.  For instance, needing to authenticate against an LDAP server from one of our apps, we had to run a little InstallCert.java on all JDKs used to run the app.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-16 10:57:19", 
       
      "tags": "java linux security ubuntu"
    }
  }, 
  {
    "pk": 127, 
    "model": "blog.article", 
    "fields": {
      "body": "If you ever try and startup Intellij and see this error: \"Exception in thread \"main\" java.lang.UnsupportedClassVersionError: Bad version number in .class file....\", you'll know that something's not quite right.  It turns out that Intellij version 7 and above require JDK 6 to run properly.  So, make sure to double-check the following points.\r\n\r\n1. <a href=\"http://aprilandjake.com/content/update-alternatives/\">Update alternatives</a>\r\n<code class=\"bash\">\r\nsudo update-alternatives --config java\r\n</code>\r\nAnd select JDK 1.6 or above.\r\n\r\n2. Set your JDK_HOME and JAVA_HOME\r\n<code class=\"bash\">\r\nemacs ~/.bashrc\r\n# edit the two lines to point to Java version 6:\r\nexport JDK_HOME=\"/usr/lib/jvm/java-6-sun/\"\r\nexport JAVA_HOME=\"/usr/lib/jvm/java-6-sun/\"\r\n</code>\r\n\r\nA lot of this was explained in the IntelliJ installation <a href=\"http://aprilandjake.com/content/intellij-8m1-ubuntu-8-ultimate-pleasure/\">tutorial</a>, but when I changed it later and found this error, I had forgotten about certain JDK-related requirements.", 
      "date_published": "2008-11-24 15:21:30", 
      "image_path": null, 
      "title_slug": "intellij-7-requires-jdk-6", 
      "rendered_body": "If you ever try and startup Intellij and see this error: \"Exception in thread \"main\" java.lang.UnsupportedClassVersionError: Bad version number in .class file....\", you'll know that something's not quite right.  It turns out that Intellij version 7 and above require JDK 6 to run properly.  So, make sure to double-check the following points.\r\n\r\n1. <a href=\"http://aprilandjake.com/content/update-alternatives/\">Update alternatives</a>\r\n<code class=\"bash\">\r\nsudo update-alternatives --config java\r\n</code>\r\nAnd select JDK 1.6 or above.\r\n\r\n2. Set your JDK_HOME and JAVA_HOME\r\n<code class=\"bash\">\r\nemacs ~/.bashrc\r\n# edit the two lines to point to Java version 6:\r\nexport JDK_HOME=\"/usr/lib/jvm/java-6-sun/\"\r\nexport JAVA_HOME=\"/usr/lib/jvm/java-6-sun/\"\r\n</code>\r\n\r\nA lot of this was explained in the IntelliJ installation <a href=\"http://aprilandjake.com/content/intellij-8m1-ubuntu-8-ultimate-pleasure/\">tutorial</a>, but when I changed it later and found this error, I had forgotten about certain JDK-related requirements.", 
      "date_updated": "2010-05-04 12:16:22", 
      "demo": null, 
      "markup": "h", 
      "title": "Intellij 7+ Requires JDK 6", 
      "source_path": null, 
      "collection": 1, 
      "summary": "If you ever try and startup Intellij and see this error: \"Exception in thread \"main\" java.lang.UnsupportedClassVersionError: Bad version number in .class file....\", you'll know that something's not quite right.  It turns out that Intellij version 7 and above require JDK 6 to run properly.  So, make sure to double-check the following points.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:22:38", 
       
      "tags": "ide intellij java"
    }
  }, 
  {
    "pk": 102, 
    "model": "blog.article", 
    "fields": {
      "body": "The stairway to heaven:\r\n\r\n<h3>Install Java</h3>\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install sun-java6-jdk\r\njava -version\r\n</code>\r\n\r\n<h3>Get IntelliJ for Linux</h3>\r\n\r\nDownload the tar<a href=\"http://www.jetbrains.com/idea/nextversion/index.html#linux\">Intellij 8 Milestone 1 (Diana)</a>.\r\n\r\nUpack:\r\n<code class=\"bash\">\r\ntar xfz idea-7.0.1.tar.gz ./usr/lib/\r\n</code>\r\n\r\n<h3>Update Paths</h3>\r\n\r\n<code class=\"bash\">\r\n# path to Java\r\nemacs ~/.bashrc &\r\n/** ... */\r\nexport JDK_HOME=\"/usr/lib/jvm/java-6-sun/\"\r\n\r\n# PATH\r\nsudo emacs /etc/environment &\r\n/** ... */\r\nPATH=\"[other stuff in path]:/usr/lib/idea-xxxx/bin\"\r\n\r\n#reload env\r\nsource /etc/environment\r\n</code>\r\n\r\n\r\n<h3>Rev 'er up!</h3>\r\n\r\n<code class=\"bash\">\r\n./idea.sh &\r\n</code>\r\n\r\nDevelop with pleasure on the OS of pleasure!\r\n\r\nThere are some less pleasurable moments, however.  For me, the least pleasurable (and this is how 'bad' it has gotten so far) is the nasty Linux-flavor font used in the menus.  Ick.  You can change that, though, by changing the look and feel.  Press Ctrl-`, select \"Switch Look & Feel\", and select something different than the default, like GTK+.\r\n\r\n(Base on this <a href=\"http://techbrew.net/articles/200711/how-to-put-intellij-idea-on-ubuntu/\">tutorial</a>.)", 
      "date_published": "2008-10-11 14:54:33", 
      "image_path": null, 
      "title_slug": "intellij-8m1-ubuntu-8-ultimate-pleasure", 
      "rendered_body": "The stairway to heaven:\r\n\r\n<h3>Install Java</h3>\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install sun-java6-jdk\r\njava -version\r\n</code>\r\n\r\n<h3>Get IntelliJ for Linux</h3>\r\n\r\nDownload the tar<a href=\"http://www.jetbrains.com/idea/nextversion/index.html#linux\">Intellij 8 Milestone 1 (Diana)</a>.\r\n\r\nUpack:\r\n<code class=\"bash\">\r\ntar xfz idea-7.0.1.tar.gz ./usr/lib/\r\n</code>\r\n\r\n<h3>Update Paths</h3>\r\n\r\n<code class=\"bash\">\r\n# path to Java\r\nemacs ~/.bashrc &\r\n/** ... */\r\nexport JDK_HOME=\"/usr/lib/jvm/java-6-sun/\"\r\n\r\n# PATH\r\nsudo emacs /etc/environment &\r\n/** ... */\r\nPATH=\"[other stuff in path]:/usr/lib/idea-xxxx/bin\"\r\n\r\n#reload env\r\nsource /etc/environment\r\n</code>\r\n\r\n\r\n<h3>Rev 'er up!</h3>\r\n\r\n<code class=\"bash\">\r\n./idea.sh &\r\n</code>\r\n\r\nDevelop with pleasure on the OS of pleasure!\r\n\r\nThere are some less pleasurable moments, however.  For me, the least pleasurable (and this is how 'bad' it has gotten so far) is the nasty Linux-flavor font used in the menus.  Ick.  You can change that, though, by changing the look and feel.  Press Ctrl-`, select \"Switch Look & Feel\", and select something different than the default, like GTK+.\r\n\r\n(Base on this <a href=\"http://techbrew.net/articles/200711/how-to-put-intellij-idea-on-ubuntu/\">tutorial</a>.)", 
      "date_updated": "2010-05-04 12:16:22", 
      "demo": null, 
      "markup": "h", 
      "title": "Intellij 8M1 on Ubuntu 8: Ultimate Pleasure", 
      "source_path": null, 
      "collection": 1, 
      "summary": "IntelliJ is my current favorite IDE.  Ubuntu is my current favorite Linux flavors.  Put 'em both together and waddya' get?  My current favorite day on the job.  ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 14:55:23", 
       
      "tags": "intellij linux ubuntu"
    }
  }, 
  {
    "pk": 111, 
    "model": "blog.article", 
    "fields": {
      "body": "Debugging time is a blessed time in one's day where the hotkeys for continue, step into, step over, and others often grace the pads of the programmer's fingers.  This can be quite a rewarding experience.  Now ponder on the disappointment that materializes on the programmer's crestfallen brow when the step into button is pressed and upon the screen displays the all-descriptive and utterly useless \"/** compiled code */\".  Maven mixed with IntelliJ to the rescue -- download the sources!\r\n\r\nIn a project with many external dependencies, this can expand your view of the code your using at least 42-fold.\r\n\r\nHere, Maven is your friend.  It's a great tool.  This command led to my discovery of this gem:\r\n\r\n<code class=\"bash\">\r\nmvn idea:help -Ddetail=true -Dgoal=[insert name of goal here]\r\n</code>\r\n\r\nAnd now for the awesome one... When tooling your project for IntelliJ, run this:\r\n\r\n<code class=\"bash\">\r\nmvn idea:idea -DdownloadSources=true\r\n</code>\r\n\r\nThis can also be done when you're blowing away your dependency metadata, which is stored in your project .iml file by default:\r\n\r\n<code class=\"bash\">\r\nmvn idea:module -DdownloadSources=true\r\n</code>\r\n\r\nEnjoy that source!", 
      "date_published": "2008-11-24 15:04:42", 
      "image_path": null, 
      "title_slug": "intellij-maven-source-downloads", 
      "rendered_body": "Debugging time is a blessed time in one's day where the hotkeys for continue, step into, step over, and others often grace the pads of the programmer's fingers.  This can be quite a rewarding experience.  Now ponder on the disappointment that materializes on the programmer's crestfallen brow when the step into button is pressed and upon the screen displays the all-descriptive and utterly useless \"/** compiled code */\".  Maven mixed with IntelliJ to the rescue -- download the sources!\r\n\r\nIn a project with many external dependencies, this can expand your view of the code your using at least 42-fold.\r\n\r\nHere, Maven is your friend.  It's a great tool.  This command led to my discovery of this gem:\r\n\r\n<code class=\"bash\">\r\nmvn idea:help -Ddetail=true -Dgoal=[insert name of goal here]\r\n</code>\r\n\r\nAnd now for the awesome one... When tooling your project for IntelliJ, run this:\r\n\r\n<code class=\"bash\">\r\nmvn idea:idea -DdownloadSources=true\r\n</code>\r\n\r\nThis can also be done when you're blowing away your dependency metadata, which is stored in your project .iml file by default:\r\n\r\n<code class=\"bash\">\r\nmvn idea:module -DdownloadSources=true\r\n</code>\r\n\r\nEnjoy that source!", 
      "date_updated": "2010-05-04 12:16:22", 
      "demo": null, 
      "markup": "h", 
      "title": "Intellij Maven Source Downloads", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Debugging time is a blessed time in one's day where the hotkeys for continue, step into, step over, and others often grace the pads of the programmer's fingers.  This can be quite a rewarding experience.  Now ponder on the disappointment that materializes on the programmer's crestfallen brow when the step into button is pressed and upon the screen displays the all-descriptive and utterly useless \"/** compiled code */\".  Maven mixed with IntelliJ to the rescue -- download the sources!", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:06:01", 
       
      "tags": "intellij maven"
    }
  }, 
  {
    "pk": 388, 
    "model": "blog.article", 
    "fields": {
      "body": "Reflection is a way to dynamically analyze objects through code and invoke them if needed.  I work with automating HTML elements on web pages, so there could be dozens and dozens of these implementations.  MappedPage is the base abstract class.  Here is what one of my classes looked like:\r\n\r\n<code class=\"java\">\r\npublic class HomePage : MappedPage\r\n{\r\n    public HomePage() : base(/*base constructor arguments*/)\r\n    {\r\n    }\r\n\r\n    public MappedElement link_More\r\n    {\r\n        //creates a MappedElement object (a way for our framework to locate an HTML element on the page\r\n        get { return Create(MappedElementType.LINK, MappedAttributeType.ID, \"more\"); }\r\n    }\r\n\r\n    /* Long list of potential HTML elements on a page */\r\n}\r\n</code>\r\n\r\nThe list of properties could range from 1 to 100.  However, I wanted to provide the ability to iterate through those elements (properties).  Here is how I accomplished it:\r\n\r\n<code class=\"java\">\r\n\r\nprivate readonly List< MappedElement > _elements = new List< MappedElement >();\r\n\r\npublic List< MappedElement > GetElements()\r\n{\r\n    if (_elements.Count.Equals(0))\r\n    {\r\n        foreach (PropertyInfo propertyInfo in this.GetType().GetProperties())\r\n        {\r\n            if (propertyInfo.PropertyType.Name.Equals(\"MappedElement\"))\r\n            {\r\n                Type type = this.GetType();\r\n                MethodInfo methodInfo = propertyInfo.GetGetMethod();\r\n                methodInfo.Invoke(this, null);\r\n                object o = type.InvokeMember(propertyInfo.Name, BindingFlags.GetProperty, null, this, null);\r\n                _elements.Add((MappedElement)o);\r\n            }\r\n        }\r\n    }\r\n     return _elements;\r\n}\r\n</code>\r\n\r\nGetProperties() is a method that you can call on a Type of an object.  It will return a list of all Properties of the instantiated object.  Then, I loop through to check the Property Type.  This is the Return type of the property.  In my case, I was returning a MappedElement object.  I had to add this check because I have other properties on the class (page title, url, etc).\r\n\r\nThen, I was able to invoke the property inside the inner IF statement.  This would have been the same as:\r\n\r\n<code class=\"java\">\r\nHomePage home = new HomePage();\r\nConsole.Out.WriteLine(home.link_More);\r\n</code>\r\n\r\nHowever, now it is dynamic and I don't have to worry about how many elements there might be.  The GetElements() method will only return the correct list and the user can implement over that list easily.", 
      "date_published": "2011-07-05 15:31:17", 
      "image_path": "", 
      "title_slug": "invoking-properties-using-reflection", 
      "rendered_body": "Reflection is a way to dynamically analyze objects through code and invoke them if needed.  I work with automating HTML elements on web pages, so there could be dozens and dozens of these implementations.  MappedPage is the base abstract class.  Here is what one of my classes looked like:\r\n\r\n<code class=\"java\">\r\npublic class HomePage : MappedPage\r\n{\r\n    public HomePage() : base(/*base constructor arguments*/)\r\n    {\r\n    }\r\n\r\n    public MappedElement link_More\r\n    {\r\n        //creates a MappedElement object (a way for our framework to locate an HTML element on the page\r\n        get { return Create(MappedElementType.LINK, MappedAttributeType.ID, \"more\"); }\r\n    }\r\n\r\n    /* Long list of potential HTML elements on a page */\r\n}\r\n</code>\r\n\r\nThe list of properties could range from 1 to 100.  However, I wanted to provide the ability to iterate through those elements (properties).  Here is how I accomplished it:\r\n\r\n<code class=\"java\">\r\n\r\nprivate readonly List< MappedElement > _elements = new List< MappedElement >();\r\n\r\npublic List< MappedElement > GetElements()\r\n{\r\n    if (_elements.Count.Equals(0))\r\n    {\r\n        foreach (PropertyInfo propertyInfo in this.GetType().GetProperties())\r\n        {\r\n            if (propertyInfo.PropertyType.Name.Equals(\"MappedElement\"))\r\n            {\r\n                Type type = this.GetType();\r\n                MethodInfo methodInfo = propertyInfo.GetGetMethod();\r\n                methodInfo.Invoke(this, null);\r\n                object o = type.InvokeMember(propertyInfo.Name, BindingFlags.GetProperty, null, this, null);\r\n                _elements.Add((MappedElement)o);\r\n            }\r\n        }\r\n    }\r\n     return _elements;\r\n}\r\n</code>\r\n\r\nGetProperties() is a method that you can call on a Type of an object.  It will return a list of all Properties of the instantiated object.  Then, I loop through to check the Property Type.  This is the Return type of the property.  In my case, I was returning a MappedElement object.  I had to add this check because I have other properties on the class (page title, url, etc).\r\n\r\nThen, I was able to invoke the property inside the inner IF statement.  This would have been the same as:\r\n\r\n<code class=\"java\">\r\nHomePage home = new HomePage();\r\nConsole.Out.WriteLine(home.link_More);\r\n</code>\r\n\r\nHowever, now it is dynamic and I don't have to worry about how many elements there might be.  The GetElements() method will only return the correct list and the user can implement over that list easily.", 
      "date_updated": "2011-07-06 14:04:55", 
      "demo": "", 
      "markup": "h", 
      "title": "Invoking Properties Using Reflection", 
      "source_path": "", 
      "collection": 1, 
      "summary": "In reworking some code, I wanted to leverage some lazy loading goodness for properties of a class.  Yet at the same time, return a list of all those properties for iterating.  Reflection is an awesome way to accomplish this feat!", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2011-07-05 15:49:20", 
       
      "tags": "csharp properties reflection"
    }
  }, 
  {
    "pk": 363, 
    "model": "blog.article", 
    "fields": {
      "body": ".. code-block:: java\r\n\r\n for (Map.Entry<key,value> entry : map.entrySet()) {\r\n     entry.getKey().doSomethingWithThisEntryValue(entry.getValue());\r\n }\r\n\r\n", 
      "date_published": "2011-02-04 09:16:52", 
      "image_path": "", 
      "title_slug": "iterating-through-map-java", 
      "rendered_body": "<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">.</span><span class=\"na\">Entry</span><span class=\"o\">&lt;</span><span class=\"n\">key</span><span class=\"o\">,</span><span class=\"n\">value</span><span class=\"o\">&gt;</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n    <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">().</span><span class=\"na\">doSomethingWithThisEntryValue</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>", 
      "date_updated": "2011-02-04 09:42:16", 
      "demo": "", 
      "markup": "r", 
      "title": "Iterating through a map in Java", 
      "source_path": "", 
      "collection": 1, 
      "summary": "I've always wanted to know the best way to iterate over the elements in a map. Here's one way I've found that works.", 
      "source": "", 
      "user": 6, 
      "active": true, 
      "date_created": "2011-02-04 09:20:55", 
       
      "tags": "java"
    }
  }, 
  {
    "pk": 339, 
    "model": "blog.article", 
    "fields": {
      "body": "Iteration Planning Process Characteristics\r\n------------------------------------------\r\n\r\n* Done for EVERY iteration on the first day of the iteration.\r\n* Established system for tracking user stories.  Ours includes a solid issue-tracking system, Jira.  Each story is ranked, so priority is always known.\r\n* Well-defined story workflow statuses (eg, in work, resolved, closed) -- What they mean and when they change is clear to all.\r\n* Previous to planning meeting, select stories to work and estimate them -- encourage talk with other team members to avoid overlap/battling.\r\n* Days available are established for each individual team member.\r\n* Whole team is involved;  Customer is not.\r\n* Each subteam/dev pair are given opportunity, in order, to pick up a higher-priority story for the iteration.  Repeat, until all days available are filled.\r\n* Requires an organized project manager and responsible dev/qa team\r\n* Stretch goals are made -- limits down time at end of iteration; a padding for inaccurate estimates\r\n\r\n\r\nProper Planning Outcomes\r\n------------------------\r\n\r\n* The whole team knows the tracking of project.  Many, small adjustments can be made more often.\r\n* Realistic work loads are given to every team member.\r\n* Vacation/admin time are taken into account.\r\n* The focus remains on small, 2-wk work chunks\r\n* QA effort gets face time\r\n* Team works to final product together\r\n* Scope can grow and the project can handle it on time and budget\r\n* You work only what you signed up for in the iteration.  For hardening periods, there is no new work assigned, and this solidifies the idea of hardening the app.\r\n* Peer accountability is heightened.\r\n\r\n\r\nWhat has your experience been with iterations and iteration planning?  Are they effective at driving project completion or do you feel they're just arbitrary time cuts?", 
      "date_published": "2010-09-10 10:52:58", 
      "image_path": "", 
      "title_slug": "iteration-planning", 
      "rendered_body": "<div class=\"section\" id=\"iteration-planning-process-characteristics\">\n<h1>Iteration Planning Process Characteristics</h1>\n<ul class=\"simple\">\n<li>Done for EVERY iteration on the first day of the iteration.</li>\n<li>Established system for tracking user stories.  Ours includes a solid issue-tracking system, Jira.  Each story is ranked, so priority is always known.</li>\n<li>Well-defined story workflow statuses (eg, in work, resolved, closed) -- What they mean and when they change is clear to all.</li>\n<li>Previous to planning meeting, select stories to work and estimate them -- encourage talk with other team members to avoid overlap/battling.</li>\n<li>Days available are established for each individual team member.</li>\n<li>Whole team is involved;  Customer is not.</li>\n<li>Each subteam/dev pair are given opportunity, in order, to pick up a higher-priority story for the iteration.  Repeat, until all days available are filled.</li>\n<li>Requires an organized project manager and responsible dev/qa team</li>\n<li>Stretch goals are made -- limits down time at end of iteration; a padding for inaccurate estimates</li>\n</ul>\n</div>\n<div class=\"section\" id=\"proper-planning-outcomes\">\n<h1>Proper Planning Outcomes</h1>\n<ul class=\"simple\">\n<li>The whole team knows the tracking of project.  Many, small adjustments can be made more often.</li>\n<li>Realistic work loads are given to every team member.</li>\n<li>Vacation/admin time are taken into account.</li>\n<li>The focus remains on small, 2-wk work chunks</li>\n<li>QA effort gets face time</li>\n<li>Team works to final product together</li>\n<li>Scope can grow and the project can handle it on time and budget</li>\n<li>You work only what you signed up for in the iteration.  For hardening periods, there is no new work assigned, and this solidifies the idea of hardening the app.</li>\n<li>Peer accountability is heightened.</li>\n</ul>\n<p>What has your experience been with iterations and iteration planning?  Are they effective at driving project completion or do you feel they're just arbitrary time cuts?</p>\n</div>\n", 
      "date_updated": "2010-09-10 10:54:21", 
      "demo": "", 
      "markup": "r", 
      "title": "Iteration Planning", 
      "source_path": "", 
      "collection": 1, 
      "summary": "In Agile software development, an iteration is a time period of work, where the full software dev cycle is completed.  Iterations are iterative, done over and over again.  And yet, many project teams find making the most of each iteration challenging.  On my current project, I feel like an important part of making each iteration solid and progressive is the iteration planning, which I feel is done very well.  Iteration planning, done well, relies upon project management and each team member.  Here are some of my observations.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-09-10 10:53:59", 
       
      "tags": "agile project-management"
    }
  }, 
  {
    "pk": 370, 
    "model": "blog.article", 
    "fields": {
      "body": "I'm currently trying to do 192-bit AES encryption.  So, I need to do a few things to get around this nasty exception I keep getting:\r\n\r\n.. code-block:: java\r\n\r\n  java.security.InvalidKeyException:Illegal Key Size\r\n\r\nGo to the Empire's `download page <http://www.oracle.com/technetwork/java/javase/downloads/index.html>`_ and surf to the bottom and look for the \"Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 6\" (since I'm on Java 6).  Download that .zip of power and unzip it.\r\n\r\nFinally, copy two files:\r\n\r\n* local_policy.jar\r\n* US_export_policy.jar\r\n\r\nInto JAVA_HOME/jre/lib/security/\r\n\r\nFor example:\r\n\r\n.. code-block:: bash\r\n\r\n  sudo cp local_policy.jar US_export_policy.jar /usr/lib/jvm/java-6-sun/jre/lib/security/\r\n\r\nAnd voila!  Run your code again to do encryption against larger than 128-bit keys, and your illegal key size message should have vanished like the icebergs.\r\n", 
      "date_published": "2011-04-04 12:07:49", 
      "image_path": "", 
      "title_slug": "java-encryption-illegal-key-size", 
      "rendered_body": "<p>I'm currently trying to do 192-bit AES encryption.  So, I need to do a few things to get around this nasty exception I keep getting:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">security</span><span class=\"o\">.</span><span class=\"na\">InvalidKeyException</span><span class=\"o\">:</span><span class=\"n\">Illegal</span> <span class=\"n\">Key</span> <span class=\"n\">Size</span>\n</pre></div>\n</div><p>Go to the Empire's <a class=\"reference external\" href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">download page</a> and surf to the bottom and look for the &quot;Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 6&quot; (since I'm on Java 6).  Download that .zip of power and unzip it.</p>\n<p>Finally, copy two files:</p>\n<ul class=\"simple\">\n<li>local_policy.jar</li>\n<li>US_export_policy.jar</li>\n</ul>\n<p>Into JAVA_HOME/jre/lib/security/</p>\n<p>For example:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo cp local_policy.jar US_export_policy.jar /usr/lib/jvm/java-6-sun/jre/lib/security/\n</pre></div>\n</div><p>And voila!  Run your code again to do encryption against larger than 128-bit keys, and your illegal key size message should have vanished like the icebergs.</p>\n", 
      "date_updated": "2011-04-04 12:08:51", 
      "demo": "", 
      "markup": "r", 
      "title": "Java Encryption - Illegal Key Size", 
      "source_path": "", 
      "collection": 1, 
      "summary": "By default, Java has a limit on the length of your encryption key.  The limit, by default 128-bit, seems a little small and dated.  So, let's break through that glass ceiling!  With the hammer of Thor!", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-04-04 12:08:23", 
       
      "tags": "encryption java"
    }
  }, 
  {
    "pk": 183, 
    "model": "blog.article", 
    "fields": {
      "body": "This code:\r\n<code class=\"java\">\r\n@Test(groups = {\"unit\"})\r\npublic void testJunk() throws NoSuchMethodException {\r\n\tMethod m = MyBean.class.getDeclaredMethod(\"test\", Boolean.TYPE, Integer.TYPE, Integer.class);\r\n\tMyBean bean = createMock(MyBean.class, m);\r\n\t\r\n}\r\n</code>\r\n\r\nwill be able to find the method here:\r\n<code class=\"java\">\r\nvoid test(boolean junk, int prim, Integer cl) {\r\n\tSystem.out.println(\"blast\");\r\n}\r\n</code>\r\n\r\nNotice, that object params use: Integer.class\r\n\r\nPrimitive params use: Integer.TYPE\r\n\r\nThe one other thing that bugs me with this reflection bit is the string representation of the test() method name.  So, when the test() method name changes to test2(), the unit test will break.  Blast!  Hence, the standard out message.\r\n", 
      "date_published": "2009-04-14 09:35:56", 
      "image_path": null, 
      "title_slug": "java-reflection-methods-primitive-params", 
      "rendered_body": "This code:\r\n<code class=\"java\">\r\n@Test(groups = {\"unit\"})\r\npublic void testJunk() throws NoSuchMethodException {\r\n\tMethod m = MyBean.class.getDeclaredMethod(\"test\", Boolean.TYPE, Integer.TYPE, Integer.class);\r\n\tMyBean bean = createMock(MyBean.class, m);\r\n\t\r\n}\r\n</code>\r\n\r\nwill be able to find the method here:\r\n<code class=\"java\">\r\nvoid test(boolean junk, int prim, Integer cl) {\r\n\tSystem.out.println(\"blast\");\r\n}\r\n</code>\r\n\r\nNotice, that object params use: Integer.class\r\n\r\nPrimitive params use: Integer.TYPE\r\n\r\nThe one other thing that bugs me with this reflection bit is the string representation of the test() method name.  So, when the test() method name changes to test2(), the unit test will break.  Blast!  Hence, the standard out message.\r\n", 
      "date_updated": "2010-05-04 12:16:22", 
      "demo": null, 
      "markup": "h", 
      "title": "Java Reflection for methods with primitive params", 
      "source_path": null, 
      "collection": 1, 
      "summary": "First-class objects are the norm in the code that I usually write and edit, but every now and then I run across a method with a primitive parameter.  I use EasyMock a lot in testing, and need to find these methods by reflection, this is how it's done...", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-04-14 09:41:07", 
       
      "tags": "java reflection testng unit-testing"
    }
  }, 
  {
    "pk": 224, 
    "model": "blog.article", 
    "fields": {
      "body": "The symptom you're looking for is that the Java-based app window has a problem painting.  For me, this meant that it was totally blank.  I have had this problem with Oracle's SQLDeveloper 1.5.x and IntelliJ 8.x.  \r\n\r\nFirst, close the apps in question.  \r\n\r\nEdit your .bashrc file.\r\n<code class=\"bash\">\r\nemacs ~/.bashrc\r\n</code>\r\n\r\nAdd this line:\r\n<code class=\"bash\">\r\nexport AWT_TOOLKIT=MToolkit\r\n</code>\r\n\r\nReload your bashrc:\r\n<code class=\"bash\">\r\n. .bashrc\r\n</code>\r\n\r\nTry starting your apps again.  For me, testing this on SQLDeveloper 1.5.4, the fix worked well.  IntelliJ 8.1.3 on Ubuntu 9.04 works well regardless.\r\n\r\n<h3>Update</h3>\r\n\r\nWow, in this case the side effect of the medicine was worse than the initial symptom.  In the case of IntelliJ 8.1.3, this \"fix\" is causing my keyboard to be non-responsive in the main IDE window after a few minutes.  I am unsure of the specific reason, but I have observed clearly the cause and effect which really started to make me frustrated!\r\n\r\nSo, perhaps it would be wise to export this AWT_TOOLKIT parameter in a less global place, perhaps just on the .sh file of the app that you're experiencing trouble with, e.g. sqldeveloper.sh.\r\n", 
      "date_published": "2009-06-29 07:28:30", 
      "image_path": null, 
      "title_slug": "java-and-compiz", 
      "rendered_body": "The symptom you're looking for is that the Java-based app window has a problem painting.  For me, this meant that it was totally blank.  I have had this problem with Oracle's SQLDeveloper 1.5.x and IntelliJ 8.x.  \r\n\r\nFirst, close the apps in question.  \r\n\r\nEdit your .bashrc file.\r\n<code class=\"bash\">\r\nemacs ~/.bashrc\r\n</code>\r\n\r\nAdd this line:\r\n<code class=\"bash\">\r\nexport AWT_TOOLKIT=MToolkit\r\n</code>\r\n\r\nReload your bashrc:\r\n<code class=\"bash\">\r\n. .bashrc\r\n</code>\r\n\r\nTry starting your apps again.  For me, testing this on SQLDeveloper 1.5.4, the fix worked well.  IntelliJ 8.1.3 on Ubuntu 9.04 works well regardless.\r\n\r\n<h3>Update</h3>\r\n\r\nWow, in this case the side effect of the medicine was worse than the initial symptom.  In the case of IntelliJ 8.1.3, this \"fix\" is causing my keyboard to be non-responsive in the main IDE window after a few minutes.  I am unsure of the specific reason, but I have observed clearly the cause and effect which really started to make me frustrated!\r\n\r\nSo, perhaps it would be wise to export this AWT_TOOLKIT parameter in a less global place, perhaps just on the .sh file of the app that you're experiencing trouble with, e.g. sqldeveloper.sh.\r\n", 
      "date_updated": "2010-05-04 12:18:14", 
      "demo": null, 
      "markup": "h", 
      "title": "Java Swing and Compiz", 
      "source_path": null, 
      "collection": 1, 
      "summary": "On Ubuntu 9.04, Jaunty, Compiz comes running out of the box on the mid-level preset for desktop effects.  These effects and generally beautiful and pleasing, but a couple of the apps that I use are Java-based and have some compatibility issues with Compiz.  At least for my apps, I've found a way around this issue.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-06-29 07:42:44", 
       
      "tags": "compiz java swing"
    }
  }, 
  {
    "pk": 312, 
    "model": "blog.article", 
    "fields": {
      "body": "Our embedded video was a little tricky and I tried for many hours to just update the video player parameters using javascript based on which image is selected. I finally punted and wrote a webservice that refreshes the <div> with the output of a MarkLogic query.\r\n\r\nThis is the MarkLogic juice:\r\n\r\n.. code-block:: xquery\r\n\r\n  let $portrait-media := /portrait-media[@profileId eq $content/@profileId]/*\r\n  let $imgInd := fn:string($content/@imgIndex)\r\n\r\n  let $index := if (fn:string-length($imgInd) < 1) then\r\n    1\r\n  else\r\n    xs:integer($imgInd)\r\n  return\r\n  (\r\n  <div id=\"profile-head\">\r\n    <h1>{ixd:string('dashboard-name-intro')}&nbsp;{fn:data($content/@name)} </h1>\r\n    <p>{$content/intro}<strong>&nbsp;I'm a Mormon.</strong></p>\r\n  </div>,\r\n  <div id=\"hero\">\r\n    <div>\r\n      {\r\n        let $default := $portrait-media[$index]\r\n        return if(fn:string(fn:node-name($default)) eq 'video')\r\n          then\r\n            ixd:render('/content/pages/widgets/medium-video-player.ixd', $default)\r\n          else\r\n            <img src=\"{$content/@imgPath}\" id=\"screenImage\" />\r\n\r\n      }\r\n      <ul class=\"gallery galleria\">\r\n      {\r\n\r\n        let $count := fn:count($portrait-media)\r\n        for $media at $i in $portrait-media\r\n\r\n        return\r\n        <li class=\"show-video {if ($i=$count)then 'last' else ()}\" xmlns=\"http://www.w3.org/1999/xhtml\">\r\n           <img class=\"thumb noscale selected borderPatrol {if ($i=$index) then 'opeth' else ()}\" alt=\"{fn:data($media/@thumbnail)}\" src=\"{fn:data($media/@thumbnail)}\" index=\"{$i}\" path=\"{$media/@main}\"/>\r\n        </li>\r\n      }\r\n    </ul>\r\n    </div>\r\n    <!-- END GALLERY -->\r\n    <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"clear\">&nbsp;</div>\r\n  </div>\r\n  )\r\n\r\n\r\n\r\nThe gallery gets built towards the end in the last for loop. That is the area where most time was spent. It seems easy enough but the devil is in the details.\r\n\r\nFor example, using the blueprint.css requires the last element to have a class=\" last\" attribute. See how I had to do that with the MarkLogic directive {if ($i=$count)then 'last' else ()}\r\n\r\nNext I had to make sure that my javascript would pick up the element on a click. I did that with this piece of delectability:\r\n\r\n.. code-block:: javascript\r\n\r\n            $('.gallery li').live(\"click\",(function(selected){{\r\n\r\n                    var theImg = $(this).children(\"img\");\r\n                    var index = theImg.attr(\"index\");\r\n                    var imgPath = theImg.attr(\"path\");\r\n                    profileHead.loadImg('{$Id}',index,imgPath);\r\n            }}));\r\n\r\n\r\nprofileHead.loadImg calls the webservice with an Id the index of which video or image thumbnail was clicked and the path to the big image to display.\r\n\r\nOk none of this was really the hard part. Maybe the hardest of this was remembering to bind using the live method from JQuery since the bind can't happen before the div is populated.\r\n\r\nThe next part was the hardest. First binding the mouseover and mouseout to the images so they change as they are rolled over:\r\n\r\n.. code-block:: javascript\r\n\r\n            $('.gallery li img').live(\"mouseover\",function(){{\r\n                $(this).removeClass(\"borderPatrol\");\r\n            }} );\r\n            $('.gallery li img').live(\"mouseout\",function(){{\r\n                 $(this).addClass(\"borderPatrol\");\r\n            }});\r\n\r\nJolly good show. The border patrol class used to add a border, but the behavior changed to just add opacity and I liked the name so I kept it.\r\n\r\n.. code-block:: css\r\n\r\n .borderPatrol {\r\n             border:none;\r\n             opacity:.3;\r\n             cursor:pointer;\r\n }\r\n\r\nOk so that works pretty good, except for thumbnail stickiness. \r\n\r\nThumbnail stickiness keeps the thumbnail of the selected image in the state that indicates the thumbnail is being displayed. In this case, opacity of 1.0, or clear. \r\n\r\nBut that doesn't happen correctly because as soon as the thumbnail is displayed and you mouse off of the dang thing, the borderPatrol class is added and opacity:.3 comes into play.\r\n\r\nHeck, that is one stinky pickle.\r\n\r\nTo fix this I added this code into the MarkLogic piece at the beginning of this article:\r\n\r\n.. code-block:: xquery\r\n\r\n  {if ($i=$index) then 'opeth' else ()}\r\n\r\nOpeth is the name of the class that I add to the img that was selected. \r\n\r\nThe opeth class:\r\n\r\n.. code-block:: css\r\n\r\n .opeth {\r\n    opacity:1.0;\r\n }\r\n\r\nThis didn't work because of the mouseout event which would through borderControl back on and the was css works, the latest class gets to determine the property, and that property is opacity and the value is .3 on borderPatrol. So that nullifies the earlier opeth class opacity of 1.0.\r\n\r\nSo I made this change:\r\n\r\n.. code-block:: css\r\n\r\n .opeth{\r\n    opacity:1.0 !important;\r\n }\r\n\r\nAnd then life was good and lo, the page began working and I was amazed.", 
      "date_published": "2010-05-13 09:47:51", 
      "image_path": "", 
      "title_slug": "jquery-and-marklogic-mashup-photo-gallery", 
      "rendered_body": "Our embedded video was a little tricky and I tried for many hours to just update the video player parameters using javascript based on which image is selected. I finally punted and wrote a webservice that refreshes the <div> with the output of a MarkLogic query.\r\n\r\nThis is the MarkLogic juice:\r\n\r\n.. code-block:: xquery\r\n\r\n  let $portrait-media := /portrait-media[@profileId eq $content/@profileId]/*\r\n  let $imgInd := fn:string($content/@imgIndex)\r\n\r\n  let $index := if (fn:string-length($imgInd) < 1) then\r\n    1\r\n  else\r\n    xs:integer($imgInd)\r\n  return\r\n  (\r\n  <div id=\"profile-head\">\r\n    <h1>{ixd:string('dashboard-name-intro')}&nbsp;{fn:data($content/@name)} </h1>\r\n    <p>{$content/intro}<strong>&nbsp;I'm a Mormon.</strong></p>\r\n  </div>,\r\n  <div id=\"hero\">\r\n    <div>\r\n      {\r\n        let $default := $portrait-media[$index]\r\n        return if(fn:string(fn:node-name($default)) eq 'video')\r\n          then\r\n            ixd:render('/content/pages/widgets/medium-video-player.ixd', $default)\r\n          else\r\n            <img src=\"{$content/@imgPath}\" id=\"screenImage\" />\r\n\r\n      }\r\n      <ul class=\"gallery galleria\">\r\n      {\r\n\r\n        let $count := fn:count($portrait-media)\r\n        for $media at $i in $portrait-media\r\n\r\n        return\r\n        <li class=\"show-video {if ($i=$count)then 'last' else ()}\" xmlns=\"http://www.w3.org/1999/xhtml\">\r\n           <img class=\"thumb noscale selected borderPatrol {if ($i=$index) then 'opeth' else ()}\" alt=\"{fn:data($media/@thumbnail)}\" src=\"{fn:data($media/@thumbnail)}\" index=\"{$i}\" path=\"{$media/@main}\"/>\r\n        </li>\r\n      }\r\n    </ul>\r\n    </div>\r\n    <!-- END GALLERY -->\r\n    <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"clear\">&nbsp;</div>\r\n  </div>\r\n  )\r\n\r\n\r\n\r\nThe gallery gets built towards the end in the last for loop. That is the area where most time was spent. It seems easy enough but the devil is in the details.\r\n\r\nFor example, using the blueprint.css requires the last element to have a class=\" last\" attribute. See how I had to do that with the MarkLogic directive {if ($i=$count)then 'last' else ()}\r\n\r\nNext I had to make sure that my javascript would pick up the element on a click. I did that with this piece of delectability:\r\n\r\n.. code-block:: javascript\r\n\r\n            $('.gallery li').live(\"click\",(function(selected){{\r\n\r\n                    var theImg = $(this).children(\"img\");\r\n                    var index = theImg.attr(\"index\");\r\n                    var imgPath = theImg.attr(\"path\");\r\n                    profileHead.loadImg('{$Id}',index,imgPath);\r\n            }}));\r\n\r\n\r\nprofileHead.loadImg calls the webservice with an Id the index of which video or image thumbnail was clicked and the path to the big image to display.\r\n\r\nOk none of this was really the hard part. Maybe the hardest of this was remembering to bind using the live method from JQuery since the bind can't happen before the div is populated.\r\n\r\nThe next part was the hardest. First binding the mouseover and mouseout to the images so they change as they are rolled over:\r\n\r\n.. code-block:: javascript\r\n\r\n            $('.gallery li img').live(\"mouseover\",function(){{\r\n                $(this).removeClass(\"borderPatrol\");\r\n            }} );\r\n            $('.gallery li img').live(\"mouseout\",function(){{\r\n                 $(this).addClass(\"borderPatrol\");\r\n            }});\r\n\r\nJolly good show. The border patrol class used to add a border, but the behavior changed to just add opacity and I liked the name so I kept it.\r\n\r\n.. code-block:: css\r\n\r\n .borderPatrol {\r\n             border:none;\r\n             opacity:.3;\r\n             cursor:pointer;\r\n }\r\n\r\nOk so that works pretty good, except for thumbnail stickiness. \r\n\r\nThumbnail stickiness keeps the thumbnail of the selected image in the state that indicates the thumbnail is being displayed. In this case, opacity of 1.0, or clear. \r\n\r\nBut that doesn't happen correctly because as soon as the thumbnail is displayed and you mouse off of the dang thing, the borderPatrol class is added and opacity:.3 comes into play.\r\n\r\nHeck, that is one stinky pickle.\r\n\r\nTo fix this I added this code into the MarkLogic piece at the beginning of this article:\r\n\r\n.. code-block:: xquery\r\n\r\n  {if ($i=$index) then 'opeth' else ()}\r\n\r\nOpeth is the name of the class that I add to the img that was selected. \r\n\r\nThe opeth class:\r\n\r\n.. code-block:: css\r\n\r\n .opeth {\r\n    opacity:1.0;\r\n }\r\n\r\nThis didn't work because of the mouseout event which would through borderControl back on and the was css works, the latest class gets to determine the property, and that property is opacity and the value is .3 on borderPatrol. So that nullifies the earlier opeth class opacity of 1.0.\r\n\r\nSo I made this change:\r\n\r\n.. code-block:: css\r\n\r\n .opeth{\r\n    opacity:1.0 !important;\r\n }\r\n\r\nAnd then life was good and lo, the page began working and I was amazed.", 
      "date_updated": "2010-11-07 15:35:00", 
      "demo": "", 
      "markup": "r", 
      "title": "JQuery and MarkLogic Mashup for Photo Gallery", 
      "source_path": "", 
      "collection": 1, 
      "summary": "I've been fooling around with a thumbnail gallery that pulls up either an associated video or image. Here is how I got the workings to work.", 
      "source": "", 
      "user": 2, 
      "active": true, 
      "date_created": "2010-05-13 11:05:30", 
       
      "tags": "javascript jquery marklogic xquery"
    }
  }, 
  {
    "pk": 393, 
    "model": "blog.article", 
    "fields": {
      "body": "First Page Loads the Head\r\n-------------------------\r\n\r\nYou can actually have multipe `pages on the DOM <http://jquerymobile.com/demos/1.0b2/#/demos/1.0b2/docs/pages/page-anatomy.html>`_ at a time.  This is required for the slide animation, helps with page caching for the back button, and helps make things feel snappier.  When you request a brand new page from the server, that page's ``<body />`` is ajax'ed onto the DOM and the ``<title />`` is updated.\r\n\r\nThis means that the first page that you load that initializes requests the jQuery mobile script and initializes it is the one that loads the ``<head />`` tag is loaded.  From the `docs <http://jquerymobile.com/demos/1.0b2/#/demos/1.0b2/docs/pages/page-scripting.html>`_:\r\n\r\n  When you click a link in jQuery Mobile, the Ajax navigation system uses the link's href to formulate an Ajax request. Although the full page is loaded with Ajax, the framework only pulls in the contents of the page, and ignores anything in the head except for title tag contents.\r\n\r\nIn other words, on subsequent pages, you better have already imported the scripts and styles in the head that you need for subsequent page loads.\r\n\r\n\r\nExpanded Context\r\n----------------\r\n\r\nNow, if multiple \"pages\" are all on the DOM, when you craft a selector in jQuery, you have the potential of picking up lots of other elements than you were expecting.  We're used to our context being defined as a the single page served up from the server, so we can write a selector like this:\r\n\r\n.. code-block:: javascript\r\n\r\n  $(\".media-carousel li\")\r\n\r\nAnd only get back the ``<li />`` s that are on the page.  But now, if I nav to multiple pages with media carousels on them, on the 2nd one, when I execute this code, I'll select all ``<li />`` s from the 2nd *and* the 1st.  This quickly produces bugs that we don't have to watch out for in our normal server-assisted MVC architecture.\r\n\r\nConstrain to Page Context\r\n--------------------------------\r\n\r\nThe fix for jQuery Mobile, however, is super simple.  Per the `jQuery docs <http://api.jquery.com/jQuery/>`_:\r\n  \r\n  By default, selectors perform their searches within the DOM starting at the document root. However, an alternate context can be given for the search by using the optional second parameter to the $() function.\r\n\r\nIn other words, we want to provide the currently-operating page in jQuery mobile as the context for the selector.  Here's a snippet of the what the multimedia carousel selection might look like:\r\n\r\n.. code-block:: javascript\r\n\r\n  function carouselStuff($page) {\r\n    $(\".media-carousel li\", $page).doStuff();\r\n  }\r\n\r\n  $('div').live('pageshow', function  (e, ui) {\r\n    carouselStuff($(this));\r\n  });\r\n\r\nWhen a ``pageshow`` event is triggered, that means the containing page (``<div class=\"ui-page\"/>``) has een displayed with the newly ajax-requested content.  So, now our selections, bindings, and other jQuery goodness will only affect the current \"page\" context.  \r\n", 
      "date_published": "2011-09-01 13:58:08", 
      "image_path": "", 
      "title_slug": "jquery-mobile-selector-context", 
      "rendered_body": "<div class=\"section\" id=\"first-page-loads-the-head\">\n<h1>First Page Loads the Head</h1>\n<p>You can actually have multipe <a class=\"reference external\" href=\"http://jquerymobile.com/demos/1.0b2/#/demos/1.0b2/docs/pages/page-anatomy.html\">pages on the DOM</a> at a time.  This is required for the slide animation, helps with page caching for the back button, and helps make things feel snappier.  When you request a brand new page from the server, that page's <tt class=\"docutils literal\">&lt;body /&gt;</tt> is ajax'ed onto the DOM and the <tt class=\"docutils literal\">&lt;title /&gt;</tt> is updated.</p>\n<p>This means that the first page that you load that initializes requests the jQuery mobile script and initializes it is the one that loads the <tt class=\"docutils literal\">&lt;head /&gt;</tt> tag is loaded.  From the <a class=\"reference external\" href=\"http://jquerymobile.com/demos/1.0b2/#/demos/1.0b2/docs/pages/page-scripting.html\">docs</a>:</p>\n<blockquote>\nWhen you click a link in jQuery Mobile, the Ajax navigation system uses the link's href to formulate an Ajax request. Although the full page is loaded with Ajax, the framework only pulls in the contents of the page, and ignores anything in the head except for title tag contents.</blockquote>\n<p>In other words, on subsequent pages, you better have already imported the scripts and styles in the head that you need for subsequent page loads.</p>\n</div>\n<div class=\"section\" id=\"expanded-context\">\n<h1>Expanded Context</h1>\n<p>Now, if multiple &quot;pages&quot; are all on the DOM, when you craft a selector in jQuery, you have the potential of picking up lots of other elements than you were expecting.  We're used to our context being defined as a the single page served up from the server, so we can write a selector like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&quot;.media-carousel li&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div><p>And only get back the <tt class=\"docutils literal\">&lt;li /&gt;</tt> s that are on the page.  But now, if I nav to multiple pages with media carousels on them, on the 2nd one, when I execute this code, I'll select all <tt class=\"docutils literal\">&lt;li /&gt;</tt> s from the 2nd <em>and</em> the 1st.  This quickly produces bugs that we don't have to watch out for in our normal server-assisted MVC architecture.</p>\n</div>\n<div class=\"section\" id=\"constrain-to-page-context\">\n<h1>Constrain to Page Context</h1>\n<p>The fix for jQuery Mobile, however, is super simple.  Per the <a class=\"reference external\" href=\"http://api.jquery.com/jQuery/\">jQuery docs</a>:</p>\n<blockquote>\nBy default, selectors perform their searches within the DOM starting at the document root. However, an alternate context can be given for the search by using the optional second parameter to the $() function.</blockquote>\n<p>In other words, we want to provide the currently-operating page in jQuery mobile as the context for the selector.  Here's a snippet of the what the multimedia carousel selection might look like:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kd\">function</span> <span class=\"nx\">carouselStuff</span><span class=\"p\">(</span><span class=\"nx\">$page</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&quot;.media-carousel li&quot;</span><span class=\"p\">,</span> <span class=\"nx\">$page</span><span class=\"p\">).</span><span class=\"nx\">doStuff</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;div&#39;</span><span class=\"p\">).</span><span class=\"nx\">live</span><span class=\"p\">(</span><span class=\"s1\">&#39;pageshow&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span>  <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">ui</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">carouselStuff</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">));</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div><p>When a <tt class=\"docutils literal\">pageshow</tt> event is triggered, that means the containing page (<tt class=\"docutils literal\">&lt;div <span class=\"pre\">class=&quot;ui-page&quot;/&gt;</span></tt>) has een displayed with the newly ajax-requested content.  So, now our selections, bindings, and other jQuery goodness will only affect the current &quot;page&quot; context.</p>\n</div>\n", 
      "date_updated": "2011-09-01 14:03:47", 
      "demo": "", 
      "markup": "r", 
      "title": "jQuery Mobile Selector Context", 
      "source_path": "", 
      "collection": 1, 
      "summary": "As web developers we're used to being able to write a jQuery selector and easily get the DOM elements back on the page that we're looking for.  In the case of jQuery Mobile, it's slightly more complicated because a \"page\" is a different beast.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-09-01 13:58:52", 
       
      "tags": "javascript jquery jquery-mobile"
    }
  }, 
  {
    "pk": 321, 
    "model": "blog.article", 
    "fields": {
      "body": "So, let's use it.  If I have a bunch of answers to an online question submitted, looking like this on the page:\r\n\r\n.. code-block:: html\r\n\r\n <div class=\"answer\">\r\n   Imagine this is super long and goes on forever.\r\n </div>\r\n\r\nIn your document ready area, you'd apply the readmore plugin:\r\n\r\n.. code-block:: javascript\r\n\r\n $(\".answer\").readmore();\r\n\r\nThis is going to go through your class answer div's and apply two things:\r\n\r\n1. Abridge the shown text length (default is 500)\r\n2. Setup the \"read more\" click event\r\n\r\nSo, you're dom will now look something like this (except the shown length is much less than 500 chars here):\r\n\r\n.. code-block:: html\r\n\r\n <div class=\"answer\">\r\n   Imagine this is super long...\r\n   <span>&#8230;</span>\r\n   <span class=\"hidden\"> and goes on forever.</span>\r\n   <a class=\"more\">Read More</a>\r\n </div>\r\n\r\nAs you can see, applying styles to class hidden is currently up to the implementor, perhaps like so:\r\n\r\n.. code-block:: css\r\n\r\n .hidden {\r\n   display: none;\r\n }\r\n\r\nThe more class is only used internally in the plugin for the click event.\r\n\r\nIf you want to, you can modify the defaults either per-invocation:\r\n\r\n.. code-block:: javascript\r\n\r\n $(\".answer\").readmore({ \r\n   substr_len: 250\r\n });\r\n\r\nor for all invocations on the page:\r\n\r\n.. code-block:: javascript\r\n\r\n $.fn.readmore.defaults.substr_len = 250;\r\n $(\".answer\").readmore();\r\n\r\nIt's simple; it's powerful; it's Jquery.  It has only been rivaled by `kQuery <http://kquery.jtsnake.com/>`_.\r\n\r\nDownload the plugin at the `Github repo <https://github.com/jtsnake/jquery-readmore>`_.", 
      "date_published": "2010-06-28 13:46:43", 
      "image_path": "", 
      "title_slug": "jquery-plugin-readmore", 
      "rendered_body": "<p>So, let's use it.  If I have a bunch of answers to an online question submitted, looking like this on the page:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;answer&quot;</span><span class=\"nt\">&gt;</span>\n  Imagine this is super long and goes on forever.\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div><p>In your document ready area, you'd apply the readmore plugin:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&quot;.answer&quot;</span><span class=\"p\">).</span><span class=\"nx\">readmore</span><span class=\"p\">();</span>\n</pre></div>\n</div><p>This is going to go through your class answer div's and apply two things:</p>\n<ol class=\"arabic simple\">\n<li>Abridge the shown text length (default is 500)</li>\n<li>Setup the &quot;read more&quot; click event</li>\n</ol>\n<p>So, you're dom will now look something like this (except the shown length is much less than 500 chars here):</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;answer&quot;</span><span class=\"nt\">&gt;</span>\n  Imagine this is super long...\n  <span class=\"nt\">&lt;span&gt;</span><span class=\"ni\">&amp;#8230;</span><span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&quot;hidden&quot;</span><span class=\"nt\">&gt;</span> and goes on forever.<span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">&quot;more&quot;</span><span class=\"nt\">&gt;</span>Read More<span class=\"nt\">&lt;/a&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div><p>As you can see, applying styles to class hidden is currently up to the implementor, perhaps like so:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nc\">.hidden</span> <span class=\"p\">{</span>\n  <span class=\"k\">display</span><span class=\"o\">:</span> <span class=\"k\">none</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div><p>The more class is only used internally in the plugin for the click event.</p>\n<p>If you want to, you can modify the defaults either per-invocation:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&quot;.answer&quot;</span><span class=\"p\">).</span><span class=\"nx\">readmore</span><span class=\"p\">({</span>\n  <span class=\"nx\">substr_len</span><span class=\"o\">:</span> <span class=\"mi\">250</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div><p>or for all invocations on the page:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">readmore</span><span class=\"p\">.</span><span class=\"nx\">defaults</span><span class=\"p\">.</span><span class=\"nx\">substr_len</span> <span class=\"o\">=</span> <span class=\"mi\">250</span><span class=\"p\">;</span>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&quot;.answer&quot;</span><span class=\"p\">).</span><span class=\"nx\">readmore</span><span class=\"p\">();</span>\n</pre></div>\n</div><p>It's simple; it's powerful; it's Jquery.  It has only been rivaled by <a class=\"reference external\" href=\"http://kquery.jtsnake.com/\">kQuery</a>.</p>\n<p>Download the plugin at the <a class=\"reference external\" href=\"https://github.com/jtsnake/jquery-readmore\">Github repo</a>.</p>\n", 
      "date_updated": "2011-08-07 12:12:10", 
      "demo": "jtsnake/demo-readmore.html", 
      "markup": "r", 
      "title": "Jquery Plugin: readmore", 
      "source_path": "http://www.bitbucket.org/jtsnake/jquery-plugins/src/tip/readmore/readmore/", 
      "collection": 1, 
      "summary": "Jquery plugins are a joy to use, and they are surprisingly easy to write.  Everyone that writes lots of Jquery code should seek to take potentially-resuable functionalities of code and put them into a nice, compact plugin.  In the app I've been working on, we have a lot of user-generated content that we don't limit the length on, so it can grow very large.  To combat this, there is the UI pattern on the site that there is a \"read more\" link available to show the remaining text for the long-winded texts, while just showing a snippet otherwise.  This exists everywhere, for lots of different content; hence, the \"readmore\" plugin was born.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-06-28 13:47:31", 
       
      "tags": "javascript jquery plugins"
    }
  }, 
  {
    "pk": 322, 
    "model": "blog.article", 
    "fields": {
      "body": "The \"safesubmit\" plugin is going to disable submit buttons when clicked and, in most cases, re-enable them when the ajax request has completed.  On your app, if you had a class called \"safe\" on all the submit buttons that you wanted to exhibit this behavior, you could enable the plugin functionality with one line:\r\n\r\n.. code-block:: javascript\r\n \r\n $(\".safe\").safesubmit();\r\n\r\nAnd that's it.  It's simple and powerful.  It's likely, however, because this happened on my project as well that the client code is going to have more complicated business rules.  In our case, someone added extra form validation where the length of the submitted field was checked -- if it passed, it was submitted; otherwise, it was not.  In that case, the plugin never re-enabled the button to be again pressable.  So, I exposed the functions of the plugin to be public, allowing you to shortcircuit the normal flow, essentially notifying the plugin to the submit failure.  For example, here's a submit's onclick event snippet:\r\n\r\n.. code-block:: javascript\r\n\r\n if (valid()) {\r\n   $.ajax ({ ... });\r\n } else {\r\n   $.fn.safesubmit.failsubmit($(this));\r\n }\r\n\r\nIf you need, the \"safe\" and \"unsafe\" methods are also made public.  You can call them whenever needed.  \"safe\" is the state of having the click disabled.  \"unsafe\" means you can click the button. \r\n\r\nYou can also change default settings.  For instance, by default when you put the button in \"safe\" mode, it adds disabled=\"disabled\" attribute to the button and adds a class of \"disabled\".  You have the option of changing all 3 opts.  For instance, maybe you have a different class:\r\n\r\n.. code-block:: css\r\n\r\n  .dead {\r\n    background-color: #ababab;\r\n  }\r\n\r\nand want to apply that class instead.  Try this:\r\n\r\n.. code-block:: javascript\r\n\r\n  $.fn.safesubmit.defaults.disabled_class = \"dead\";\r\n  $(\".safe\").safesubmit();\r\n\r\nDownload the script on `Github <https://github.com/jtsnake/jquery-safesubmit>`_.", 
      "date_published": "2010-06-28 15:07:40", 
      "image_path": "", 
      "title_slug": "jquery-plugin-safesubmit", 
      "rendered_body": "<p>The &quot;safesubmit&quot; plugin is going to disable submit buttons when clicked and, in most cases, re-enable them when the ajax request has completed.  On your app, if you had a class called &quot;safe&quot; on all the submit buttons that you wanted to exhibit this behavior, you could enable the plugin functionality with one line:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&quot;.safe&quot;</span><span class=\"p\">).</span><span class=\"nx\">safesubmit</span><span class=\"p\">();</span>\n</pre></div>\n</div><p>And that's it.  It's simple and powerful.  It's likely, however, because this happened on my project as well that the client code is going to have more complicated business rules.  In our case, someone added extra form validation where the length of the submitted field was checked -- if it passed, it was submitted; otherwise, it was not.  In that case, the plugin never re-enabled the button to be again pressable.  So, I exposed the functions of the plugin to be public, allowing you to shortcircuit the normal flow, essentially notifying the plugin to the submit failure.  For example, here's a submit's onclick event snippet:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">valid</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n  <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span> <span class=\"p\">({</span> <span class=\"p\">...</span> <span class=\"p\">});</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n  <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">safesubmit</span><span class=\"p\">.</span><span class=\"nx\">failsubmit</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div><p>If you need, the &quot;safe&quot; and &quot;unsafe&quot; methods are also made public.  You can call them whenever needed.  &quot;safe&quot; is the state of having the click disabled.  &quot;unsafe&quot; means you can click the button.</p>\n<p>You can also change default settings.  For instance, by default when you put the button in &quot;safe&quot; mode, it adds disabled=&quot;disabled&quot; attribute to the button and adds a class of &quot;disabled&quot;.  You have the option of changing all 3 opts.  For instance, maybe you have a different class:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nc\">.dead</span> <span class=\"p\">{</span>\n  <span class=\"k\">background-color</span><span class=\"o\">:</span> <span class=\"m\">#ababab</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div><p>and want to apply that class instead.  Try this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">safesubmit</span><span class=\"p\">.</span><span class=\"nx\">defaults</span><span class=\"p\">.</span><span class=\"nx\">disabled_class</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;dead&quot;</span><span class=\"p\">;</span>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&quot;.safe&quot;</span><span class=\"p\">).</span><span class=\"nx\">safesubmit</span><span class=\"p\">();</span>\n</pre></div>\n</div><p>Download the script on <a class=\"reference external\" href=\"https://github.com/jtsnake/jquery-safesubmit\">Github</a>.</p>\n", 
      "date_updated": "2011-08-07 12:22:17", 
      "demo": "jtsnake/demo-safesubmit.html", 
      "markup": "r", 
      "title": "Jquery Plugin: safesubmit", 
      "source_path": "http://www.bitbucket.org/jtsnake/jquery-plugins/src/tip/safesubmit/safesubmit/", 
      "collection": 1, 
      "summary": "Jquery gives a great, easy-to-use mechanism for extending its API and creating your own plugins.  For stuff that looks like it could be useful generally, you should really try to put it into a nice little plugin package.  For submit buttons, there is a general thought that they shouldn't be clicked twice (especially for functions such as financial transactions), so I created a plugin that fits an app that I have been working on recently, where there are many, many submit buttons, saving very granual pieces of content through ajax requests.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-06-28 15:08:25", 
       
      "tags": "ajax javascript jquery plugins"
    }
  }, 
  {
    "pk": 358, 
    "model": "blog.article", 
    "fields": {
      "body": "Here's the breakdown of the `slideshare slidedeck <http://www.slideshare.net/rockycode/jquery-ajax-json-on-django>`_:\r\n\r\nJquery\r\n---------\r\n\r\n- A Javascript framework\r\n- \"Write less, do more\"\r\n- Select the dom - $(\".selection\")\r\n- Traverse the dom - $(\".my\").parent()\r\n- Manipulate the dom - $(\".my\").append(\"dectomy\")\r\n- Provides an Ajax API - $.ajax()\r\n- Framework for providing your own functionality (plugins) - $(\".new\").operate()\r\n\r\nAjax\r\n---------\r\n\r\n- Asynchronous Javascript and Xml\r\n- Jquery API - $.ajax(), $.get(), $.post(), $.getJSON()\r\n\r\nJson\r\n---------\r\n\r\n- JavaScript Object Notation\r\n- Terse\r\n- Flexible, nestable\r\n- Native in Javascript\r\n\r\nDjango\r\n---------\r\n\r\n- Web framework built on Python\r\n- \"encourages... clean, pragmatic design\"\r\n- Django-piston - mini-framework to create RESTful APIs for your data\r\n\r\n\r\nBecause this presentation was originally written for a Django-loving audience who wanted to know more about Jquery, Ajax, and Json, I decided to make the most basic Django app that could easily function with the other (mostly) client-based technologies.  \r\n\r\nSample App\r\n--------------\r\n\r\nThe result was the \"ask\" app (`source here <https://bitbucket.org/jtsnake/ask>`_).  In the app, we have what is basically an FAQ.  Previously on the Internetz somewhere, I saw a fun FAQ where two people answered every question and almost the most fun thing for me was comparing the answers of the two people to one another.  The difference in their answers was often humorous and entertaining in addition to answering the question.  The questions were also often ridiculous.  This seemed like a fun format, so I asked my friend, `Steve <http://rockycode.com/blog/author/steveo/>`_ to answer a few questions with me, and we created the app.  Techs:\r\n\r\n- `Jquery <http://jquery.com/>`_\r\n- `Jquery Templates <http://api.jquery.com/category/plugins/templates/>`_\r\n- `Sammy.js <http://code.quirkey.com/sammy/>`_\r\n- `django-piston <https://bitbucket.org/jespern/django-piston/wiki/Home>`_\r\n- `Django <http://www.djangoproject.com/>`_\r\n\r\n\r\nOn the backend, django-piston allows us to easily define handlers for the data that we want to expose through a RESTful API.  We define the urls to get to the handlers at, and boom!, we have json-flavored data being queried by Django, and displayed to requesters at the defined urls.\r\n\r\nFrom here, we're very client heavy.  \r\n\r\nJquery Templates\r\n--------------------\r\n\r\nJquery gives us an easy api to $.get() the data that we want.  We use Jquery Templates to do what Django templates may normally do for us:  Apply markup to our dynamic data.  With Jquery Templates, the server can send almost-raw data and the client, which seems to be a naturally fitting place for presentation transformation anyway, can now be fully in charge of what markup data should be displayed within.\r\n\r\nSammy.js\r\n------------\r\n\r\nWe also used just a portion of Sammy.js, the routing feature, to take care of the controller logic.  I like the Sammy.js routing for the same reason that I like the Django urls.py routing: it's very imperative, which I feel is elegant:  \"Here's my url pattern, and here's the logic that goes with that.\"\r\n\r\nWhy SOUIT\r\n-------------\r\n\r\n`SOUIT <http://souit.org/>`_ = Service-oriented User Interface Technology.  Why would we want to create an app like this?  Doesn't Django have the ability to do this all for me -- url routing, templating?  It does.  But that doesn't mean that it wouldn't be more fitting to have this happen elsewhere, if only partially.  Since browsers are becoming beefier and more capable of handling client side transformations like templating and with tools like Jquery and Sammy that make request and response routing very clean, why not try it there?  Throw in the requirement of \"asynchronous\"ity, and you may just be happy you have the ability to do all this on the client.  And it's cool -- worth an additional 5 points.  Plus, now that our web client is essentially a single-page app with all the smarts it needs to function, we can consider different backend technologies too.  Hmmm, a database that exposes its data through mere REST APIs?  CouchDb, maybe?\r\n\r\nWhat do you think?  This example 'ask' application is definitely not extremely compelling, but what are the best uses of this particular client-heavy technology stack that you can think of?\r\n", 
      "date_published": "2011-01-27 17:36:47", 
      "image_path": "", 
      "title_slug": "jquery-ajax-json-django", 
      "rendered_body": "<p>Here's the breakdown of the <a class=\"reference external\" href=\"http://www.slideshare.net/rockycode/jquery-ajax-json-on-django\">slideshare slidedeck</a>:</p>\n<div class=\"section\" id=\"jquery\">\n<h1>Jquery</h1>\n<ul class=\"simple\">\n<li>A Javascript framework</li>\n<li>&quot;Write less, do more&quot;</li>\n<li>Select the dom - $(&quot;.selection&quot;)</li>\n<li>Traverse the dom - $(&quot;.my&quot;).parent()</li>\n<li>Manipulate the dom - $(&quot;.my&quot;).append(&quot;dectomy&quot;)</li>\n<li>Provides an Ajax API - $.ajax()</li>\n<li>Framework for providing your own functionality (plugins) - $(&quot;.new&quot;).operate()</li>\n</ul>\n</div>\n<div class=\"section\" id=\"ajax\">\n<h1>Ajax</h1>\n<ul class=\"simple\">\n<li>Asynchronous Javascript and Xml</li>\n<li>Jquery API - $.ajax(), $.get(), $.post(), $.getJSON()</li>\n</ul>\n</div>\n<div class=\"section\" id=\"json\">\n<h1>Json</h1>\n<ul class=\"simple\">\n<li>JavaScript Object Notation</li>\n<li>Terse</li>\n<li>Flexible, nestable</li>\n<li>Native in Javascript</li>\n</ul>\n</div>\n<div class=\"section\" id=\"django\">\n<h1>Django</h1>\n<ul class=\"simple\">\n<li>Web framework built on Python</li>\n<li>&quot;encourages... clean, pragmatic design&quot;</li>\n<li>Django-piston - mini-framework to create RESTful APIs for your data</li>\n</ul>\n<p>Because this presentation was originally written for a Django-loving audience who wanted to know more about Jquery, Ajax, and Json, I decided to make the most basic Django app that could easily function with the other (mostly) client-based technologies.</p>\n</div>\n<div class=\"section\" id=\"sample-app\">\n<h1>Sample App</h1>\n<p>The result was the &quot;ask&quot; app (<a class=\"reference external\" href=\"https://bitbucket.org/jtsnake/ask\">source here</a>).  In the app, we have what is basically an FAQ.  Previously on the Internetz somewhere, I saw a fun FAQ where two people answered every question and almost the most fun thing for me was comparing the answers of the two people to one another.  The difference in their answers was often humorous and entertaining in addition to answering the question.  The questions were also often ridiculous.  This seemed like a fun format, so I asked my friend, <a class=\"reference external\" href=\"http://rockycode.com/blog/author/steveo/\">Steve</a> to answer a few questions with me, and we created the app.  Techs:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"http://jquery.com/\">Jquery</a></li>\n<li><a class=\"reference external\" href=\"http://api.jquery.com/category/plugins/templates/\">Jquery Templates</a></li>\n<li><a class=\"reference external\" href=\"http://code.quirkey.com/sammy/\">Sammy.js</a></li>\n<li><a class=\"reference external\" href=\"https://bitbucket.org/jespern/django-piston/wiki/Home\">django-piston</a></li>\n<li><a class=\"reference external\" href=\"http://www.djangoproject.com/\">Django</a></li>\n</ul>\n<p>On the backend, django-piston allows us to easily define handlers for the data that we want to expose through a RESTful API.  We define the urls to get to the handlers at, and boom!, we have json-flavored data being queried by Django, and displayed to requesters at the defined urls.</p>\n<p>From here, we're very client heavy.</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h1>Jquery Templates</h1>\n<p>Jquery gives us an easy api to $.get() the data that we want.  We use Jquery Templates to do what Django templates may normally do for us:  Apply markup to our dynamic data.  With Jquery Templates, the server can send almost-raw data and the client, which seems to be a naturally fitting place for presentation transformation anyway, can now be fully in charge of what markup data should be displayed within.</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h1>Sammy.js</h1>\n<p>We also used just a portion of Sammy.js, the routing feature, to take care of the controller logic.  I like the Sammy.js routing for the same reason that I like the Django urls.py routing: it's very imperative, which I feel is elegant:  &quot;Here's my url pattern, and here's the logic that goes with that.&quot;</p>\n</div>\n<div class=\"section\" id=\"why-souit\">\n<h1>Why SOUIT</h1>\n<p><a class=\"reference external\" href=\"http://souit.org/\">SOUIT</a> = Service-oriented User Interface Technology.  Why would we want to create an app like this?  Doesn't Django have the ability to do this all for me -- url routing, templating?  It does.  But that doesn't mean that it wouldn't be more fitting to have this happen elsewhere, if only partially.  Since browsers are becoming beefier and more capable of handling client side transformations like templating and with tools like Jquery and Sammy that make request and response routing very clean, why not try it there?  Throw in the requirement of &quot;asynchronous&quot;ity, and you may just be happy you have the ability to do all this on the client.  And it's cool -- worth an additional 5 points.  Plus, now that our web client is essentially a single-page app with all the smarts it needs to function, we can consider different backend technologies too.  Hmmm, a database that exposes its data through mere REST APIs?  CouchDb, maybe?</p>\n<p>What do you think?  This example 'ask' application is definitely not extremely compelling, but what are the best uses of this particular client-heavy technology stack that you can think of?</p>\n</div>\n", 
      "date_updated": "2011-01-27 23:12:01", 
      "demo": "", 
      "markup": "r", 
      "title": "Jquery, Ajax, Json on Django", 
      "source_path": "https://bitbucket.org/jtsnake/ask/changesets", 
      "collection": 1, 
      "summary": "Jquery, Ajax, Json, Django -- this is quite a laundry list of technologies.  In fact, it's pretty much the whole stack: client tech, server requests, over-the-network data format, and a backend app server.  In the following slidedeck and example code, we're going to touch on the whole stack and not get too deep into any one area.  By the end, you should be able to at least have a grasp of what technologies one can use in an Ajax Django application, a little bit of what they're capable of, and then, hopefully, a list in your brain that you can go back, reference, and then drill into specific technologies when you want to go build something similar yourself.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-01-27 17:39:15", 
       
      "tags": "ajax django django-piston jquery-templates json sammyjs"
    }
  }, 
  {
    "pk": 117, 
    "model": "blog.article", 
    "fields": {
      "body": "Meet the new web.  The simpler the better. The cleaner the better.  The more pleasing the colors the better.  The fuzzier feelings the better.  The latest fuzzies have been brought on by a slew of modals.  Previously, we haven't used many modals in our layouts and designs, so here's the first working pattern on how to get this kind of stuff working.  \r\n\r\nThis solution allows:\r\n<ul>\r\n<li>Content to appear in a modal</li>\r\n<li>Validation errors post back to the modal</li>\r\n<li>Edits made in a modal persist back to the database</li>\r\n<li>Success messages appear on parent page</li>\r\n</ul>\r\n\r\n\r\nExample uses these technologies:\r\n<ul>\r\n<li>JSF/Facelets</li> \r\n<li>Spring 2.5</li> \r\n<li>JPA/Hibernate</li> \r\n<li>Hibernate validators</li> \r\n<li>Seam</li> \r\n<li>JQuery</li> \r\n</ul>\r\n\r\nThis includes these pieces:\r\n<ul>\r\n<li>Parent JSF</li> \r\n<li>JQuery for Modal - using <a href=\"\">jQuery</a> and <a href=\"\">jqModal</a></li> \r\n<li>Modal JSF</li> \r\n<li>Seam pages.xml for navigation</li> \r\n<li>View bean</li> \r\n<li>Model object</li> \r\n</ul>\r\n\r\nOverall, the flow occurs as follows:\r\n<ul>\r\n<li>Nav to parent page</li> \r\n<li>Trigger modal with link</li> \r\n<li>Modal appears </li> \r\n<li>Content is loaded in modal</li> \r\n<li>Submissions occur via AJAX to the view bean</li> \r\n<li>View bean logic and Seam determine outcome</li> \r\n<li>If errors, AJAX re-renders in modal</li> \r\n<li>If save successful, parent page is re-rendered with message</li> \r\n</ul>\r\n\r\n<br />\r\n<h2>The Parent Page (person-info-personal.xhtml)</h2>\r\n\r\n<h3>Javascript for Modal:</h3>\r\n<pre>\r\n<code class=\"javascript\">\r\n<script type=\"text/javascript\" src=\"#{request.contextPath}/scripts/jquery.pack.js\"></script>\r\n<script type=\"text/javascript\" src=\"#{request.contextPath}/scripts/jqModal.pack.js\"></script>\r\n<script type=\"text/javascript\">\r\n    jQuery(document).ready(function() {\r\n        jQuery('#modal-edit-personal').jqm({\r\n            ajax: '#{request.contextPath}/person-info-personal-edit.jsf?personId=#{personDetailsBean.person.id}&amp;conversationId=#{conversation.id}&amp;time=#{personDetailsBean.currentMillis}',\r\n            trigger: '#btn-edit-personal',\r\n            modal: true\r\n        });\r\n    })\r\n</script>\r\n</code></pre>\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>The Seam conversation object is just available.  No convenience method required to retrieve it.</li>\r\n<li>Additional url parameter required to get around an IE caching issue.  We just need a unique value so that the AJAX request isn't assumed cached by IE.  In this case, I used the current time in milliseconds (Method on view bean).</li>\r\n</ul>\r\n\r\n<h3>Trigger for Modal:</h3>\r\n<pre>\r\n<code class=\"jsp\">\r\n<a id=\"btn-edit-personal\" class=\"edit-link-icon edit-link float-right\" href=\"#\">Edit</a>\r\n</code></pre>\r\n\r\n<h3>Modal Container:</h3>\r\n<pre>\r\n<code class=\"jsp\">\r\n<div id=\"modal-edit-personal\" class=\"jqmWindow smallWindow\"></div>\r\n</code></pre>\r\n<strong>Note:</strong>\r\n- Just include this right before the end of the html body.  \r\n\r\n<h3>Style for Modal</h3>\r\n<pre>\r\n<code class=\"css\">\r\n.smallWindow {components.css (line 105)\r\n  margin-left:-250px;\r\n  top:15%; \r\n  width:500px;\r\n}\r\n.jqmWindow {components.css (line 84)\r\n  background-color:#FFFFFF;\r\n  border:5px solid #DDDDD3;\r\n  color:#333333;\r\n  display:none;\r\n  left:50%;\r\n  margin-left:-375px;\r\n  padding:5px;\r\n  position:fixed;\r\n  top:8%;\r\n  width:750px;\r\n  z-index:3000 !important;\r\n}\r\n</code></pre>\r\n\r\n<h3>Success Validation Message</h3>\r\n<pre>\r\n<code class=\"jsp\">\r\n<h:panelGroup rendered=\"#{param['saveSuccess'] ne null}\">\r\n    <div id=\"edit-success\" class=\"alert\" style=\"display: block;\">\r\n        <p>Success: Changes saved for #{personDetailsBean.person.name.fullName}.</p>\r\n    </div>\r\n</h:panelGroup>\r\n</code></pre>\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>The parameter to determine ability to render is just a param[].  It's not bound to the bean, which means it disappears on subsequent requests, which is what we want.</li>\r\n</ul>\r\n\r\n<h2>Seam Navigation</h2>\r\n\r\n<h3>pages.xml Entry for modal:</h3>\r\n<pre>\r\n<code class=\"xml\">\r\n<page view-id=\"/person-info-personal-edit.xhtml\">\r\n    <begin-conversation join=\"true\" flush-mode=\"MANUAL\"></begin-conversation>\r\n    <param name=\"personId\" value=\"#{personDetailsBean.personId}\"></param>\r\n    <action execute=\"#{personDetailsBean.loadPerson}\" if=\"#{personDetailsBean.person eq null}\"></action>\r\n    <navigation>\r\n        <rule if-outcome=\"saved-person-edit\">\r\n            <redirect view-id=\"/person-info-personal.xhtml\">\r\n                <param name=\"personId\" value=\"#{param['personId'] != null ? param['personId'] : personId}\"></param>\r\n                <param name=\"saveSuccess\" value=\"true\"></param>\r\n            </redirect>\r\n        </rule>\r\n    </navigation>\r\n</page>\r\n</code></pre>\r\n<h3>pages.xml Entry for parent:</h3>\r\n<pre>\r\n<code class=\"xml\">\r\n<page view-id=\"/person-info-personal.xhtml\">\r\n\t<begin-conversation join=\"true\" flush-mode=\"MANUAL\"></begin-conversation>\r\n\t<param name=\"personId\" value=\"#{personDetailsBean.personId}\"></param>\r\n\t<action execute=\"#{personDetailsBean.loadPerson}\" if=\"#{personDetailsBean.person eq null}\"></action>\r\n\t<!-- ... -->\r\n</page>\r\n</code></pre>\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>The \"saveSuccess\" parameter is the key to showing the success message on the parent page.</li>\r\n</ul>\r\n\r\n<h2>The Modal Page (person-info-personal-edit.xhtml)</h2>\r\n\r\n<h3>Modal Markup:</h3>\r\n<pre>\r\n<code class=\"jsp\">\r\n<a4j:form id=\"info-edit-form\" ajaxSubmit=\"true\" reRender=\"alerts\">\r\n\r\n    <a4j:outputPanel id=\"alerts\">\r\n        <ldsp:alerts />\r\n    </a4j:outputPanel>\r\n\r\n    <div class=\"target\">\r\n        <h2>Edit Personal Information</h2>\r\n\r\n        <p>Please make the necessary changes and press \"Save\" when finished.</p>\r\n\r\n        <div id=\"notes\">\r\n            <dl>\r\n                <dt>Official Name</dt>\r\n                <dd>\r\n                    #{personDetailsBean.person.name.fullName}\r\n                </dd>\r\n            </dl>\r\n            <dl class=\"short-inputs\">\r\n                <dt>Preferred Name</dt>\r\n                <dd>\r\n                    <h:inputText styleClass=\"input-text pref-name-field\" value=\"#{personDetailsBean.person.preferredFirstName}\" required=\"true\" requiredMessage=\"Preferred first name required.\" />\r\n                </dd>\r\n                <dd>\r\n                    <h:inputText styleClass=\"input-text pref-name-field\" value=\"#{personDetailsBean.person.preferredMiddleName}\" required=\"true\" requiredMessage=\"Preferred first name required.\" />\r\n                </dd>\r\n                <dd>\r\n                    <h:inputText styleClass=\"input-text pref-name-field\" value=\"#{personDetailsBean.person.preferredLastName}\" required=\"true\" requiredMessage=\"Preferred first name required.\" />\r\n                </dd>\r\n            </dl>\r\n            <dl>\r\n                <dt>Blood Type</dt>\r\n                <dd>\r\n                    <h:selectOneMenu value=\"#{personDetailsBean.person.bloodType}\">\r\n                        <f:selectItem value=\"#{null}\" itemLabel=\"None given\" />\r\n                        <f:selectItems value=\"#{personDetailsBean.bloodTypesList}\" />\r\n                    </h:selectOneMenu>\r\n                </dd>\r\n            </dl>\r\n\r\n            <!--[if IE 6]>\r\n            <dl>\r\n            <dt>&nbsp;</dt>\r\n            <dd>&nbsp;</dd>\r\n            </dl><![endif]-->\r\n\r\n            <p class=\"buttons\">\r\n                <h:commandButton action=\"#{personDetailsBean.savePerson}\" value=\"Save\" styleClass=\"button-default\" />\r\n                <input type=\"button\" class=\"button-nondefault jqmClose\" value=\"Cancel\" />\r\n            </p>\r\n        </div>\r\n    </div>\r\n</a4j:form>\r\n</code></pre>\r\n\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>&lt;ldsp:alerts /&gt; - custom component to display Alerts.</li>\r\n<li>The ajaxSubmit attribute on the a4j:form must use a capital S for 'Submit'.  (My code renderer on this page is lowercasing that for some reason.)  Same with the 'r' on 'reRender'.</li>\r\n\r\n<h2>Server-side Logic</h2>\r\n\r\n<h3>Java Model:</h3>\r\n<pre>\r\n<code class=\"java\">\r\n@Entity\r\npublic class Person implements Serializable {\r\n    @Column(name = \"PREF_FIRST\")\r\n    private String preferredFirstName;\r\n\r\n    @Column(name = \"PREF_MIDDLE\")\r\n    private String preferredMiddleName;\r\n\r\n    @Column(name = \"PREF_LAST\")\r\n    private String preferredLastName;\r\n\r\n    @Column(name = \"BLOOD_TYPE\")\r\n    private String bloodType;\r\n\r\n    /** ... */\r\n}\r\n</code></pre>\r\n\r\n<h3>View Bean:</h3>\r\n<pre>\r\n<code class=\"java\">\r\n@Controller\r\n@Scope(\"conversation\")\r\n@SuppressWarnings(\"serial\")\r\npublic class PersonDetailsBean implements Serializable {\r\n   public String savePerson() {\r\n       String retval = null;\r\n       try {\r\n            personDetailsService.modifiyPerson(getPerson()); // saves missionary\r\n            retval = \"saved-person-edit\"; \r\n       } catch (OptimisticLockException e) {\r\n            Alert.addErrorAlert(\"Optimistic Lock: The object was modified out from under you.\");\r\n       }\r\n       return retval;\r\n   }\r\n   // Method to circumvent IE caching issue\r\n   public long getCurrentMillis() {\r\n       return new Date().getTime();\r\n   }\r\n   /* ... */\r\n}\r\n</code></pre>\r\n\r\n", 
      "date_published": "2008-11-30 15:12:01", 
      "image_path": null, 
      "title_slug": "jsf-modal-goodness", 
      "rendered_body": "Meet the new web.  The simpler the better. The cleaner the better.  The more pleasing the colors the better.  The fuzzier feelings the better.  The latest fuzzies have been brought on by a slew of modals.  Previously, we haven't used many modals in our layouts and designs, so here's the first working pattern on how to get this kind of stuff working.  \r\n\r\nThis solution allows:\r\n<ul>\r\n<li>Content to appear in a modal</li>\r\n<li>Validation errors post back to the modal</li>\r\n<li>Edits made in a modal persist back to the database</li>\r\n<li>Success messages appear on parent page</li>\r\n</ul>\r\n\r\n\r\nExample uses these technologies:\r\n<ul>\r\n<li>JSF/Facelets</li> \r\n<li>Spring 2.5</li> \r\n<li>JPA/Hibernate</li> \r\n<li>Hibernate validators</li> \r\n<li>Seam</li> \r\n<li>JQuery</li> \r\n</ul>\r\n\r\nThis includes these pieces:\r\n<ul>\r\n<li>Parent JSF</li> \r\n<li>JQuery for Modal - using <a href=\"\">jQuery</a> and <a href=\"\">jqModal</a></li> \r\n<li>Modal JSF</li> \r\n<li>Seam pages.xml for navigation</li> \r\n<li>View bean</li> \r\n<li>Model object</li> \r\n</ul>\r\n\r\nOverall, the flow occurs as follows:\r\n<ul>\r\n<li>Nav to parent page</li> \r\n<li>Trigger modal with link</li> \r\n<li>Modal appears </li> \r\n<li>Content is loaded in modal</li> \r\n<li>Submissions occur via AJAX to the view bean</li> \r\n<li>View bean logic and Seam determine outcome</li> \r\n<li>If errors, AJAX re-renders in modal</li> \r\n<li>If save successful, parent page is re-rendered with message</li> \r\n</ul>\r\n\r\n<br />\r\n<h2>The Parent Page (person-info-personal.xhtml)</h2>\r\n\r\n<h3>Javascript for Modal:</h3>\r\n<pre>\r\n<code class=\"javascript\">\r\n<script type=\"text/javascript\" src=\"#{request.contextPath}/scripts/jquery.pack.js\"></script>\r\n<script type=\"text/javascript\" src=\"#{request.contextPath}/scripts/jqModal.pack.js\"></script>\r\n<script type=\"text/javascript\">\r\n    jQuery(document).ready(function() {\r\n        jQuery('#modal-edit-personal').jqm({\r\n            ajax: '#{request.contextPath}/person-info-personal-edit.jsf?personId=#{personDetailsBean.person.id}&amp;conversationId=#{conversation.id}&amp;time=#{personDetailsBean.currentMillis}',\r\n            trigger: '#btn-edit-personal',\r\n            modal: true\r\n        });\r\n    })\r\n</script>\r\n</code></pre>\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>The Seam conversation object is just available.  No convenience method required to retrieve it.</li>\r\n<li>Additional url parameter required to get around an IE caching issue.  We just need a unique value so that the AJAX request isn't assumed cached by IE.  In this case, I used the current time in milliseconds (Method on view bean).</li>\r\n</ul>\r\n\r\n<h3>Trigger for Modal:</h3>\r\n<pre>\r\n<code class=\"jsp\">\r\n<a id=\"btn-edit-personal\" class=\"edit-link-icon edit-link float-right\" href=\"#\">Edit</a>\r\n</code></pre>\r\n\r\n<h3>Modal Container:</h3>\r\n<pre>\r\n<code class=\"jsp\">\r\n<div id=\"modal-edit-personal\" class=\"jqmWindow smallWindow\"></div>\r\n</code></pre>\r\n<strong>Note:</strong>\r\n- Just include this right before the end of the html body.  \r\n\r\n<h3>Style for Modal</h3>\r\n<pre>\r\n<code class=\"css\">\r\n.smallWindow {components.css (line 105)\r\n  margin-left:-250px;\r\n  top:15%; \r\n  width:500px;\r\n}\r\n.jqmWindow {components.css (line 84)\r\n  background-color:#FFFFFF;\r\n  border:5px solid #DDDDD3;\r\n  color:#333333;\r\n  display:none;\r\n  left:50%;\r\n  margin-left:-375px;\r\n  padding:5px;\r\n  position:fixed;\r\n  top:8%;\r\n  width:750px;\r\n  z-index:3000 !important;\r\n}\r\n</code></pre>\r\n\r\n<h3>Success Validation Message</h3>\r\n<pre>\r\n<code class=\"jsp\">\r\n<h:panelGroup rendered=\"#{param['saveSuccess'] ne null}\">\r\n    <div id=\"edit-success\" class=\"alert\" style=\"display: block;\">\r\n        <p>Success: Changes saved for #{personDetailsBean.person.name.fullName}.</p>\r\n    </div>\r\n</h:panelGroup>\r\n</code></pre>\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>The parameter to determine ability to render is just a param[].  It's not bound to the bean, which means it disappears on subsequent requests, which is what we want.</li>\r\n</ul>\r\n\r\n<h2>Seam Navigation</h2>\r\n\r\n<h3>pages.xml Entry for modal:</h3>\r\n<pre>\r\n<code class=\"xml\">\r\n<page view-id=\"/person-info-personal-edit.xhtml\">\r\n    <begin-conversation join=\"true\" flush-mode=\"MANUAL\"></begin-conversation>\r\n    <param name=\"personId\" value=\"#{personDetailsBean.personId}\"></param>\r\n    <action execute=\"#{personDetailsBean.loadPerson}\" if=\"#{personDetailsBean.person eq null}\"></action>\r\n    <navigation>\r\n        <rule if-outcome=\"saved-person-edit\">\r\n            <redirect view-id=\"/person-info-personal.xhtml\">\r\n                <param name=\"personId\" value=\"#{param['personId'] != null ? param['personId'] : personId}\"></param>\r\n                <param name=\"saveSuccess\" value=\"true\"></param>\r\n            </redirect>\r\n        </rule>\r\n    </navigation>\r\n</page>\r\n</code></pre>\r\n<h3>pages.xml Entry for parent:</h3>\r\n<pre>\r\n<code class=\"xml\">\r\n<page view-id=\"/person-info-personal.xhtml\">\r\n\t<begin-conversation join=\"true\" flush-mode=\"MANUAL\"></begin-conversation>\r\n\t<param name=\"personId\" value=\"#{personDetailsBean.personId}\"></param>\r\n\t<action execute=\"#{personDetailsBean.loadPerson}\" if=\"#{personDetailsBean.person eq null}\"></action>\r\n\t<!-- ... -->\r\n</page>\r\n</code></pre>\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>The \"saveSuccess\" parameter is the key to showing the success message on the parent page.</li>\r\n</ul>\r\n\r\n<h2>The Modal Page (person-info-personal-edit.xhtml)</h2>\r\n\r\n<h3>Modal Markup:</h3>\r\n<pre>\r\n<code class=\"jsp\">\r\n<a4j:form id=\"info-edit-form\" ajaxSubmit=\"true\" reRender=\"alerts\">\r\n\r\n    <a4j:outputPanel id=\"alerts\">\r\n        <ldsp:alerts />\r\n    </a4j:outputPanel>\r\n\r\n    <div class=\"target\">\r\n        <h2>Edit Personal Information</h2>\r\n\r\n        <p>Please make the necessary changes and press \"Save\" when finished.</p>\r\n\r\n        <div id=\"notes\">\r\n            <dl>\r\n                <dt>Official Name</dt>\r\n                <dd>\r\n                    #{personDetailsBean.person.name.fullName}\r\n                </dd>\r\n            </dl>\r\n            <dl class=\"short-inputs\">\r\n                <dt>Preferred Name</dt>\r\n                <dd>\r\n                    <h:inputText styleClass=\"input-text pref-name-field\" value=\"#{personDetailsBean.person.preferredFirstName}\" required=\"true\" requiredMessage=\"Preferred first name required.\" />\r\n                </dd>\r\n                <dd>\r\n                    <h:inputText styleClass=\"input-text pref-name-field\" value=\"#{personDetailsBean.person.preferredMiddleName}\" required=\"true\" requiredMessage=\"Preferred first name required.\" />\r\n                </dd>\r\n                <dd>\r\n                    <h:inputText styleClass=\"input-text pref-name-field\" value=\"#{personDetailsBean.person.preferredLastName}\" required=\"true\" requiredMessage=\"Preferred first name required.\" />\r\n                </dd>\r\n            </dl>\r\n            <dl>\r\n                <dt>Blood Type</dt>\r\n                <dd>\r\n                    <h:selectOneMenu value=\"#{personDetailsBean.person.bloodType}\">\r\n                        <f:selectItem value=\"#{null}\" itemLabel=\"None given\" />\r\n                        <f:selectItems value=\"#{personDetailsBean.bloodTypesList}\" />\r\n                    </h:selectOneMenu>\r\n                </dd>\r\n            </dl>\r\n\r\n            <!--[if IE 6]>\r\n            <dl>\r\n            <dt>&nbsp;</dt>\r\n            <dd>&nbsp;</dd>\r\n            </dl><![endif]-->\r\n\r\n            <p class=\"buttons\">\r\n                <h:commandButton action=\"#{personDetailsBean.savePerson}\" value=\"Save\" styleClass=\"button-default\" />\r\n                <input type=\"button\" class=\"button-nondefault jqmClose\" value=\"Cancel\" />\r\n            </p>\r\n        </div>\r\n    </div>\r\n</a4j:form>\r\n</code></pre>\r\n\r\n<strong>Note:</strong>\r\n<ul>\r\n<li>&lt;ldsp:alerts /&gt; - custom component to display Alerts.</li>\r\n<li>The ajaxSubmit attribute on the a4j:form must use a capital S for 'Submit'.  (My code renderer on this page is lowercasing that for some reason.)  Same with the 'r' on 'reRender'.</li>\r\n\r\n<h2>Server-side Logic</h2>\r\n\r\n<h3>Java Model:</h3>\r\n<pre>\r\n<code class=\"java\">\r\n@Entity\r\npublic class Person implements Serializable {\r\n    @Column(name = \"PREF_FIRST\")\r\n    private String preferredFirstName;\r\n\r\n    @Column(name = \"PREF_MIDDLE\")\r\n    private String preferredMiddleName;\r\n\r\n    @Column(name = \"PREF_LAST\")\r\n    private String preferredLastName;\r\n\r\n    @Column(name = \"BLOOD_TYPE\")\r\n    private String bloodType;\r\n\r\n    /** ... */\r\n}\r\n</code></pre>\r\n\r\n<h3>View Bean:</h3>\r\n<pre>\r\n<code class=\"java\">\r\n@Controller\r\n@Scope(\"conversation\")\r\n@SuppressWarnings(\"serial\")\r\npublic class PersonDetailsBean implements Serializable {\r\n   public String savePerson() {\r\n       String retval = null;\r\n       try {\r\n            personDetailsService.modifiyPerson(getPerson()); // saves missionary\r\n            retval = \"saved-person-edit\"; \r\n       } catch (OptimisticLockException e) {\r\n            Alert.addErrorAlert(\"Optimistic Lock: The object was modified out from under you.\");\r\n       }\r\n       return retval;\r\n   }\r\n   // Method to circumvent IE caching issue\r\n   public long getCurrentMillis() {\r\n       return new Date().getTime();\r\n   }\r\n   /* ... */\r\n}\r\n</code></pre>\r\n\r\n", 
      "date_updated": "2010-05-04 12:18:14", 
      "demo": null, 
      "markup": "h", 
      "title": "JSF Modal Goodness", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Meet the new web.  The simpler the better. The cleaner the better.  The more pleasing the colors the better.  The fuzzier feelings the better.  The latest fuzzies have been brought on by a slew of modals.  Previously, we haven't used many modals in our layouts and designs, so here's the first working pattern on how to get this kind of stuff working.  \r\n\r\nThis solution allows:\r\n<ul>\r\n<li>Content to appear in a modal</li>\r\n<li>Validation errors post back to the modal</li>\r\n<li>Edits made in a modal persist back to the database</li>\r\n<li>Success messages appear on parent page</li>\r\n</ul>", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:12:53", 
       
      "tags": "hibernate jquery jsf seam spring"
    }
  }, 
  {
    "pk": 145, 
    "model": "blog.article", 
    "fields": {
      "body": "Here was my code:\r\n\r\n<code class=\"jsp\">\r\n<h:selectManyCheckbox id=\"recipients-grp\"\r\n   value=\"#{email.sendToRecipients}\"\r\n   converter=\"#{entityConverter}\"\r\n   layout=\"pageDirection\">\r\n   <f:selectItems id=\"recip\" value=\"#{r:convertSelectItemList(emailBean.allRecipients)}\"/>\r\n</h:selectManyCheckbox>\r\n</code>\r\n\r\nI was seeing a lot of this:\r\n\r\n<code class=\"java\">\r\nassignmentCreateForm:j_id47:0:recipients-grp: Validation Error: Value is not valid\r\n</code>\r\n\r\nIt <a href=\"http://www.crazysquirrel.com/computing/java/jsf/converter-validation-error.jspx\">turns out</a> that when you're using a custom converter, which I am (entityConverter), there are no default validators provided by JSF.  \r\n\r\nThis means that you are required to prove to JSF that the objects that you're retrieving from the f:selectItems collection will fit into the h:selectManyCheckbox value you have specified.  In order to help JSF determine the compatibility, <big>you must provide a meaningful hashcode and equals method</big> for your f:selectItems object.", 
      "date_published": "2009-02-10 08:27:28", 
      "image_path": null, 
      "title_slug": "jsf-validationerror-custom-converters", 
      "rendered_body": "Here was my code:\r\n\r\n<code class=\"jsp\">\r\n<h:selectManyCheckbox id=\"recipients-grp\"\r\n   value=\"#{email.sendToRecipients}\"\r\n   converter=\"#{entityConverter}\"\r\n   layout=\"pageDirection\">\r\n   <f:selectItems id=\"recip\" value=\"#{r:convertSelectItemList(emailBean.allRecipients)}\"/>\r\n</h:selectManyCheckbox>\r\n</code>\r\n\r\nI was seeing a lot of this:\r\n\r\n<code class=\"java\">\r\nassignmentCreateForm:j_id47:0:recipients-grp: Validation Error: Value is not valid\r\n</code>\r\n\r\nIt <a href=\"http://www.crazysquirrel.com/computing/java/jsf/converter-validation-error.jspx\">turns out</a> that when you're using a custom converter, which I am (entityConverter), there are no default validators provided by JSF.  \r\n\r\nThis means that you are required to prove to JSF that the objects that you're retrieving from the f:selectItems collection will fit into the h:selectManyCheckbox value you have specified.  In order to help JSF determine the compatibility, <big>you must provide a meaningful hashcode and equals method</big> for your f:selectItems object.", 
      "date_updated": "2010-05-04 12:18:14", 
      "demo": null, 
      "markup": "h", 
      "title": "JSF ValidationError with Custom Converters", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Here's an important tidbit...  JSF does not give any default validators for your data if you use a custom converter.  If you're getting a ValidationError exception, overriding equals and hashcode methods might be a good idea.  For more, read on...\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-02-10 09:20:39", 
       
      "tags": "java jsf"
    }
  }, 
  {
    "pk": 128, 
    "model": "blog.article", 
    "fields": {
      "body": "It stinks when your jsf components don't do what they're supposed to or even what they usually do.    This was the case with my h:inputText field when trying to submit a null value -- but!  only within a ui:repeat component.\r\n\r\nSo, the problem was that I could submit values like clockwork from a h:inputText field.  But, once I submitted a value, I could not submit a blank h:inputText to null out the value.  The old value would keep coming back.  \r\n\r\nThe solution is one of those \"I don't know why this worked, but it fixed my problem\" solutions.  If anyone has further light and knowledge to shed, that would be appreciated.  Once the h:inputText was removed from inside the ui:repeat that it was wrapped in, it worked like a charm.  So, still needing the repeat, I used a tomahawk dataList.  Were it available to me, I would have preferred an a4j:repeat, because I hear that t:dataList has problems of its own.", 
      "date_published": "2008-12-11 15:23:18", 
      "image_path": null, 
      "title_slug": "jsf-wont-submit-null-uirepeat", 
      "rendered_body": "It stinks when your jsf components don't do what they're supposed to or even what they usually do.    This was the case with my h:inputText field when trying to submit a null value -- but!  only within a ui:repeat component.\r\n\r\nSo, the problem was that I could submit values like clockwork from a h:inputText field.  But, once I submitted a value, I could not submit a blank h:inputText to null out the value.  The old value would keep coming back.  \r\n\r\nThe solution is one of those \"I don't know why this worked, but it fixed my problem\" solutions.  If anyone has further light and knowledge to shed, that would be appreciated.  Once the h:inputText was removed from inside the ui:repeat that it was wrapped in, it worked like a charm.  So, still needing the repeat, I used a tomahawk dataList.  Were it available to me, I would have preferred an a4j:repeat, because I hear that t:dataList has problems of its own.", 
      "date_updated": "2010-05-04 12:21:57", 
      "demo": null, 
      "markup": "h", 
      "title": "JSF Won't Submit Null in ui:repeat", 
      "source_path": null, 
      "collection": 1, 
      "summary": "It stinks when your jsf components don't do what they're supposed to or even what they usually do.    This was the case with my h:inputText field when trying to submit a null value -- but!  only within a ui:repeat component.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:24:43", 
       
      "tags": "facelets jsf"
    }
  }, 
  {
    "pk": 335, 
    "model": "blog.article", 
    "fields": {
      "body": "", 
      "date_published": "2010-08-12 17:19:00", 
      "image_path": "", 
      "title_slug": "lds-tech-blogger-joins-rockycode", 
      "rendered_body": "", 
      "date_updated": "2010-08-13 08:07:25", 
      "demo": "", 
      "markup": "h", 
      "title": "LDS Tech blogger joins RockyCode", 
      "source_path": "", 
      "collection": 1, 
      "summary": "David Hale from <a href=\" http://ldstech.org\">http://ldstech.org</a> has joined the esteemed authors at RockyCode.com.  David has a lot of interest in genealogy technology solutions and been a faithful attendee at the <a href=\"http://fht.byu.edu/\">BYU Family History Technology Workshop</a> and the <a href=\"https://devnet.familysearch.org/\">Family Search Developers Conference</a>.  He is the VP in the Hale Family Organization and runs a PhpGedView site at <a href=\"http://halefam.org/FamilyHistory/\">http://halefam.org/FamilyHistory/</a> which now has over 40,000 individual records.", 
      "source": "", 
      "user": 8, 
      "active": true, 
      "date_created": "2010-08-12 17:33:34", 
       
      "tags": "blog web"
    }
  }, 
  {
    "pk": 151, 
    "model": "blog.article", 
    "fields": {
      "body": "Enough talk, let's fight:\r\n\r\n<code class=\"jsp\">\r\n<a4j:repeat var=\"email\" id=\"repeatid\" rowKeyVar=\"idx\"\r\n\t\t\t   value=\"#{collection}\">\r\n   #{idx},\r\n</a4j:repeat\r\n</code>\r\n\r\nIf you loop four times, you should get 1,2,3,4,.\r\n\r\nAnother point of interest on these loops:\r\n\r\nIf you have jsf components within this a4j:repeat and need to know their exact id, the id on the loop will help this id be more predictable and readable.  For instance, in this situation:\r\n\r\n<code class=\"jsp\">\r\n<h:form id=\"formid\">\r\n   <ui:repeat id=\"repeatid\">\r\n      <h:inputText id=\"textid\" />\r\n   </ui:repeat>\r\n</h:form>\r\n</code>\r\n\r\nThe id of the h:inputText component would be formid:repeatid:textid.  This is nice to know if you're trying to select dom elements by id in javascript.", 
      "date_published": "2009-02-20 14:56:54", 
      "image_path": null, 
      "title_slug": "loop-index-uirepeat", 
      "rendered_body": "Enough talk, let's fight:\r\n\r\n<code class=\"jsp\">\r\n<a4j:repeat var=\"email\" id=\"repeatid\" rowKeyVar=\"idx\"\r\n\t\t\t   value=\"#{collection}\">\r\n   #{idx},\r\n</a4j:repeat\r\n</code>\r\n\r\nIf you loop four times, you should get 1,2,3,4,.\r\n\r\nAnother point of interest on these loops:\r\n\r\nIf you have jsf components within this a4j:repeat and need to know their exact id, the id on the loop will help this id be more predictable and readable.  For instance, in this situation:\r\n\r\n<code class=\"jsp\">\r\n<h:form id=\"formid\">\r\n   <ui:repeat id=\"repeatid\">\r\n      <h:inputText id=\"textid\" />\r\n   </ui:repeat>\r\n</h:form>\r\n</code>\r\n\r\nThe id of the h:inputText component would be formid:repeatid:textid.  This is nice to know if you're trying to select dom elements by id in javascript.", 
      "date_updated": "2010-05-04 12:21:57", 
      "demo": null, 
      "markup": "h", 
      "title": "Loop Index in ui:repeat", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Sometimes it's useful to know what the invariant value is for your loop within a facelets loop.  I use ui:repeat a lot, but have seen <a href=\"http://aprilandjake.com/content/jsf-wont-submit-null-uirepeat/\">some problems</a> with it in the past.   If you want to get the loop index for your ui:repeat, you may be disappointed.  Basically, it requires that you use a different looping mechanism.  A nice alternative is the a4j:repeat, which offers the same functionality, plus more awesomeness...", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-02-20 15:01:09", 
       
      "tags": "a4j facelets jsf"
    }
  }, 
  {
    "pk": 356, 
    "model": "blog.article", 
    "fields": {
      "body": "My favorite way to make an iso from a cd or dvd used to be:\r\n\r\n.. code-block:: xquery\r\n\r\n   mkisofs -r -o cdimage.iso /media/dvd\r\n\r\n\r\nNow mkisofs is not part of the ubuntu distro but genisoimage is and can be used with the same options. You can issue the mkisofs command still but it is linked to genisoimage.\r\n\r\nJ\u00f6rg Schilling maintains mkisofs but has had disagreements with the Debian / Ubuntu contributors so the mkisofs code was forked and genisoimage was created and maintained separately. To read more about this read http://www.linux-watch.com/news/NS6848359973.html\r\n\r\nSo the ways I know of to make an iso image on ubuntu are:\r\n\r\n.. code-block:: xquery\r\n\r\n  1. dd if=/dev/cdrom of=file.iso bs=1024\r\n  2. genisoimage -r -o cdimage.iso /media/dvd\r\n  3. brasero (comes installed in the distro, Applications -> Sound and Video)\r\n  4. Nautilus (right click on disk icon, choose \"Copy Disc\")\r\n\r\n\r\nI prefer the first option these days, but only because I like the commandline and it's generally less keystrokes than option 2.  :)\r\n\r\nNow to burn a dvd from the iso image run:\r\n\r\n.. code-block:: xquery\r\n\r\n   growisofs -dvd-compat -Z /dev/dvd=dvd.iso\r\n\r\n\r\nOr you can always use brasero or right-click on the icon of your iso file from nautilus and choose \"Write to Disc...\"\r\n\r\nSo many options...\r\n", 
      "date_published": "2010-12-27 10:52:40", 
      "image_path": "", 
      "title_slug": "ubuntu-iso-making", 
      "rendered_body": "<p>My favorite way to make an iso from a cd or dvd used to be:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>mkisofs -r -o cdimage.iso /media/dvd\n</pre></div>\n</div><p>Now mkisofs is not part of the ubuntu distro but genisoimage is and can be used with the same options. You can issue the mkisofs command still but it is linked to genisoimage.</p>\n<p>J\u00f6rg Schilling maintains mkisofs but has had disagreements with the Debian / Ubuntu contributors so the mkisofs code was forked and genisoimage was created and maintained separately. To read more about this read <a class=\"reference external\" href=\"http://www.linux-watch.com/news/NS6848359973.html\">http://www.linux-watch.com/news/NS6848359973.html</a></p>\n<p>So the ways I know of to make an iso image on ubuntu are:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>1. dd if=/dev/cdrom of=file.iso bs=1024\n2. genisoimage -r -o cdimage.iso /media/dvd\n3. brasero (comes installed in the distro, Applications -&gt; Sound and Video)\n4. Nautilus (right click on disk icon, choose &quot;Copy Disc&quot;)\n</pre></div>\n</div><p>I prefer the first option these days, but only because I like the commandline and it's generally less keystrokes than option 2.  :)</p>\n<p>Now to burn a dvd from the iso image run:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>growisofs -dvd-compat -Z /dev/dvd=dvd.iso\n</pre></div>\n</div><p>Or you can always use brasero or right-click on the icon of your iso file from nautilus and choose &quot;Write to Disc...&quot;</p>\n<p>So many options...</p>\n", 
      "date_updated": "2011-01-02 09:47:30", 
      "demo": "", 
      "markup": "r", 
      "title": "Making an ISO in Ubuntu", 
      "source_path": "", 
      "collection": 1, 
      "summary": "So many ways to make ISOs, using ubuntu, but where is mkisofs when you need it?\r\n", 
      "source": "", 
      "user": 2, 
      "active": true, 
      "date_created": "2010-12-27 11:16:36", 
       
      "tags": "dvd iso ubuntu"
    }
  }, 
  {
    "pk": 107, 
    "model": "blog.article", 
    "fields": {
      "body": "What a journey of discovery!  I haven't done much many-to-many relationship management in JSF.  Django makes it quite easy.  But at work recently, I did it in JSF.  It was quite the experience, hereafter chronicled.\r\n\r\nTo the unseen challenges of this task, I was caught unawares.  Who would have thought that a select-many gui component would be so bothersome?  But, now that the first in JSF has been done, the rest will be more straightforward...\r\n\r\nMy task was to maintain a person<->citizenship many-to-many relationship.  After a couple funny exchanges with our designers over multiple dropdowns (selectOneMenu's), hehe, the design was switched to one dropdown, one select multiple list (hidden), and a list of (nicer-looking) text to represent the selection.\r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/N707BgyvgcUm1uxzGq1G1w\"><img src=\"http://lh6.ggpht.com/trent.jake/SNf6P_v3CRI/AAAAAAAAENk/TPIYGn4KCpA/s800/selectmany.png\" /></a>\r\n\r\nWithout going into too much detail on the pitfalls that I found myself stumbling into, I'll give the final solution (for me) here:\r\n\r\n<h3>The JSF:</h3>\r\n\r\n<pre>\r\n<code class=\"jsp\">\r\n<dl>\r\n    <dt>Citizenship</dt>\r\n    <dd>\r\n        <h:selectOneMenu styleClass=\"citz-choice\" converter=\"#{entityConverter}\">\r\n            <f:selectItems value=\"#{r:convertSelectItemList(personDetailsBean.countries)}\" />\r\n        </h:selectOneMenu>\r\n        <a class=\"add-link-icon add-citz-btn\" href=\"#\" style=\"text-decoration:none;\">&#160;</a>\r\n        <br />\r\n        <h:selectManyListbox styleClass=\"citz-list\" value=\"#{personDetailsBean.person.personCitizenshipList}\"\r\n            converter=\"#{entityConverter}\" style=\"display:none;\" >\r\n            <f:selectItems value=\"#{r:convertSelectItemList(personDetailsBean.countries)}\" />\r\n        </h:selectManyListbox>\r\n        <div class=\"citzs\">\r\n            <ui:repeat var=\"citz\" value=\"#{personDetailsBean.person.personCitizenshipList}\">\r\n                <a id=\"cit_#{citz.entityConverterString}\" class=\"delete-link-icon\" href=\"javascript:removeCitz('#{citz.entityConverterString}');\">#{citz.longName}</a>\r\n            </ui:repeat>\r\n        </div>\r\n    </dd>\r\n</dl>\r\n</code></pre>\r\n\r\n<strong>Things to note:</strong>\r\n<ul>\r\n<li>The comprehensive country list is in both the selectOneMenu and the selectManyListbox.  I made a big mistake in trying to copy options from the selectOneMenu on an html menu, with just having select items in the selectManyListbox specific to the person like so:\r\n<code class=\"jsp\">\r\n<f:selectItems value=\"#{r:convertSelectItemList(personDetailsBean.person.personCitizenshipList)}\" />\r\n</code>\r\n, but that did not work!</li>\r\n<li>r:convertSelectItemList is a custom JSF method for converting pojo's into SelectItem object lists.  The important thing is that this f:selectItems component is fed with a collection of SelectItem's.</li>\r\n<li>I'm not showing the selectManyListbox.  It could be that you want to and could thus cut out the whole \"nice\" display in &lt;div class=\"citzs\"&gt;.</li>\r\n<li>#{entityConverter} is specific to our development shop.  The most important thing is that the mechanism that renders the select items must render the values the same in the selectOneMenu and the selectManyListBox.</li>\r\n</ul>\r\n\r\n<h3>The Javascript:</h3>\r\n<code class=\"javascript\">\r\njQuery(document).ready(function() {\r\n            jQuery(\".add-citz-btn\").click(function() {\r\n                jQuery(\".citz-choice\").copyOptions(\".citz-list\");\r\n                jQuery(\".citzs\").append(genCountrySelection());\r\n            });\r\n        });\r\n\r\n        function genCountrySelection() {\r\n            var val = jQuery(\".citz-choice\").selectedValues();\r\n            var label = jQuery(\".citz-choice\").children(\"[@selected]\").text();\r\n            return \"&lt;a id=\\\"cit_\" + val + \"\\\" class=\\\"delete-link-icon\\\" href=\\\"javascript:removeCitz('\" + val + \"');\\\"&gt;\" + label + \"&lt;/a&gt;\";\r\n        }\r\n\r\n        function removeCitz(poldiv) {\r\n            jQuery(\"[@id=cit_\" + poldiv + \"]\").remove();\r\n            jQuery(\".citz-list\").deselectOptions(poldiv);\r\n        }\r\n});\r\n</code>\r\n\r\n<strong>Things to note:</strong>\r\n<ul>\r\n<li>I used <a href=\"http://jquery.com/\">jquery</a> and the <a href=\"http://www.texotela.co.uk/code/jquery/select/\">jquery.selectboxes.js</a> plugin.  I added the deselectOptions() function to the .js file (shown below).</li>\r\n<li>I used a <a href=\"http://aprilandjake.com/tech/article/12\">jsf-safe id selector</a>.</li>\r\n</ul>\r\n\r\n<h3>deselectOptions() Function Addition:</h3>\r\n<code class=\"javascript\">\r\n/**\r\n * Deselect given value(s)\r\n * @author jtsnake, based on selectValues() above\r\n */\r\n$.fn.deselectOptions = function(value)\r\n{\r\n\tvar v = value;\r\n\tvar vT = typeof(value);\r\n\t// has to be a string or regular expression (object in IE, function in Firefox)\r\n\tif(vT != \"string\" && vT != \"function\" && vT != \"object\") return this;\r\n\tthis.each(\r\n\t\tfunction()\r\n\t\t{\r\n\t\t\tif(this.nodeName.toLowerCase() != \"select\") return this;\r\n\t\t\t// get options\r\n\t\t\tvar o = this.options;\r\n\t\t\t// get number of options\r\n\t\t\tvar oL = o.length;\r\n\t\t\tfor(var i = 0; i < oL; i++)\r\n\t\t\t{\r\n\t\t\t\tif(v.constructor == RegExp)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(o[i].value.match(v))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\to[i].selected = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(o[i].value == v)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\to[i].selected = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\treturn this;\r\n};\r\n</code>\r\n\r\n<h3>Java Models:</h3>\r\n<code class=\"java\">\r\n\r\n// Person.java\r\n/* ... */\r\n@ManyToMany\r\n@JoinTable(name=\"person_citizenship\",\r\n           joinColumns=@JoinColumn(name=\"person_id\"),\r\n           inverseJoinColumns=@JoinColumn(name=\"country_id\"))\r\nprivate List < PoliticalDivision > personCitizenshipList;\r\n/* ... */\r\n\r\n// PoliticalDivision.java\r\n/* ... */\r\npublic String getEntityConverterString() {\r\n    return this.toString().split(\"@\")[0] + \":\" + id;\r\n}\r\n/* ... */\r\n\r\n</code>\r\n\r\n<strong>Things to note:</strong>\r\n<ul>\r\n<li>\"The stack\" is a set of technologies specific to our development shop.  You probably won't have to handle this stuff in your implementation.  The thing to remember is that the values in the selectOneMenu must match those in the selectManyListBox.  This is a facilitator of that in our environment.</li>\r\n</ul>\r\n\r\nAs with any solution to a problem, there are likely many other options.  I would be very interested to see what other people have come up with!  Please post links if you have them.\r\n\r\n\r\n", 
      "date_published": "2008-09-22 14:59:36", 
      "image_path": null, 
      "title_slug": "manytomany-relationships-jsf", 
      "rendered_body": "What a journey of discovery!  I haven't done much many-to-many relationship management in JSF.  Django makes it quite easy.  But at work recently, I did it in JSF.  It was quite the experience, hereafter chronicled.\r\n\r\nTo the unseen challenges of this task, I was caught unawares.  Who would have thought that a select-many gui component would be so bothersome?  But, now that the first in JSF has been done, the rest will be more straightforward...\r\n\r\nMy task was to maintain a person<->citizenship many-to-many relationship.  After a couple funny exchanges with our designers over multiple dropdowns (selectOneMenu's), hehe, the design was switched to one dropdown, one select multiple list (hidden), and a list of (nicer-looking) text to represent the selection.\r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/N707BgyvgcUm1uxzGq1G1w\"><img src=\"http://lh6.ggpht.com/trent.jake/SNf6P_v3CRI/AAAAAAAAENk/TPIYGn4KCpA/s800/selectmany.png\" /></a>\r\n\r\nWithout going into too much detail on the pitfalls that I found myself stumbling into, I'll give the final solution (for me) here:\r\n\r\n<h3>The JSF:</h3>\r\n\r\n<pre>\r\n<code class=\"jsp\">\r\n<dl>\r\n    <dt>Citizenship</dt>\r\n    <dd>\r\n        <h:selectOneMenu styleClass=\"citz-choice\" converter=\"#{entityConverter}\">\r\n            <f:selectItems value=\"#{r:convertSelectItemList(personDetailsBean.countries)}\" />\r\n        </h:selectOneMenu>\r\n        <a class=\"add-link-icon add-citz-btn\" href=\"#\" style=\"text-decoration:none;\">&#160;</a>\r\n        <br />\r\n        <h:selectManyListbox styleClass=\"citz-list\" value=\"#{personDetailsBean.person.personCitizenshipList}\"\r\n            converter=\"#{entityConverter}\" style=\"display:none;\" >\r\n            <f:selectItems value=\"#{r:convertSelectItemList(personDetailsBean.countries)}\" />\r\n        </h:selectManyListbox>\r\n        <div class=\"citzs\">\r\n            <ui:repeat var=\"citz\" value=\"#{personDetailsBean.person.personCitizenshipList}\">\r\n                <a id=\"cit_#{citz.entityConverterString}\" class=\"delete-link-icon\" href=\"javascript:removeCitz('#{citz.entityConverterString}');\">#{citz.longName}</a>\r\n            </ui:repeat>\r\n        </div>\r\n    </dd>\r\n</dl>\r\n</code></pre>\r\n\r\n<strong>Things to note:</strong>\r\n<ul>\r\n<li>The comprehensive country list is in both the selectOneMenu and the selectManyListbox.  I made a big mistake in trying to copy options from the selectOneMenu on an html menu, with just having select items in the selectManyListbox specific to the person like so:\r\n<code class=\"jsp\">\r\n<f:selectItems value=\"#{r:convertSelectItemList(personDetailsBean.person.personCitizenshipList)}\" />\r\n</code>\r\n, but that did not work!</li>\r\n<li>r:convertSelectItemList is a custom JSF method for converting pojo's into SelectItem object lists.  The important thing is that this f:selectItems component is fed with a collection of SelectItem's.</li>\r\n<li>I'm not showing the selectManyListbox.  It could be that you want to and could thus cut out the whole \"nice\" display in &lt;div class=\"citzs\"&gt;.</li>\r\n<li>#{entityConverter} is specific to our development shop.  The most important thing is that the mechanism that renders the select items must render the values the same in the selectOneMenu and the selectManyListBox.</li>\r\n</ul>\r\n\r\n<h3>The Javascript:</h3>\r\n<code class=\"javascript\">\r\njQuery(document).ready(function() {\r\n            jQuery(\".add-citz-btn\").click(function() {\r\n                jQuery(\".citz-choice\").copyOptions(\".citz-list\");\r\n                jQuery(\".citzs\").append(genCountrySelection());\r\n            });\r\n        });\r\n\r\n        function genCountrySelection() {\r\n            var val = jQuery(\".citz-choice\").selectedValues();\r\n            var label = jQuery(\".citz-choice\").children(\"[@selected]\").text();\r\n            return \"&lt;a id=\\\"cit_\" + val + \"\\\" class=\\\"delete-link-icon\\\" href=\\\"javascript:removeCitz('\" + val + \"');\\\"&gt;\" + label + \"&lt;/a&gt;\";\r\n        }\r\n\r\n        function removeCitz(poldiv) {\r\n            jQuery(\"[@id=cit_\" + poldiv + \"]\").remove();\r\n            jQuery(\".citz-list\").deselectOptions(poldiv);\r\n        }\r\n});\r\n</code>\r\n\r\n<strong>Things to note:</strong>\r\n<ul>\r\n<li>I used <a href=\"http://jquery.com/\">jquery</a> and the <a href=\"http://www.texotela.co.uk/code/jquery/select/\">jquery.selectboxes.js</a> plugin.  I added the deselectOptions() function to the .js file (shown below).</li>\r\n<li>I used a <a href=\"http://aprilandjake.com/tech/article/12\">jsf-safe id selector</a>.</li>\r\n</ul>\r\n\r\n<h3>deselectOptions() Function Addition:</h3>\r\n<code class=\"javascript\">\r\n/**\r\n * Deselect given value(s)\r\n * @author jtsnake, based on selectValues() above\r\n */\r\n$.fn.deselectOptions = function(value)\r\n{\r\n\tvar v = value;\r\n\tvar vT = typeof(value);\r\n\t// has to be a string or regular expression (object in IE, function in Firefox)\r\n\tif(vT != \"string\" && vT != \"function\" && vT != \"object\") return this;\r\n\tthis.each(\r\n\t\tfunction()\r\n\t\t{\r\n\t\t\tif(this.nodeName.toLowerCase() != \"select\") return this;\r\n\t\t\t// get options\r\n\t\t\tvar o = this.options;\r\n\t\t\t// get number of options\r\n\t\t\tvar oL = o.length;\r\n\t\t\tfor(var i = 0; i < oL; i++)\r\n\t\t\t{\r\n\t\t\t\tif(v.constructor == RegExp)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(o[i].value.match(v))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\to[i].selected = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(o[i].value == v)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\to[i].selected = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\treturn this;\r\n};\r\n</code>\r\n\r\n<h3>Java Models:</h3>\r\n<code class=\"java\">\r\n\r\n// Person.java\r\n/* ... */\r\n@ManyToMany\r\n@JoinTable(name=\"person_citizenship\",\r\n           joinColumns=@JoinColumn(name=\"person_id\"),\r\n           inverseJoinColumns=@JoinColumn(name=\"country_id\"))\r\nprivate List < PoliticalDivision > personCitizenshipList;\r\n/* ... */\r\n\r\n// PoliticalDivision.java\r\n/* ... */\r\npublic String getEntityConverterString() {\r\n    return this.toString().split(\"@\")[0] + \":\" + id;\r\n}\r\n/* ... */\r\n\r\n</code>\r\n\r\n<strong>Things to note:</strong>\r\n<ul>\r\n<li>\"The stack\" is a set of technologies specific to our development shop.  You probably won't have to handle this stuff in your implementation.  The thing to remember is that the values in the selectOneMenu must match those in the selectManyListBox.  This is a facilitator of that in our environment.</li>\r\n</ul>\r\n\r\nAs with any solution to a problem, there are likely many other options.  I would be very interested to see what other people have come up with!  Please post links if you have them.\r\n\r\n\r\n", 
      "date_updated": "2010-05-04 12:21:57", 
      "demo": null, 
      "markup": "h", 
      "title": "ManyToMany Relationships in JSF", 
      "source_path": null, 
      "collection": 1, 
      "summary": "What a journey of discovery!  I haven't done much many-to-many relationship management in JSF.  Django makes it quite easy.  But at work recently, I did it in JSF.  It was quite the experience, hereafter chronicled.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:00:38", 
       
      "tags": "java javascript jquery jsf"
    }
  }, 
  {
    "pk": 205, 
    "model": "blog.article", 
    "fields": {
      "body": "Here are the steps, ya'll:\r\n\r\n<code class=\"bash\">\r\n# Get the package\r\nwget http://developer.marklogic.com/download/binaries/4.0/MarkLogic-4.0-5.i686.rpm\r\n\r\n# Get the rpm -> deb converter\r\nsudo apt-get install alien\r\n\r\n# Convert the package\r\nsudo alien MarkLogic-4.0.5.i686.rpm\r\n\r\n# Install the package\r\nsudo dpkg -i MarkLogic-4.0.6.i686.deb\r\n\r\n# Supposedly, this dir is also important\r\nsudo mkdir /var/lock/subsys\r\n\r\n# Try to start the server -- most likely this will fail\r\nsudo /etc/init.d/MarkLogic start\r\n\r\n# Here, I got this error:\r\n#   MarkLogic: /opt/MarkLogic/bin/MarkLogic: error while loading shared\r\n#   libraries: libbteuclid.so.6.0.1: cannot open shared object file: No such file or directory\r\n\r\n# If needed, the the latest, unstable shared library (at own risk)\r\nwget http://ftp.us.debian.org/debian/pool/main/l/lsb/lsb-base_3.2-22_all.deb\r\n\r\n# Install the shared lib\r\nsudo dpkg -i lsb-base_3.2-22_all.deb\r\n\r\n# Start for real this time\r\nsudo /etc/init.d/MarkLogic start\r\n\r\n# Access your server and download a license key\r\nfirefox http://localhost:8001 &\r\n\r\n</code>\r\n\r\nYou can also look for newer packages <a href=\"http://developer.marklogic.com/download/\">here</a>.\r\n\r\nHere's the <a href=\"http://packages.debian.org/unstable/lsb-base\">lsb-base page</a> for further investigation of this shared library awesomeness.", 
      "date_published": "2009-06-04 09:00:11", 
      "image_path": null, 
      "title_slug": "mark-logic-4-ubuntu-904", 
      "rendered_body": "Here are the steps, ya'll:\r\n\r\n<code class=\"bash\">\r\n# Get the package\r\nwget http://developer.marklogic.com/download/binaries/4.0/MarkLogic-4.0-5.i686.rpm\r\n\r\n# Get the rpm -> deb converter\r\nsudo apt-get install alien\r\n\r\n# Convert the package\r\nsudo alien MarkLogic-4.0.5.i686.rpm\r\n\r\n# Install the package\r\nsudo dpkg -i MarkLogic-4.0.6.i686.deb\r\n\r\n# Supposedly, this dir is also important\r\nsudo mkdir /var/lock/subsys\r\n\r\n# Try to start the server -- most likely this will fail\r\nsudo /etc/init.d/MarkLogic start\r\n\r\n# Here, I got this error:\r\n#   MarkLogic: /opt/MarkLogic/bin/MarkLogic: error while loading shared\r\n#   libraries: libbteuclid.so.6.0.1: cannot open shared object file: No such file or directory\r\n\r\n# If needed, the the latest, unstable shared library (at own risk)\r\nwget http://ftp.us.debian.org/debian/pool/main/l/lsb/lsb-base_3.2-22_all.deb\r\n\r\n# Install the shared lib\r\nsudo dpkg -i lsb-base_3.2-22_all.deb\r\n\r\n# Start for real this time\r\nsudo /etc/init.d/MarkLogic start\r\n\r\n# Access your server and download a license key\r\nfirefox http://localhost:8001 &\r\n\r\n</code>\r\n\r\nYou can also look for newer packages <a href=\"http://developer.marklogic.com/download/\">here</a>.\r\n\r\nHere's the <a href=\"http://packages.debian.org/unstable/lsb-base\">lsb-base page</a> for further investigation of this shared library awesomeness.", 
      "date_updated": "2010-05-04 12:21:57", 
      "demo": null, 
      "markup": "h", 
      "title": "Mark Logic 4 on Ubuntu 9.04", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Mark Logic Server seems to be the latest, greatest in content serve-up.  At least it is generating a lot of excitement at the LDS Church, where it's being used for new content-centric apps/sites.  Being caught in the wave of awesome, I was interested in getting it running in my favorite dev environment: Ubunutu-flavored Linux.\r\n\r\nIt wasn't bad at all.  In fact, it was accomplished in almost as few steps as installing Apache or Tomcat.  Except, after this installation, full XML xquery'age is now possible!  Here are the steps, slightly elongated by the fact that all Mark Logic-supported Unix systems are rpm-based.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-06-04 09:19:51", 
       
      "tags": "linux marklogic ubuntu"
    }
  }, 
  {
    "pk": 353, 
    "model": "blog.article", 
    "fields": {
      "body": "External variables can be used to pass data from one xquery to another using the invoke command.\r\n\r\nSo to use the invoke function the code looks like this:\r\n\r\n\r\n.. code-block:: xquery\r\n\r\n   xquery version \"1.0-ml\";\r\n   let $paramValue := \"http://myurl.com\"\r\n   let $forwardUrl := \"/service/my-xquery.xqy\"\r\n   let $ret := xdmp:invoke($forwardURL,(xs:QName(\"varurl\"), $paramValue),\r\n                                       \t\t<options xmlns=\"xdmp:eval\">\r\n                                  \t\t\t<isolation>different-transaction</isolation>\r\n                                  \t\t\t<prevent-deadlocks>false</prevent-deadlocks>\r\n                                  \t\t</options>)\r\n\r\n\r\nThis code is passing a url string to another xquery file called my-xquery.xqy for processing. Now lets say that sometimes my-xquery.xqy gets run from a request via a rewriter and sometimes from this invoke. \r\n\r\nThe problem is you can't reference an external variable unless it has been bound. For this implementation the variable is only bound when it is called from the invoke, so this code will break when called from the rewriter.\r\n\r\n.. code-block :: xquery\r\n\r\n   xquery version \"1.0-ml\";\r\n   declare variable $varurl as xs:string external;\r\n   let $uri := $varurl\r\n\r\nAs soon as $varurl is reference, an exception is thrown. You could do something like this:\r\n\r\n.. code-block:: xquery\r\n\r\n   xquery version \"1.0-ml\";\r\n   declare variable $varurl as xs:string external;\r\n   declare function xhtml:getURLVar(){\r\n   try{\r\n       \t\tlet $returnCode :=   $varurl\r\n\t        return $returnCode\r\n\t}catch($e){\r\n                 let $uri :=  xdmp:get-request-field(\"url\", \"\"))\r\n\t\treturn $uri\r\n\t}\r\n   };\r\n   let $uri := xhtml:getURLVar()\r\n\r\nBut this relies on the try-catch to decide if it is getting the uri from the external var or from the request. Not a good practice because a try-catch is for exceptions not for regular expected conditions.\r\n\r\nThis third way is the best way.\r\n\r\n.. code-block:: xquery\r\n\r\n   xquery version \"1.0-ml\";\r\n   declare variable $varurl as xs:string external;\r\n   declare function xhtml:getURLVar(){\r\n        let $uri := xdmp:get-request-field(\"url\", \"\"))\r\n\t\tlet $returnCode := if(fn:string-length(xs:string($uri)) < 1 ) then\r\n\t\t                  $varurl\r\n\t                   else\r\n\t                      $uri\r\n\t\t\r\n\t\treturn $returnCode\r\n   };\r\n   let $uri := xhtml:getURLVar()\r\n\r\nSo now the code first checks for the \"url\" field in the request, if it is empty then the code gets it from the external var $varurl. However, if for some reason the external var is not bound, then you will get an ugly exception on the page. So then it would be appropriate to catch that exception and reroute to some error page.\r\n\r\n.. code-block:: xquery\r\n\r\n   xquery version \"1.0-ml\";\r\n   declare variable $varurl as xs:string external;\r\n   \r\n   declare function xhtml:getURLVar(){\r\n   try{\r\n        let $uri :=  xdmp:get-request-field(\"url\", \"\"))\r\n\t\tlet $returnCode := if(fn:string-length(xs:string($uri)) < 1 ) then\r\n\t\t                  $varurl\r\n\t                   else\r\n\t                      $uri\r\n\t\t\r\n\t\treturn $returnCode\r\n\t}catch($e){\r\n\t    (: put here the default page or error page, this should never happen :)\r\n\t\tlet $uri :=  \"http://mydomain.com/error-page.xqy\"\r\n\t\treturn $uri\r\n\t}\r\n   };\r\n   let $uri := xhtml:getURLVar()\r\n\r\nSo there you have it, a way to use external variables sometimes and request parameters the other times, cleanly, without exceptions.\r\n", 
      "date_published": "2010-11-08 19:36:12", 
      "image_path": "", 
      "title_slug": "marklogic-external-variable-access", 
      "rendered_body": "<p>External variables can be used to pass data from one xquery to another using the invoke command.</p>\n<p>So to use the invoke function the code looks like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0-ml&quot;;\nlet $paramValue := &quot;http://myurl.com&quot;\nlet $forwardUrl := &quot;/service/my-xquery.xqy&quot;\nlet $ret := xdmp:invoke($forwardURL,(xs:QName(&quot;varurl&quot;), $paramValue),\n                                             &lt;options xmlns=&quot;xdmp:eval&quot;&gt;\n                                                     &lt;isolation&gt;different-transaction&lt;/isolation&gt;\n                                                     &lt;prevent-deadlocks&gt;false&lt;/prevent-deadlocks&gt;\n                                             &lt;/options&gt;)\n</pre></div>\n</div><p>This code is passing a url string to another xquery file called my-xquery.xqy for processing. Now lets say that sometimes my-xquery.xqy gets run from a request via a rewriter and sometimes from this invoke.</p>\n<p>The problem is you can't reference an external variable unless it has been bound. For this implementation the variable is only bound when it is called from the invoke, so this code will break when called from the rewriter.</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0-ml&quot;;\ndeclare variable $varurl as xs:string external;\nlet $uri := $varurl\n</pre></div>\n</div><p>As soon as $varurl is reference, an exception is thrown. You could do something like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0-ml&quot;;\ndeclare variable $varurl as xs:string external;\ndeclare function xhtml:getURLVar(){\ntry{\n             let $returnCode :=   $varurl\n             return $returnCode\n     }catch($e){\n              let $uri :=  xdmp:get-request-field(&quot;url&quot;, &quot;&quot;))\n             return $uri\n     }\n};\nlet $uri := xhtml:getURLVar()\n</pre></div>\n</div><p>But this relies on the try-catch to decide if it is getting the uri from the external var or from the request. Not a good practice because a try-catch is for exceptions not for regular expected conditions.</p>\n<p>This third way is the best way.</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0-ml&quot;;\ndeclare variable $varurl as xs:string external;\ndeclare function xhtml:getURLVar(){\n     let $uri := xdmp:get-request-field(&quot;url&quot;, &quot;&quot;))\n             let $returnCode := if(fn:string-length(xs:string($uri)) &lt; 1 ) then\n                               $varurl\n                        else\n                           $uri\n\n             return $returnCode\n};\nlet $uri := xhtml:getURLVar()\n</pre></div>\n</div><p>So now the code first checks for the &quot;url&quot; field in the request, if it is empty then the code gets it from the external var $varurl. However, if for some reason the external var is not bound, then you will get an ugly exception on the page. So then it would be appropriate to catch that exception and reroute to some error page.</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0-ml&quot;;\ndeclare variable $varurl as xs:string external;\n\ndeclare function xhtml:getURLVar(){\ntry{\n     let $uri :=  xdmp:get-request-field(&quot;url&quot;, &quot;&quot;))\n             let $returnCode := if(fn:string-length(xs:string($uri)) &lt; 1 ) then\n                               $varurl\n                        else\n                           $uri\n\n             return $returnCode\n     }catch($e){\n         (: put here the default page or error page, this should never happen :)\n             let $uri :=  &quot;http://mydomain.com/error-page.xqy&quot;\n             return $uri\n     }\n};\nlet $uri := xhtml:getURLVar()\n</pre></div>\n</div><p>So there you have it, a way to use external variables sometimes and request parameters the other times, cleanly, without exceptions.</p>\n", 
      "date_updated": "2010-11-09 11:43:22", 
      "demo": "", 
      "markup": "r", 
      "title": "MarkLogic external variable access", 
      "source_path": "", 
      "collection": 1, 
      "summary": "How to examine external variables without risking an error.", 
      "source": "", 
      "user": 2, 
      "active": true, 
      "date_created": "2010-11-08 19:36:42", 
       
      "tags": "marklogic xquery"
    }
  }, 
  {
    "pk": 379, 
    "model": "blog.article", 
    "fields": {
      "body": "Venue\r\n-----\r\n\r\nSan Francisco was very fun.  About half the tech conferences out there are probably in this city, so there's nothing unique to the MLUC here.  The conference was held at The Palace hotel.  It is indeed quite grand.  The staff was very nice and accomodating.  The most impressive was the dining area just inside the front entry -- very cool.\r\n\r\nKeynotes\r\n--------\r\n\r\nMy favorite keynote was probably that given by Robert Sutton as he talked about great leaders and inventive teams.  It was definitely the most big-picture and general item talk, and it was probably the most inspiring.  Really, it had the potential to also be the most life-altering.  My second favorite was probably by Jason Monberg as a part of the next generation of unstructured data talk -- great moon landing analogy.\r\n\r\nSurprisingly and unfortunately, I thought the intro keynote by the new CEO, Ken Bado, was a little stiff.  The content was fine, but the delivery came across and rehearsed and too teleprompter-supported, especially where he was trying to connect with his new customers.  But, no problem.  He seemed to loosen up and get in his groove as the talk went on, as I'm sure his tenure as the new MarkLogic CEO will progress as well.  I was impressed when he helped a fellow on-stage executive get past a little brain cramp of his own.\r\n\r\nCustomer-Serving\r\n----------------\r\n\r\nWhat better measure of a company than the degree to which they serve their customers?  Over and over again, the MarkLogic employees that I heard on stage or in front of a podium seemed very accomodating -- even begging -- for user feedback and requests.  They reiterated over and over that they were there to serve us.  The symbiotic relationship was reiterated many times.  I can't speak too much to MarkLogic corporation's relationship with our corporation, because I don't work at that level.  But, they sure seemed responsive at the conference.  \r\n\r\nSome reasons might be obvious and self-serving for them as they are creating a product in large part to make a profit and serve their customers.  And most in the audience were indeed their customers.  And sure, a lot of their responsiveness and assistance is experienced through their professional services and the accompanying expensive consulting fees.  But, anyone can do that.  And businesses need to be profitable to survive.\r\n\r\nFrom what I heard in talks and in conversations with MarkLogic employees, I perceived a real attitude and way of doing business that backed up what they were saying.  I felt that when they asked for desirable features from their customers for future products that they would actually implement them.  I felt that when they asked for feedback on what parts of the product were slow or clunky that they really meant it and that they cared about their craft enough to fix it.  I felt that when they asked what we were working on and how it was going that they really wanted to know about our success.  When Joe Dalton, their CMO, spoke I really had the impression that they are sincere about building not just profits, but a better company with values of substance.\r\n\r\nTechie Hardware\r\n---------------\r\n\r\n.. raw:: html\r\n\r\n  The most interesting slidedeck I saw was by John Snelson as he spoke about upcoming transaction mechanisms in MarkLogic Server 5.0.  It was presented in <s>Keynote</s> what I think was <a href=\"http://prezi.com/\">Prezi</a> on a Macbook.  But, his hardware was the exception at the conference.  I found the lack of Apple products among the conference attendees and MarkLogic employees very refreshing.  Interesting code can be written on hardware that performs better, doesn't have the same pop appeal, but costs a lot less.  MarkLogic and their employees definitely don't seem to be Apple fanboys and don't pretend to need the sleek hardware to drive up their coolness factor, which seems to be a general them in many other places.  If I had to guess, MarkLogic gets most of their employee hardware from HP.\r\n\r\nThe Peeps\r\n---------\r\n\r\nI was constantly being very impressed with the caliber of people that were gathered at this conference.  I could characterize literally everyone I met as very smart and very kind.  What better could be said of a group?  Of course, there are always exceptions.  Who knows, many would probably think me an exception on both counts in some circles :) but I was impressed with those I met -- both attendees and employees.  Dare I go too over the top, even the sponsors were impressive. :)\r\n\r\nThere was a lot of access to MarkLogic employees here, from execs, to other management, to engineers and designers.  And those that I asked in informal conversation always gave good feedback about their company.  The top talent, back to even their original founder and architect were available for talks, formal and informal, which is probably unique compared with other tech conferences.  This company is relatively young, and its user base is relatively small.  That creates challenges, but it also creates opportunities.\r\n\r\nTech Conversations\r\n------------------\r\n\r\nLast year, I actually chose not to go to the MLUC.  I looked at the session list, and it looked to me like a marketing conference, where the provider tried to drum up more and continued business.  When some of my coworkers returned they reported that it did indeed feel like a lot of business hype.  So, this year, it was with a little bit of trepidation that I decided to go to this conference.  But, I was pleasantly surprised.  There were many super-smart engineers at the conference, and they shared some really cool stuff.  I felt like I got all the technical conversation I wanted.  \r\n\r\nThe hands-on opportunities were there, but they felt a little awkward.  They were in the form of self-paced, printed lab worksheets, where you could walk yourself through any number of things ranging from setting up your MarkLogic dev environment in Eclipse to using different libraries or doing some performace tuning.  To me, they felt awkward because I didn't really feel like going to another room and reading some piece of paper to myself whilst other developer-related talks were happening that I couldn't get later or elsewhere.\r\n\r\nI was very encouraged to hear from CEO Ken Bado that he felt they had neglected the developer community, but that they realized that the dev community was the lifeblood of their platform and that they were going to improve drastically.  It'll be interesting to see how that materializes, but I was at least refreshed to hear the confession.\r\n\r\nIn all, I felt that the technical conversations that I had consisted of the most worthwhile part of the conference.  There was a lot of sharing of best practices.  There were a ton of tools and frameworks brought to my attention that I didn't know about before.  And all that generally made me question the way I had been doing things, which I think is a good thing.\r\n\r\nSpeaking\r\n--------\r\n\r\nI was invited to give a talk on unit testing XQuery on MarkLogic as a part of the conference.  Considering the caliber of the attendees and other talks, I felt very honored to be there.  My track manager, Dale Kim, was very helpful and provided good feedback during preparation and the day of my talk.  I felt like it went well, but could have been improved.  It seemed to be well-received.  I look forward to more feedback.  It was hard to decide how to approach a subject that I deal with on a technical level every day but that I presented to a mixed audience of developers and business types.  In conflict with `my own tech conference advice <http://rockycode.com/blog/ideal-tech-conferences/>`_, I added my own deck of `psychedelic slides <http://rockycode.com/blog/unit-testing-xquery-marklogic/>`_ to the world.\r\n\r\nTravel\r\n------\r\n\r\nTSA.  Egh.  My favorite `tweet <http://twitter.com/#!/flyingtweets/status/64994809328308225>`_ of the day from @mikewhitmore: \"Bin Ladin is dead! Can I travel with more than a 3 oz toothpaste now?\" \r\n\r\nAirplanes were definitely not made for tall people.\r\n", 
      "date_published": "2011-05-02 14:35:21", 
      "image_path": "", 
      "title_slug": "marklogic-users-conference-2011-impressions", 
      "rendered_body": "<div class=\"section\" id=\"venue\">\n<h1>Venue</h1>\n<p>San Francisco was very fun.  About half the tech conferences out there are probably in this city, so there's nothing unique to the MLUC here.  The conference was held at The Palace hotel.  It is indeed quite grand.  The staff was very nice and accomodating.  The most impressive was the dining area just inside the front entry -- very cool.</p>\n</div>\n<div class=\"section\" id=\"keynotes\">\n<h1>Keynotes</h1>\n<p>My favorite keynote was probably that given by Robert Sutton as he talked about great leaders and inventive teams.  It was definitely the most big-picture and general item talk, and it was probably the most inspiring.  Really, it had the potential to also be the most life-altering.  My second favorite was probably by Jason Monberg as a part of the next generation of unstructured data talk -- great moon landing analogy.</p>\n<p>Surprisingly and unfortunately, I thought the intro keynote by the new CEO, Ken Bado, was a little stiff.  The content was fine, but the delivery came across and rehearsed and too teleprompter-supported, especially where he was trying to connect with his new customers.  But, no problem.  He seemed to loosen up and get in his groove as the talk went on, as I'm sure his tenure as the new MarkLogic CEO will progress as well.  I was impressed when he helped a fellow on-stage executive get past a little brain cramp of his own.</p>\n</div>\n<div class=\"section\" id=\"customer-serving\">\n<h1>Customer-Serving</h1>\n<p>What better measure of a company than the degree to which they serve their customers?  Over and over again, the MarkLogic employees that I heard on stage or in front of a podium seemed very accomodating -- even begging -- for user feedback and requests.  They reiterated over and over that they were there to serve us.  The symbiotic relationship was reiterated many times.  I can't speak too much to MarkLogic corporation's relationship with our corporation, because I don't work at that level.  But, they sure seemed responsive at the conference.</p>\n<p>Some reasons might be obvious and self-serving for them as they are creating a product in large part to make a profit and serve their customers.  And most in the audience were indeed their customers.  And sure, a lot of their responsiveness and assistance is experienced through their professional services and the accompanying expensive consulting fees.  But, anyone can do that.  And businesses need to be profitable to survive.</p>\n<p>From what I heard in talks and in conversations with MarkLogic employees, I perceived a real attitude and way of doing business that backed up what they were saying.  I felt that when they asked for desirable features from their customers for future products that they would actually implement them.  I felt that when they asked for feedback on what parts of the product were slow or clunky that they really meant it and that they cared about their craft enough to fix it.  I felt that when they asked what we were working on and how it was going that they really wanted to know about our success.  When Joe Dalton, their CMO, spoke I really had the impression that they are sincere about building not just profits, but a better company with values of substance.</p>\n</div>\n<div class=\"section\" id=\"techie-hardware\">\n<h1>Techie Hardware</h1>\nThe most interesting slidedeck I saw was by John Snelson as he spoke about upcoming transaction mechanisms in MarkLogic Server 5.0.  It was presented in <s>Keynote</s> what I think was <a href=\"http://prezi.com/\">Prezi</a> on a Macbook.  But, his hardware was the exception at the conference.  I found the lack of Apple products among the conference attendees and MarkLogic employees very refreshing.  Interesting code can be written on hardware that performs better, doesn't have the same pop appeal, but costs a lot less.  MarkLogic and their employees definitely don't seem to be Apple fanboys and don't pretend to need the sleek hardware to drive up their coolness factor, which seems to be a general them in many other places.  If I had to guess, MarkLogic gets most of their employee hardware from HP.</div>\n<div class=\"section\" id=\"the-peeps\">\n<h1>The Peeps</h1>\n<p>I was constantly being very impressed with the caliber of people that were gathered at this conference.  I could characterize literally everyone I met as very smart and very kind.  What better could be said of a group?  Of course, there are always exceptions.  Who knows, many would probably think me an exception on both counts in some circles :) but I was impressed with those I met -- both attendees and employees.  Dare I go too over the top, even the sponsors were impressive. :)</p>\n<p>There was a lot of access to MarkLogic employees here, from execs, to other management, to engineers and designers.  And those that I asked in informal conversation always gave good feedback about their company.  The top talent, back to even their original founder and architect were available for talks, formal and informal, which is probably unique compared with other tech conferences.  This company is relatively young, and its user base is relatively small.  That creates challenges, but it also creates opportunities.</p>\n</div>\n<div class=\"section\" id=\"tech-conversations\">\n<h1>Tech Conversations</h1>\n<p>Last year, I actually chose not to go to the MLUC.  I looked at the session list, and it looked to me like a marketing conference, where the provider tried to drum up more and continued business.  When some of my coworkers returned they reported that it did indeed feel like a lot of business hype.  So, this year, it was with a little bit of trepidation that I decided to go to this conference.  But, I was pleasantly surprised.  There were many super-smart engineers at the conference, and they shared some really cool stuff.  I felt like I got all the technical conversation I wanted.</p>\n<p>The hands-on opportunities were there, but they felt a little awkward.  They were in the form of self-paced, printed lab worksheets, where you could walk yourself through any number of things ranging from setting up your MarkLogic dev environment in Eclipse to using different libraries or doing some performace tuning.  To me, they felt awkward because I didn't really feel like going to another room and reading some piece of paper to myself whilst other developer-related talks were happening that I couldn't get later or elsewhere.</p>\n<p>I was very encouraged to hear from CEO Ken Bado that he felt they had neglected the developer community, but that they realized that the dev community was the lifeblood of their platform and that they were going to improve drastically.  It'll be interesting to see how that materializes, but I was at least refreshed to hear the confession.</p>\n<p>In all, I felt that the technical conversations that I had consisted of the most worthwhile part of the conference.  There was a lot of sharing of best practices.  There were a ton of tools and frameworks brought to my attention that I didn't know about before.  And all that generally made me question the way I had been doing things, which I think is a good thing.</p>\n</div>\n<div class=\"section\" id=\"speaking\">\n<h1>Speaking</h1>\n<p>I was invited to give a talk on unit testing XQuery on MarkLogic as a part of the conference.  Considering the caliber of the attendees and other talks, I felt very honored to be there.  My track manager, Dale Kim, was very helpful and provided good feedback during preparation and the day of my talk.  I felt like it went well, but could have been improved.  It seemed to be well-received.  I look forward to more feedback.  It was hard to decide how to approach a subject that I deal with on a technical level every day but that I presented to a mixed audience of developers and business types.  In conflict with <a class=\"reference external\" href=\"http://rockycode.com/blog/ideal-tech-conferences/\">my own tech conference advice</a>, I added my own deck of <a class=\"reference external\" href=\"http://rockycode.com/blog/unit-testing-xquery-marklogic/\">psychedelic slides</a> to the world.</p>\n</div>\n<div class=\"section\" id=\"travel\">\n<h1>Travel</h1>\n<p>TSA.  Egh.  My favorite <a class=\"reference external\" href=\"http://twitter.com/#!/flyingtweets/status/64994809328308225\">tweet</a> of the day from &#64;mikewhitmore: &quot;Bin Ladin is dead! Can I travel with more than a 3 oz toothpaste now?&quot;</p>\n<p>Airplanes were definitely not made for tall people.</p>\n</div>\n", 
      "date_updated": "2011-08-05 07:55:06", 
      "demo": "", 
      "markup": "r", 
      "title": "MarkLogic Users Conference 2011 Impressions ", 
      "source_path": "", 
      "collection": 1, 
      "summary": "I just returned from the MarkLogic Users Conference in San Francisco.  I had a good time.  I think the conference was worthwhile.  I'd go again, and I'd recommend it as a regular ritual for those that create on the MarkLogic platform.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-05-02 14:37:12", 
       
      "tags": "confs marklogic"
    }
  }, 
  {
    "pk": 317, 
    "model": "blog.article", 
    "fields": {
      "body": "Using CruiseControl.NET, you can configure an email to be sent for different types of events with your continuous build system.  We have cc.net configured to run a NAnt target, which then runs our tests (and other reporting targets).  \r\n\r\nExample: Here is a snippet from the ccnet.config file where the project is configured.  We call the daily target in our default.build.\r\n\r\n<code class=\"java\">\r\n<nant>\r\n        <executable>nant.exe</executable>\r\n        <baseDirectory>C:\\mypath</baseDirectory>\r\n        <buildArgs>daily</buildArgs>\r\n        <nologo>false</nologo>\r\n        <buildFile>default.build</buildFile>\r\n        <logger>NAnt.Core.XmlLogger</logger>\r\n        <buildTimeoutSeconds>12000</buildTimeoutSeconds>\r\n      </nant>\r\n</code>\r\n\r\nExample from the default.build file for NAnt:\r\n\r\n<code class=\"java\">\r\n<target name=\"daily\" depends=\"clean, compileDebug, daily_test_suites, generate_report, post_results\" />\r\n</code>\r\n\r\nThe target \"generate_report\" crunches some numbers for some customized reporting.  We create an xml file with those results.  We also created our own xsl file to parse through that xml file when it is then merged into the master files with ccnet.\r\n\r\nSo -- in order to show that customized report, I just had to edit the ccnet.exe.config file to include it.\r\n\r\n<code class=\"java\">\r\n<!-- Specifies the stylesheets that are used to transform the build results when using the EmailPublisher -->\r\n<xslFiles>\r\n    <file name=\"xsl\\header.xsl\"/>\r\n    <file name=\"xsl\\compile.xsl\"/>\r\n    <file name=\"xsl\\mycustomreport.xsl\" /> <!-- obviously located in the directory to spit out results-->\r\n<!--    <file name=\"xsl\\unittests.xsl\"/>-->\r\n<!--    <file name=\"xsl\\fit.xsl\"/>-->\r\n    <file name=\"xsl\\modifications.xsl\"/>\r\n<!--    <file name=\"xsl\\fxcop-summary.xsl\"/>-->\r\n</xslFiles>\r\n</code>\r\n\r\nNow, when the email is sent - I only get the summary of our customized results rather than the extensive details (which you can find anyways on the provided web page linked in the email).", 
      "date_published": "2010-06-15 08:21:11", 
      "image_path": "", 
      "title_slug": "modifying-contents-cruisecontrolnet-email-results", 
      "rendered_body": "Using CruiseControl.NET, you can configure an email to be sent for different types of events with your continuous build system.  We have cc.net configured to run a NAnt target, which then runs our tests (and other reporting targets).  \r\n\r\nExample: Here is a snippet from the ccnet.config file where the project is configured.  We call the daily target in our default.build.\r\n\r\n<code class=\"java\">\r\n<nant>\r\n        <executable>nant.exe</executable>\r\n        <baseDirectory>C:\\mypath</baseDirectory>\r\n        <buildArgs>daily</buildArgs>\r\n        <nologo>false</nologo>\r\n        <buildFile>default.build</buildFile>\r\n        <logger>NAnt.Core.XmlLogger</logger>\r\n        <buildTimeoutSeconds>12000</buildTimeoutSeconds>\r\n      </nant>\r\n</code>\r\n\r\nExample from the default.build file for NAnt:\r\n\r\n<code class=\"java\">\r\n<target name=\"daily\" depends=\"clean, compileDebug, daily_test_suites, generate_report, post_results\" />\r\n</code>\r\n\r\nThe target \"generate_report\" crunches some numbers for some customized reporting.  We create an xml file with those results.  We also created our own xsl file to parse through that xml file when it is then merged into the master files with ccnet.\r\n\r\nSo -- in order to show that customized report, I just had to edit the ccnet.exe.config file to include it.\r\n\r\n<code class=\"java\">\r\n<!-- Specifies the stylesheets that are used to transform the build results when using the EmailPublisher -->\r\n<xslFiles>\r\n    <file name=\"xsl\\header.xsl\"/>\r\n    <file name=\"xsl\\compile.xsl\"/>\r\n    <file name=\"xsl\\mycustomreport.xsl\" /> <!-- obviously located in the directory to spit out results-->\r\n<!--    <file name=\"xsl\\unittests.xsl\"/>-->\r\n<!--    <file name=\"xsl\\fit.xsl\"/>-->\r\n    <file name=\"xsl\\modifications.xsl\"/>\r\n<!--    <file name=\"xsl\\fxcop-summary.xsl\"/>-->\r\n</xslFiles>\r\n</code>\r\n\r\nNow, when the email is sent - I only get the summary of our customized results rather than the extensive details (which you can find anyways on the provided web page linked in the email).", 
      "date_updated": "2010-06-15 08:35:29", 
      "demo": "", 
      "markup": "h", 
      "title": "Modifying contents of CruiseControl.NET email results", 
      "source_path": null, 
      "collection": 1, 
      "summary": "With a couple thousand tests, the email can be pretty big when viewing the results.  We decided we only wanted the high level summary rather than the nitty gritty details.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-06-15 08:35:29", 
       
      "tags": ".net cruisecontrol.net csharp nant"
    }
  }, 
  {
    "pk": 137, 
    "model": "blog.article", 
    "fields": {
      "body": "EtherApe will regularly update (every few seconds) the cloud of endpoints on what I assume is the subnet.  You can see the number of packets in the different protocols that go across the network.  The more packets, the thicker the line.  It was fun to leave up all day.  \r\n\r\nTo get it, do a:\r\n<code class=\"bash\">\r\nsudo apt-get install etherape\r\n</code>\r\n\r\nThere will be a few libraries that are dependencies, but I forget which they are.", 
      "date_published": "2009-01-05 15:25:54", 
      "image_path": null, 
      "title_slug": "monitor-network-traffic-etherape", 
      "rendered_body": "EtherApe will regularly update (every few seconds) the cloud of endpoints on what I assume is the subnet.  You can see the number of packets in the different protocols that go across the network.  The more packets, the thicker the line.  It was fun to leave up all day.  \r\n\r\nTo get it, do a:\r\n<code class=\"bash\">\r\nsudo apt-get install etherape\r\n</code>\r\n\r\nThere will be a few libraries that are dependencies, but I forget which they are.", 
      "date_updated": "2010-05-04 12:21:57", 
      "demo": null, 
      "markup": "h", 
      "title": "Monitor Network Traffic with EtherApe", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I wanted to count packets coming back and forth while telnet'ing to test out some different email protocols on our mail server and found this nifty little utility: it's called EtherApe.  Supposedly it's a clone of Etherman, which, if it has clones, probably costs money.  \r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/jNWdHI8V5W1IIMh1W1NKYw?feat=embedwebsite\"><img src=\"http://lh6.ggpht.com/_5XZCKcD6--c/SWKJm2hw0wI/AAAAAAAAFzU/F-nxmHF9gvk/s800/Screenshot-EtherApe-1.png\" style=\"width:100%;\" /></a>\r\n\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-01-05 15:35:01", 
       
      "tags": "networking"
    }
  }, 
  {
    "pk": 369, 
    "model": "blog.article", 
    "fields": {
      "body": "The main reason this is such a pain is the main reason for most of the pains in web developer: browsers don't treat things the same way.  And specifically, you guessed it, Internet Explorer is very inconsistent compared to the other players.  We could do many comparisons on what attributes are needed in what browsers, but I'm just going to lay out the full combination.  In the end, the most seamless iframe that I can come up with looks like this:\r\n\r\n.. code-block:: html\r\n\r\n  <iframe\r\n    src=\"remote.html\"\r\n    height=\"400\"\r\n    width=\"500\"\r\n    frameborder=\"0\"\r\n    seamless\r\n    allowTransparency=\"true\"\r\n  ></iframe>\r\n\r\n.. code-block:: css\r\n\r\n  iframe {\r\n    border: 0;\r\n    overflow: hidden;\r\n    height: 400px\r\n    width: 500px;\r\n  }\r\n\r\nSo what do each of these do?\r\n\r\n* **height** and **width** and **styled height/width**- Specifying the height and width as attributes on the iframe and in the style is a sure way to make sure that your dimensions are respected.\r\n\r\n* **frameBorder and styled border** - Specify border=0 on the iframe itself and style it with no border to ensure that a border is not rendered.\r\n\r\n* **seamless** - This is a new html5 attribute to essentially replace frameBorder, ensuring that borders and scrollbars on the iframe are not rendered.\r\n\r\n* **allowTransparency** - In IE, if your remote content does not have a specified background color, but your containing page is not default white, you'll still see the default white on the iframe page unless you set this attribute.\r\n\r\n* **overflow: hidden** - This will hide your scrollbars.  But, whether you want this or not is probably a design call based on your content.\r\n\r\nHave you had good luck hiding the fact that your content is in an iframe with these attributes?  If not which attributes have you used with success?\r\n", 
      "date_published": "2011-03-31 11:17:03", 
      "image_path": "", 
      "title_slug": "most-seamless-iframe", 
      "rendered_body": "<p>The main reason this is such a pain is the main reason for most of the pains in web developer: browsers don't treat things the same way.  And specifically, you guessed it, Internet Explorer is very inconsistent compared to the other players.  We could do many comparisons on what attributes are needed in what browsers, but I'm just going to lay out the full combination.  In the end, the most seamless iframe that I can come up with looks like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;iframe</span>\n  <span class=\"na\">src=</span><span class=\"s\">&quot;remote.html&quot;</span>\n  <span class=\"na\">height=</span><span class=\"s\">&quot;400&quot;</span>\n  <span class=\"na\">width=</span><span class=\"s\">&quot;500&quot;</span>\n  <span class=\"na\">frameborder=</span><span class=\"s\">&quot;0&quot;</span>\n  <span class=\"na\">seamless</span>\n  <span class=\"na\">allowTransparency=</span><span class=\"s\">&quot;true&quot;</span>\n<span class=\"nt\">&gt;&lt;/iframe&gt;</span>\n</pre></div>\n</div><div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">iframe</span> <span class=\"p\">{</span>\n  <span class=\"k\">border</span><span class=\"o\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">overflow</span><span class=\"o\">:</span> <span class=\"k\">hidden</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"o\">:</span> <span class=\"m\">400px</span>\n  <span class=\"k\">width</span><span class=\"o\">:</span> <span class=\"m\">500px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div><p>So what do each of these do?</p>\n<ul class=\"simple\">\n<li><strong>height</strong> and <strong>width</strong> and <strong>styled height/width</strong>- Specifying the height and width as attributes on the iframe and in the style is a sure way to make sure that your dimensions are respected.</li>\n<li><strong>frameBorder and styled border</strong> - Specify border=0 on the iframe itself and style it with no border to ensure that a border is not rendered.</li>\n<li><strong>seamless</strong> - This is a new html5 attribute to essentially replace frameBorder, ensuring that borders and scrollbars on the iframe are not rendered.</li>\n<li><strong>allowTransparency</strong> - In IE, if your remote content does not have a specified background color, but your containing page is not default white, you'll still see the default white on the iframe page unless you set this attribute.</li>\n<li><strong>overflow: hidden</strong> - This will hide your scrollbars.  But, whether you want this or not is probably a design call based on your content.</li>\n</ul>\n<p>Have you had good luck hiding the fact that your content is in an iframe with these attributes?  If not which attributes have you used with success?</p>\n", 
      "date_updated": "2011-03-31 11:19:02", 
      "demo": "", 
      "markup": "r", 
      "title": "Most Seamless Iframe", 
      "source_path": "", 
      "collection": 1, 
      "summary": "With few exceptions, it seems that when a developer puts a iframe on his page, he wants it to be seamless on his page.  In other words, he doesn't want the viewer to know that it's actually an iframe.  To that end, there are a couple of things you can do to make the iframe virtually invisible.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-03-31 11:18:32", 
       
      "tags": "cross-browser css html iframe"
    }
  }, 
  {
    "pk": 264, 
    "model": "blog.article", 
    "fields": {
      "body": "First, grab Samba:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install smbfs\r\n</code>\r\n\r\nThen use smbmount\r\n<code class=\"bash\">\r\nsudo smbmount //remote/path/ /local/mount/path/ -o username=[user]\r\n</code>\r\n\r\nBehind -o, you can specify a number of comma-separated options.  To connect to the remote FS that I desired, I just needed the username specified.  Once you execute the smbmount, you may get a \"Password:\" prompt.  Make sure that you're not hopelessly entering your sudo password, as this is probably the password for the FS.\r\n\r\nA good resource for this whole process is <a href=\"http://www.stevens.edu/itwiki/cgi-bin/wiki/index.php/Linux_Map_a_Network_Drive\">on this wiki</a>, or you can do a\r\n\r\n<code class=\"bash\">\r\n/sbin/mount.cifs --help\r\n</code>", 
      "date_published": "2009-09-21 10:34:22", 
      "image_path": null, 
      "title_slug": "mount-samba-fs-linux", 
      "rendered_body": "First, grab Samba:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install smbfs\r\n</code>\r\n\r\nThen use smbmount\r\n<code class=\"bash\">\r\nsudo smbmount //remote/path/ /local/mount/path/ -o username=[user]\r\n</code>\r\n\r\nBehind -o, you can specify a number of comma-separated options.  To connect to the remote FS that I desired, I just needed the username specified.  Once you execute the smbmount, you may get a \"Password:\" prompt.  Make sure that you're not hopelessly entering your sudo password, as this is probably the password for the FS.\r\n\r\nA good resource for this whole process is <a href=\"http://www.stevens.edu/itwiki/cgi-bin/wiki/index.php/Linux_Map_a_Network_Drive\">on this wiki</a>, or you can do a\r\n\r\n<code class=\"bash\">\r\n/sbin/mount.cifs --help\r\n</code>", 
      "date_updated": "2010-05-04 12:21:57", 
      "demo": null, 
      "markup": "h", 
      "title": "Mount Samba FS on Linux", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Have you ever wanted to map to a remote drive or mount a samba share on Linux?  The commands a really easy, and they're chronicled here.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-21 10:42:29", 
       
      "tags": "networking samba storage"
    }
  }, 
  {
    "pk": 113, 
    "model": "blog.article", 
    "fields": {
      "body": "Almost any interesting application nowadays uses a database to store its goodies.  One of the most popular is the wildly-successful and generally good-looking MySQL database.  Hopefully it stays true to its core (and free!) now that Sun has acquired it.  Here's a tidbit on how to get it running on Ubuntu.\r\n\r\nThis was my first step:\r\n\r\n<code class=\"bash\">\r\napt-get install mysql-client-5.0\r\n</code>\r\n\r\nWithout installing and starting server, you'll get this:\r\n<code class=\"bash\">\r\nMySQL Error Nr. 2002 Can't conect to local MySQL server through socket /var/lib/mysql/mysql.sock (2)\r\n</code>\r\n\r\nForums explaining how to resolve this error are <a href=\"http://forums.mysql.com/read.php?10,4753,7295\">varied</a> in their response (apparently sometimes this is an issue after upgrading database versions), but none of them addressed the most simple test, which turns out to be the solution:  Install the server!\r\n\r\n<code class=\"bash\">\r\napt-get install mysql-server-5.0\r\n</code>\r\n\r\nYou'll be prompted for a root password for mysql-server, and it'll start up the server automagically.\r\n\r\nEnter your mysql world by typing:\r\n\r\n<code class=\"bash\">\r\nmysql\r\n</code>\r\n\r\nAnd, interestingly enough, to exit, type:\r\n\r\n<code class=\"bash\">\r\nexit\r\n</code>\r\n\r\n\"Bye\"\r\n\r\nOh, by the way... there are some other GUI interface tools for your newly installed mysql database that could be helpful if you don't remember all your sql syntax:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install mysql-admin; sudo apt-get install mysql-query-browser\r\n</code>", 
      "date_published": "2008-09-26 15:06:33", 
      "image_path": null, 
      "title_slug": "mysql-ubuntu-linux-8", 
      "rendered_body": "Almost any interesting application nowadays uses a database to store its goodies.  One of the most popular is the wildly-successful and generally good-looking MySQL database.  Hopefully it stays true to its core (and free!) now that Sun has acquired it.  Here's a tidbit on how to get it running on Ubuntu.\r\n\r\nThis was my first step:\r\n\r\n<code class=\"bash\">\r\napt-get install mysql-client-5.0\r\n</code>\r\n\r\nWithout installing and starting server, you'll get this:\r\n<code class=\"bash\">\r\nMySQL Error Nr. 2002 Can't conect to local MySQL server through socket /var/lib/mysql/mysql.sock (2)\r\n</code>\r\n\r\nForums explaining how to resolve this error are <a href=\"http://forums.mysql.com/read.php?10,4753,7295\">varied</a> in their response (apparently sometimes this is an issue after upgrading database versions), but none of them addressed the most simple test, which turns out to be the solution:  Install the server!\r\n\r\n<code class=\"bash\">\r\napt-get install mysql-server-5.0\r\n</code>\r\n\r\nYou'll be prompted for a root password for mysql-server, and it'll start up the server automagically.\r\n\r\nEnter your mysql world by typing:\r\n\r\n<code class=\"bash\">\r\nmysql\r\n</code>\r\n\r\nAnd, interestingly enough, to exit, type:\r\n\r\n<code class=\"bash\">\r\nexit\r\n</code>\r\n\r\n\"Bye\"\r\n\r\nOh, by the way... there are some other GUI interface tools for your newly installed mysql database that could be helpful if you don't remember all your sql syntax:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install mysql-admin; sudo apt-get install mysql-query-browser\r\n</code>", 
      "date_updated": "2010-05-04 12:21:58", 
      "demo": null, 
      "markup": "h", 
      "title": "MySQL on Ubuntu Linux 8", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Almost any interesting application nowadays uses a database to store its goodies.  One of the most popular is the wildly-successful and generally good-looking MySQL database.  Hopefully it stays true to its core (and free!) now that Sun has acquired it.  Here's a tidbit on how to get it running on Ubuntu.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:08:26", 
       
      "tags": "linux mysql sql ubuntu"
    }
  }, 
  {
    "pk": 311, 
    "model": "blog.article", 
    "fields": {
      "body": "On our project at work, I am experimenting with some lambda and linq expressions.  It's been kind of fun except for the road-block I hit.  I don't have Visual Studio installed on our automation machines.  They simply have NUnit, NAnt, CruiseControl.NET to run the automation builds.\r\n\r\nThe dilemma was NAnt would use the .NET 2.0 compiler and thus the build would fail.  I went digging and found that I needed the \"Microsoft Windows SDK for Visual Studio 2008 SP1 Express Tools for .NET framework\".  You cannot install this without Visual Studio installed, which is just plain retarded.\r\n\r\nSome other blogs indicated to install Windows Server 2008, but I don't have a license for that.  Here is what I did to get around it.\r\n\r\n1. Install VS 2008 Express SP 1\r\n2. Uninstall it (along with the accompanying C++ and Sql installs)\r\n3. Leaving the \"Microsoft Windows SDK for Visual Studio 2008 SP1 Express Tools for .NET framework\" alone\r\n4. Navigating to the nant.exe.config file and replacing the readregistry line in the 3.5 section.  It now reads to the SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows\\\\v6.0A\\\\WindSDKExpressTools\\\\... folder that exists in the registry.\r\n\r\nWorks like a charm so far.  Man! You'd think it'd be easier.", 
      "date_published": "2010-05-11 07:36:50", 
      "image_path": "", 
      "title_slug": "using-nant-086-beta-1-net-35-compiler", 
      "rendered_body": "On our project at work, I am experimenting with some lambda and linq expressions.  It's been kind of fun except for the road-block I hit.  I don't have Visual Studio installed on our automation machines.  They simply have NUnit, NAnt, CruiseControl.NET to run the automation builds.\r\n\r\nThe dilemma was NAnt would use the .NET 2.0 compiler and thus the build would fail.  I went digging and found that I needed the \"Microsoft Windows SDK for Visual Studio 2008 SP1 Express Tools for .NET framework\".  You cannot install this without Visual Studio installed, which is just plain retarded.\r\n\r\nSome other blogs indicated to install Windows Server 2008, but I don't have a license for that.  Here is what I did to get around it.\r\n\r\n1. Install VS 2008 Express SP 1\r\n2. Uninstall it (along with the accompanying C++ and Sql installs)\r\n3. Leaving the \"Microsoft Windows SDK for Visual Studio 2008 SP1 Express Tools for .NET framework\" alone\r\n4. Navigating to the nant.exe.config file and replacing the readregistry line in the 3.5 section.  It now reads to the SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows\\\\v6.0A\\\\WindSDKExpressTools\\\\... folder that exists in the registry.\r\n\r\nWorks like a charm so far.  Man! You'd think it'd be easier.", 
      "date_updated": "2010-05-17 07:20:07", 
      "demo": "", 
      "markup": "h", 
      "title": "NAnt 0.86 beta 1 w/ .NET 3.5 compiler", 
      "source_path": null, 
      "collection": 1, 
      "summary": "On our project at work, I am experimenting with some lambda and linq expressions.  It's been kind of fun except for the road-block I hit.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-05-11 07:39:10", 
       
      "tags": "csharp linq nant"
    }
  }, 
  {
    "pk": 384, 
    "model": "blog.article", 
    "fields": {
      "body": "I like to ask the question: What am I trying to verify?  To me, when I write unit tests, I want to verify the correct implementation of business logic.  I don't want to test dependencies with external infrastructure and environment.  I just want to test the code I wrote.  In many cases, the most important code that I wrote are the actual business rule implementations.  Of course, this will vary from project to project.  If that's not the point of concern for your project, perhaps unit tests aren't going to be your answer for verifying the proper working order of your app.\r\n\r\nBy saying that you're not going to test code that calls the database or interacts with the network layer, you're committing to some separation of concern in your code.  This will force you to notice where you're doing these things and to respect them a bit more.  In my opinion, this won't be a bad thing.  \r\n", 
      "date_published": "2011-05-27 11:28:12", 
      "image_path": "", 
      "title_slug": "no-side-effects", 
      "rendered_body": "<p>I like to ask the question: What am I trying to verify?  To me, when I write unit tests, I want to verify the correct implementation of business logic.  I don't want to test dependencies with external infrastructure and environment.  I just want to test the code I wrote.  In many cases, the most important code that I wrote are the actual business rule implementations.  Of course, this will vary from project to project.  If that's not the point of concern for your project, perhaps unit tests aren't going to be your answer for verifying the proper working order of your app.</p>\n<p>By saying that you're not going to test code that calls the database or interacts with the network layer, you're committing to some separation of concern in your code.  This will force you to notice where you're doing these things and to respect them a bit more.  In my opinion, this won't be a bad thing.</p>\n", 
      "date_updated": "2011-05-27 11:28:58", 
      "demo": "", 
      "markup": "r", 
      "title": "No Side Effects", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Personally, I like to write unit tests that can be written regardless of the context from which they are run.  Specifically, this means not depending on the database or data in the database and not depending on either the http request or response.  To me, a test that interacts with these dependencies has moved from being a unit test to an integration test or a functional test, depending on how it is executed and what connections it tests.  This is just my favored flavor.  You could call a test that reads or writes to the database or reads request variables a unit test, and I'm sure that would be just fine.  I'm not too caught up on the semantics of it all.  Whatever.\r\n", 
      "source": "", 
      "user": 1, 
      "active": false, 
      "date_created": "2011-05-27 11:28:58", 
       
      "tags": "marklogic unit-testing xquery"
    }
  }, 
  {
    "pk": 375, 
    "model": "blog.article", 
    "fields": {
      "body": "Here is an example tip from the presentation:\r\n\r\nInstead of querying the database on every transaction to get configuration information, in new MarkLogic Server 4.2 fashion, put the config data in server fields which are pinned in memory that are instantly available to any transaction in the server.\r\n\r\nPutting it in: \r\n\r\n.. code-block:: xquery\r\n\r\n  let $config := <someConfiguration enabled=\"true\"/>\r\n  return xdmp:set-server-field('myConfigName', $config)\r\n\r\nGetting it back out:\r\n\r\n.. code-block:: xquery\r\n\r\n  let $config := xdmp:get-server-field('myConfigName')\r\n\r\nTo REALLY SCREAM, put lookup data into a map using the map:* functions available in MarkLogic Server.\r\n\r\nMore to come...", 
      "date_published": "2011-04-21 16:09:09", 
      "image_path": "", 
      "title_slug": "non-query-optimization", 
      "rendered_body": "<p>Here is an example tip from the presentation:</p>\n<p>Instead of querying the database on every transaction to get configuration information, in new MarkLogic Server 4.2 fashion, put the config data in server fields which are pinned in memory that are instantly available to any transaction in the server.</p>\n<p>Putting it in:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>let $config := &lt;someConfiguration enabled=&quot;true&quot;/&gt;\nreturn xdmp:set-server-field(&#39;myConfigName&#39;, $config)\n</pre></div>\n</div><p>Getting it back out:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>let $config := xdmp:get-server-field(&#39;myConfigName&#39;)\n</pre></div>\n</div><p>To REALLY SCREAM, put lookup data into a map using the map:* functions available in MarkLogic Server.</p>\n<p>More to come...</p>\n", 
      "date_updated": "2011-04-27 07:41:05", 
      "demo": "tyrian66/NonQueryOptimization.pdf", 
      "markup": "r", 
      "title": "Non-Query Optimization Presentation", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Beyond standard query optimization in MarkLogic, scalability and performance can often be dramatically improved by using strategies or patterns that avoiding making database queries.\r\n\r\nThe demo is the presentation given at the 2011 MarkLogic Conference.\r\n", 
      "source": "", 
      "user": 10, 
      "active": true, 
      "date_created": "2011-04-21 16:11:39",
      "tags": "marklogic performance scalability xquery"
    }
  }, 
  {
    "pk": 262, 
    "model": "blog.article", 
    "fields": {
      "body": "My original query was thus, names changed to protect the innocent:\r\n\r\n<code class=\"sql\">\r\nselect count(*)\r\nfrom   temp_legacy_attachments i\r\nwhere  i.person_id not in (\r\n  select m.legacy_person_id\r\n  from   new_attachment a\r\n  ,      person p\r\n  where  a.person_id = p.id);\r\n</code>\r\n\r\nI was trying to query the temp_legacy_attachments to get all rows that didn't have a record in the new_attachments table.  It never returned, and so Reed told me to give this one a try:\r\n\r\n<code class=\"sql\">\r\nselect count(*)\r\nfrom   temp_legacy_attachments i\r\nleft join (\r\n  select m.legacy_person_id\r\n  from   new_attachment a\r\n  ,      person p\r\n  where  a.person_id = p.id) ea on ea.legacy_person_id = i.person_id\r\nwhere ea.legacy_person_id is null ;\r\n</code>\r\n\r\nSo, instead of using \"not in\" a set, I select all the legacy rows, then outer join to the new_attachment rows and filter where a column on the new attachment set is null (it's the smaller/less-available set).\r\n\r\nI thought it was pretty sweet.  No magic bullet, though, as Reed tells me that there is a fair amount of debate over the performance difference between the two methods.  You just have to try it and find out.  For me, in this case, the outer join was more awesome.\r\n\r\n<h3>Update</h3>\r\nAnother savvy DBA, Bill, has graced us with another method yet:\r\n\r\n<code class=\"sql\">\r\nselect sum(cnt)\r\nfrom (\r\n  select p.legacy_person_id\r\n  ,      count(*) cnt\r\n  from   person p\r\n  join   temp_legacy_attachments i on i.person_id = p.legacy_person_id\r\n  where  not exists\r\n    (select null\r\n    from   new_attachments a\r\n    where  a.person_id = p.id\r\n    and    a.created_by = 'LEGACY_MIGRATION')\r\n  group by p.legacy_person_id)\r\n</code>", 
      "date_published": "2009-09-17 13:59:25", 
      "image_path": null, 
      "title_slug": "not-vs-outer-join-performance", 
      "rendered_body": "My original query was thus, names changed to protect the innocent:\r\n\r\n<code class=\"sql\">\r\nselect count(*)\r\nfrom   temp_legacy_attachments i\r\nwhere  i.person_id not in (\r\n  select m.legacy_person_id\r\n  from   new_attachment a\r\n  ,      person p\r\n  where  a.person_id = p.id);\r\n</code>\r\n\r\nI was trying to query the temp_legacy_attachments to get all rows that didn't have a record in the new_attachments table.  It never returned, and so Reed told me to give this one a try:\r\n\r\n<code class=\"sql\">\r\nselect count(*)\r\nfrom   temp_legacy_attachments i\r\nleft join (\r\n  select m.legacy_person_id\r\n  from   new_attachment a\r\n  ,      person p\r\n  where  a.person_id = p.id) ea on ea.legacy_person_id = i.person_id\r\nwhere ea.legacy_person_id is null ;\r\n</code>\r\n\r\nSo, instead of using \"not in\" a set, I select all the legacy rows, then outer join to the new_attachment rows and filter where a column on the new attachment set is null (it's the smaller/less-available set).\r\n\r\nI thought it was pretty sweet.  No magic bullet, though, as Reed tells me that there is a fair amount of debate over the performance difference between the two methods.  You just have to try it and find out.  For me, in this case, the outer join was more awesome.\r\n\r\n<h3>Update</h3>\r\nAnother savvy DBA, Bill, has graced us with another method yet:\r\n\r\n<code class=\"sql\">\r\nselect sum(cnt)\r\nfrom (\r\n  select p.legacy_person_id\r\n  ,      count(*) cnt\r\n  from   person p\r\n  join   temp_legacy_attachments i on i.person_id = p.legacy_person_id\r\n  where  not exists\r\n    (select null\r\n    from   new_attachments a\r\n    where  a.person_id = p.id\r\n    and    a.created_by = 'LEGACY_MIGRATION')\r\n  group by p.legacy_person_id)\r\n</code>", 
      "date_updated": "2010-05-04 12:21:58", 
      "demo": null, 
      "markup": "h", 
      "title": "Not in vs. Outer join Performance", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I was running an SQL query today and it was sooooo slow.  So slow, in fact, that it never returned.  I asked the DBA, Reed, who built the table what might be up, and he informed me that it was not indexed.  And proceeded to show me some cool stuff I could do to actually get my query to return.  In the end, it was a comparison between the \"not in\" operator and a \"left join\".", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-17 14:00:12", 
       
      "tags": "oracle performance sql"
    }
  }, 
  {
    "pk": 110, 
    "model": "blog.article", 
    "fields": {
      "body": "Sometimes it's desirable to be able to have a null or \"none of these\" option for a dropdown.  I've gotten tripped up on the syntax a couple times and have found enough variance in \"solutions\" listed on forums that I'll just add to the mix and record what works well for me here.\r\n\r\nThe code:\r\n\r\n<code class=\"jsp\">\r\n<h:selectOneMenu value=\"#{missionaryDetailsBean.missionary.bloodType}\">\r\n   <f:selectItem value=\"#{null}\" />\r\n   <f:selectItems value=\"#{missionaryDetailsBean.bloodTypesList}\" />\r\n </h:selectOneMenu>\r\n</code>\r\n\r\nAlternatively, you can put some text in to describe the extra option:\r\n\r\n<code class=\"jsp\">\r\n<f:selectItem value=\"#{null}\" itemLabel=\"Choose one...\" />\r\n</code>", 
      "date_published": "2008-11-24 15:04:11", 
      "image_path": null, 
      "title_slug": "null-selectitem-option", 
      "rendered_body": "Sometimes it's desirable to be able to have a null or \"none of these\" option for a dropdown.  I've gotten tripped up on the syntax a couple times and have found enough variance in \"solutions\" listed on forums that I'll just add to the mix and record what works well for me here.\r\n\r\nThe code:\r\n\r\n<code class=\"jsp\">\r\n<h:selectOneMenu value=\"#{missionaryDetailsBean.missionary.bloodType}\">\r\n   <f:selectItem value=\"#{null}\" />\r\n   <f:selectItems value=\"#{missionaryDetailsBean.bloodTypesList}\" />\r\n </h:selectOneMenu>\r\n</code>\r\n\r\nAlternatively, you can put some text in to describe the extra option:\r\n\r\n<code class=\"jsp\">\r\n<f:selectItem value=\"#{null}\" itemLabel=\"Choose one...\" />\r\n</code>", 
      "date_updated": "2010-05-04 12:21:58", 
      "demo": null, 
      "markup": "h", 
      "title": "Null SelectItem Option", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Sometimes it's desirable to be able to have a null or \"none of these\" option for a dropdown.  I've gotten tripped up on the syntax a couple times and have found enough variance in \"solutions\" listed on forums that I'll just add to the mix and record what works well for me here.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:04:42", 
       
      "tags": "java jsf"
    }
  }, 
  {
    "pk": 278, 
    "model": "blog.article", 
    "fields": {
      "body": "A few quick observations based on my limited Webflow exposure:  Conversation control seems more granular.  Starting subflows (sub-conversations) is very easy and clean up well after themselves.  Webflow keeps flow/nav all in related webflow xml, which are clearly hierarchical and separated.  Webflow also seems to have a clearer and easier-to-follow syntax in its xml.\r\n\r\nIn my 2 days on this project with Webflow, I saw what I thought looked like a fair amount of duplicate xml code in the *-flow.xml files.  This smell led me to perservere on a better solution.  Thus, recorded here, is my method for creating a reusable state that has behavior specific to the code that is using it.  Specifically, for a view-state that navs to an action-state, that action-state's back/error transition can know how to return to the state that just invoked it.\r\n\r\nHere's the view-state:\r\n\r\n<code class=\"xml\">\r\n<view-state id=\"startingView\" view=\"/start.xhtml\">\r\n  <transition on=\"return\" to=\"processReturn\">\r\n      <set attribute=\"returningFrom\" value=\"${'startingView'}\" scope=\"flash\"></set>\r\n  </transition>\r\n</view-state>\r\n</code>\r\n\r\nAnd the action-state:\r\n\r\n<code class=\"xml\">\r\n<action-state id=\"processReturn\">\r\n  <bean-action bean=\"service\" method=\"saveAndReturn\">\r\n      <method-result name=\"saveSuccessful\" scope=\"flash\"></method>\r\n  </bean-action>\r\n  <transition on=\"${flashScope.saveSuccessful}\" to=\"backToIndex\"></transition>\r\n  <transition on=\"${!flashScope.saveSuccessful}\" to=\"${flashScope.returningFrom}\"></transition>\r\n</action-state>\r\n</code>\r\n\r\nSo, when the transition in the view for \"return\" is hit, we save an attribute in the flash scope, which is maintained over redirects in the flow, the value being the id of the view-state from which we're coming.  When we get to the action-state, if we find that our action was unsuccessful, we grab the attribute from the flash scope and transition back to that view-state with the given id.  Thus, we don't have to have a separate action-state for each view-state that might want to use similar functionality because we have parameterized the specific data/functionality.\r\n\r\nNote: I had to use the ${'literal'} syntax for the attribute value.  I'm not sure if this is a quirk of Webflow 1 or my project.\r\n\r\nViva la Webflow.  That, or just write SOUIT apps!  (SOUI-technology)", 
      "date_published": "2009-10-08 10:52:55", 
      "image_path": null, 
      "title_slug": "parameterized-states-webflow", 
      "rendered_body": "A few quick observations based on my limited Webflow exposure:  Conversation control seems more granular.  Starting subflows (sub-conversations) is very easy and clean up well after themselves.  Webflow keeps flow/nav all in related webflow xml, which are clearly hierarchical and separated.  Webflow also seems to have a clearer and easier-to-follow syntax in its xml.\r\n\r\nIn my 2 days on this project with Webflow, I saw what I thought looked like a fair amount of duplicate xml code in the *-flow.xml files.  This smell led me to perservere on a better solution.  Thus, recorded here, is my method for creating a reusable state that has behavior specific to the code that is using it.  Specifically, for a view-state that navs to an action-state, that action-state's back/error transition can know how to return to the state that just invoked it.\r\n\r\nHere's the view-state:\r\n\r\n<code class=\"xml\">\r\n<view-state id=\"startingView\" view=\"/start.xhtml\">\r\n  <transition on=\"return\" to=\"processReturn\">\r\n      <set attribute=\"returningFrom\" value=\"${'startingView'}\" scope=\"flash\"></set>\r\n  </transition>\r\n</view-state>\r\n</code>\r\n\r\nAnd the action-state:\r\n\r\n<code class=\"xml\">\r\n<action-state id=\"processReturn\">\r\n  <bean-action bean=\"service\" method=\"saveAndReturn\">\r\n      <method-result name=\"saveSuccessful\" scope=\"flash\"></method>\r\n  </bean-action>\r\n  <transition on=\"${flashScope.saveSuccessful}\" to=\"backToIndex\"></transition>\r\n  <transition on=\"${!flashScope.saveSuccessful}\" to=\"${flashScope.returningFrom}\"></transition>\r\n</action-state>\r\n</code>\r\n\r\nSo, when the transition in the view for \"return\" is hit, we save an attribute in the flash scope, which is maintained over redirects in the flow, the value being the id of the view-state from which we're coming.  When we get to the action-state, if we find that our action was unsuccessful, we grab the attribute from the flash scope and transition back to that view-state with the given id.  Thus, we don't have to have a separate action-state for each view-state that might want to use similar functionality because we have parameterized the specific data/functionality.\r\n\r\nNote: I had to use the ${'literal'} syntax for the attribute value.  I'm not sure if this is a quirk of Webflow 1 or my project.\r\n\r\nViva la Webflow.  That, or just write SOUIT apps!  (SOUI-technology)", 
      "date_updated": "2010-05-04 12:21:58", 
      "demo": null, 
      "markup": "h", 
      "title": "Parameterized States in Webflow", 
      "source_path": null, 
      "collection": 1, 
      "summary": "My first experience with <a href=\"http://www.springsource.org/webflow\" target=\"_blank\">Spring Webflow</a> is on a project that uses Webflow 1.0.5.  So far, I'm impressed.  Apparently, Webflow 2 offers even more incredible awesomeness, but thusfar I would put my webflow experience over that of my previous couple years in Seam.  (I was just waiting for a chance to abandon that library anyway.)  \r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-10-08 11:00:36", 
       
      "tags": "java spring webflow"
    }
  }, 
  {
    "pk": 258, 
    "model": "blog.article", 
    "fields": {
      "body": "As a part of the same voting mechanism that I wrote about for <a href=\"http://aprilandjake.com/content/pass-parameters-jquery-event-functions/\">this article on event handler parameter passing</a>, I wanted to keep id and (vote) direction around for the callback, which was to update the UI.  \r\n\r\nFirst, I made an ajax call with jquery to make vote updates to the database, and on my way to the ajax call, I would save the id and direction in a global (bad) variable.  This works, because later, I can reference it in my callback function, updateUI:  \r\n\r\n<code class=\"javascript\">\r\nvar action = null;\r\nvar objectid = null;\r\n\r\nfunction vote(id, direction) {\r\n   action = direction;\r\n   objectid = id;\r\n   $.ajax({\r\n     type: 'POST',\r\n     url: '/hymn/' + id + '/vote/' + direction + '/',\r\n     dataType: 'json',\r\n     async: false,\r\n     timeout: 15000,\r\n     success: updateUI\r\n   });\r\n}\r\n</code>\r\n\r\nThe next solution is a bit cleaner and makes us feel better about ourself.  Instead of the global, a closure is used, in which we decorate the response object with new state (id and direction); and since the response object is passed by default into the ajax callback function, it's available later by calling response.id or response.objectid:\r\n\r\n<code class=\"javascript\">\r\nfunction vote(id, direction) {\r\n   $.ajax({\r\n     type: 'POST',\r\n     url: '/hymn/' + id + '/vote/' + direction + '/',\r\n     dataType: 'json',\r\n     async: false,\r\n     timeout: 15000,\r\n     success: function (response) {\r\n           response.action = direction\r\n           response.objectid = id\r\n           updateUI(response);\r\n        }\r\n   });\r\n}\r\n</code>\r\n\r\nSweet!", 
      "date_published": "2009-09-09 12:45:06", 
      "image_path": null, 
      "title_slug": "pass-parameters-javascript-callback", 
      "rendered_body": "As a part of the same voting mechanism that I wrote about for <a href=\"http://aprilandjake.com/content/pass-parameters-jquery-event-functions/\">this article on event handler parameter passing</a>, I wanted to keep id and (vote) direction around for the callback, which was to update the UI.  \r\n\r\nFirst, I made an ajax call with jquery to make vote updates to the database, and on my way to the ajax call, I would save the id and direction in a global (bad) variable.  This works, because later, I can reference it in my callback function, updateUI:  \r\n\r\n<code class=\"javascript\">\r\nvar action = null;\r\nvar objectid = null;\r\n\r\nfunction vote(id, direction) {\r\n   action = direction;\r\n   objectid = id;\r\n   $.ajax({\r\n     type: 'POST',\r\n     url: '/hymn/' + id + '/vote/' + direction + '/',\r\n     dataType: 'json',\r\n     async: false,\r\n     timeout: 15000,\r\n     success: updateUI\r\n   });\r\n}\r\n</code>\r\n\r\nThe next solution is a bit cleaner and makes us feel better about ourself.  Instead of the global, a closure is used, in which we decorate the response object with new state (id and direction); and since the response object is passed by default into the ajax callback function, it's available later by calling response.id or response.objectid:\r\n\r\n<code class=\"javascript\">\r\nfunction vote(id, direction) {\r\n   $.ajax({\r\n     type: 'POST',\r\n     url: '/hymn/' + id + '/vote/' + direction + '/',\r\n     dataType: 'json',\r\n     async: false,\r\n     timeout: 15000,\r\n     success: function (response) {\r\n           response.action = direction\r\n           response.objectid = id\r\n           updateUI(response);\r\n        }\r\n   });\r\n}\r\n</code>\r\n\r\nSweet!", 
      "date_updated": "2010-05-04 12:21:58", 
      "demo": null, 
      "markup": "h", 
      "title": "Pass Parameters to Javascript Callback", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Callback functions are a nice feature of Javascript.  It's nice to be able to just use a function handle to show that it should be called when a certain something completes.  Sometimes, however, we want to do more than just specify a function handle.  We want to pass parameters.  Why?  Because sometimes the callback method cares about other data that was available before the original request.  Here's an example:", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-09 12:55:59", 
       
      "tags": "javascript jquery souit"
    }
  }, 
  {
    "pk": 257, 
    "model": "blog.article", 
    "fields": {
      "body": "The need to pass parameters is made clear when you have a callback that functions differently depending on what particular element triggers the event.  For example,  I'm doing a simple voting mechanism for every item in a list.  When an up or down arrow in front of the item is pressed, I want to make an ajax call that will record the vote on the server and then update the UI.  Therefore, I need to know what item I'm recording the vote for.  In the code below, the id will tell me what row I'm on.  This is the most important part.  The second parameter is the direction of the vote (up or down).  This is less important, in this case, because the same thing could have been accomplished by creating a separate callback for up and down.\r\n\r\n<code class=\"javascript\">\r\n$(document).ready(function() {\r\n   $(\".voter-up,.voter-down\").click(function() {\r\n     var id = parseInt($(this).attr(\"id\").substring(12));\r\n     var direction = $(this).attr(\"class\").substring(6);\r\n     vote(id, direction);\r\n   });\r\n});\r\n</code>\r\n\r\nSo what's the key?  Embed the data that you want in id, class, or just any attribute of any element that has a per-item/row presence.  That explains the substring() calls.  My attributes look like this:\r\n\r\n<code class=\"html\">\r\n<a class=\"voter-up\" id=\"link-hymn-u-{{ h.id }}\" href=\"#\">...something...</a>\r\n</code>\r\n\r\nThe {{ curlies }} are for django templates, which are awesome, btw.", 
      "date_published": "2009-09-08 15:06:54", 
      "image_path": null, 
      "title_slug": "pass-parameters-jquery-event-functions", 
      "rendered_body": "The need to pass parameters is made clear when you have a callback that functions differently depending on what particular element triggers the event.  For example,  I'm doing a simple voting mechanism for every item in a list.  When an up or down arrow in front of the item is pressed, I want to make an ajax call that will record the vote on the server and then update the UI.  Therefore, I need to know what item I'm recording the vote for.  In the code below, the id will tell me what row I'm on.  This is the most important part.  The second parameter is the direction of the vote (up or down).  This is less important, in this case, because the same thing could have been accomplished by creating a separate callback for up and down.\r\n\r\n<code class=\"javascript\">\r\n$(document).ready(function() {\r\n   $(\".voter-up,.voter-down\").click(function() {\r\n     var id = parseInt($(this).attr(\"id\").substring(12));\r\n     var direction = $(this).attr(\"class\").substring(6);\r\n     vote(id, direction);\r\n   });\r\n});\r\n</code>\r\n\r\nSo what's the key?  Embed the data that you want in id, class, or just any attribute of any element that has a per-item/row presence.  That explains the substring() calls.  My attributes look like this:\r\n\r\n<code class=\"html\">\r\n<a class=\"voter-up\" id=\"link-hymn-u-{{ h.id }}\" href=\"#\">...something...</a>\r\n</code>\r\n\r\nThe {{ curlies }} are for django templates, which are awesome, btw.", 
      "date_updated": "2010-05-04 12:21:58", 
      "demo": null, 
      "markup": "h", 
      "title": "Pass Parameters to Jquery Event Functions", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Jquery has some awesome event-handling abilities.  The elusive ability to pass parameters into these event callbacks seems way harder than it should be.  Nevertheless, I have found *a* solution.  I really doubt it's the best one.  I really hope it isn't.  ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-08 15:16:20", 
       
      "tags": "javascript jquery souit"
    }
  }, 
  {
    "pk": 319, 
    "model": "blog.article", 
    "fields": {
      "body": "It seems improbable that such a disgusting problem would have been conceived in a fairly new image file format.  But, the story is well-known:\r\n\r\n* Chronicled in the `The Sad Story of PNG Gamma 'Correction' <http://hsivonen.iki.fi/png-gamma/>`_\r\n* Gamma channel vs. browser `comparison <http://morris-photographics.com/photoshop/articles/png-gamma.html>`_\r\n* Gamma correction `test page <http://www.libpng.org/pub/png/png-gammatest.html>`_\r\n\r\nIn my personal experience, I have been bitten by this little bugger.  As I was creating new graphics for my blog, I created a couple different images and saved them as PNGs.  Like any good web developer, I dev'ed this in Firefox and look at nothing else.  :)  My dad, one of the 4 people who frequent my blog reported some oddities in the look and feel, and sure enough, there they were:\r\n\r\nFirefox 3.6\r\n\r\n.. image:: http://lh3.ggpht.com/_5XZCKcD6--c/TB-aAhshi0I/AAAAAAAAM1s/XCrVWdh1Gsw/s400/aj4-ff.jpg\r\n\r\nInternet Explorer 8\r\n\r\n.. image:: http://lh3.ggpht.com/_5XZCKcD6--c/TB-aAiB55JI/AAAAAAAAM1w/dxNlbywz5m0/s400/aj4-ie8.jpg\r\n\r\nAfter stumbling across the above Morris Photographics link, I tried the referenced `pngcrush <http://pmt.sourceforge.net/pngcrush/>`_ utility, which was easily available via aptitude:\r\n\r\n.. code-block:: bash\r\n\r\n  sudo apt-get install pngcrush\r\n\r\nFrom \"The Sad Story\", supposedly \"There is no way of making PNG images that match CSS colors in all  PNG-supporting browsers.\"  But, when looking at the Morris Photographics comparison chart, it seemed that when the gAMA chunk was removed, all listed browsers correctly displayed the PNG.  I tried a:\r\n\r\n.. code-block:: bash\r\n\r\n  pngcrush -rem gAMA infile.png outfile.png\r\n\r\nAnd it worked like a dream.  Now, my parents can see the blog in its splendor, free from discolored boxes.  Bam!  Now think about that.", 
      "date_published": "2010-06-21 10:59:35", 
      "image_path": "", 
      "title_slug": "png-gamma-correction-woes", 
      "rendered_body": "<p>It seems improbable that such a disgusting problem would have been conceived in a fairly new image file format.  But, the story is well-known:</p>\n<ul class=\"simple\">\n<li>Chronicled in the <a class=\"reference external\" href=\"http://hsivonen.iki.fi/png-gamma/\">The Sad Story of PNG Gamma 'Correction'</a></li>\n<li>Gamma channel vs. browser <a class=\"reference external\" href=\"http://morris-photographics.com/photoshop/articles/png-gamma.html\">comparison</a></li>\n<li>Gamma correction <a class=\"reference external\" href=\"http://www.libpng.org/pub/png/png-gammatest.html\">test page</a></li>\n</ul>\n<p>In my personal experience, I have been bitten by this little bugger.  As I was creating new graphics for my blog, I created a couple different images and saved them as PNGs.  Like any good web developer, I dev'ed this in Firefox and look at nothing else.  :)  My dad, one of the 4 people who frequent my blog reported some oddities in the look and feel, and sure enough, there they were:</p>\n<p>Firefox 3.6</p>\n<img alt=\"http://lh3.ggpht.com/_5XZCKcD6--c/TB-aAhshi0I/AAAAAAAAM1s/XCrVWdh1Gsw/s400/aj4-ff.jpg\" src=\"http://lh3.ggpht.com/_5XZCKcD6--c/TB-aAhshi0I/AAAAAAAAM1s/XCrVWdh1Gsw/s400/aj4-ff.jpg\" />\n<p>Internet Explorer 8</p>\n<img alt=\"http://lh3.ggpht.com/_5XZCKcD6--c/TB-aAiB55JI/AAAAAAAAM1w/dxNlbywz5m0/s400/aj4-ie8.jpg\" src=\"http://lh3.ggpht.com/_5XZCKcD6--c/TB-aAiB55JI/AAAAAAAAM1w/dxNlbywz5m0/s400/aj4-ie8.jpg\" />\n<p>After stumbling across the above Morris Photographics link, I tried the referenced <a class=\"reference external\" href=\"http://pmt.sourceforge.net/pngcrush/\">pngcrush</a> utility, which was easily available via aptitude:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>sudo apt-get install pngcrush\n</pre></div>\n</div><p>From &quot;The Sad Story&quot;, supposedly &quot;There is no way of making PNG images that match CSS colors in all  PNG-supporting browsers.&quot;  But, when looking at the Morris Photographics comparison chart, it seemed that when the gAMA chunk was removed, all listed browsers correctly displayed the PNG.  I tried a:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>pngcrush -rem gAMA infile.png outfile.png\n</pre></div>\n</div><p>And it worked like a dream.  Now, my parents can see the blog in its splendor, free from discolored boxes.  Bam!  Now think about that.</p>\n", 
      "date_updated": "2010-06-21 13:15:42", 
      "demo": "", 
      "markup": "r", 
      "title": "PNG Gamma Correction Woes", 
      "source_path": null, 
      "collection": 1, 
      "summary": "PNG was a file format that, among the original reasons for conception, was created to show the same color over different computers, with different OS's, and browsers.  To this end, gamma, or lighting, correction was added.  While solving the original problem, a new, bigger, badder problem was created.  Now, there was the potential for color inconsistencies on the SAME web page.  For example, the color of certain items rendered on the page with the same hex value will display differently than PNGs rendered on the page painted with the same hex value.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-06-21 11:01:08", 
       
      "tags": "images png"
    }
  }, 
  {
    "pk": 329, 
    "model": "blog.article", 
    "fields": {
      "body": "Bookmarks in the Cloud\r\n----------------------\r\n\r\nYou have lots of options here, but what I really mean is `Delicious <http://delicious.com>`_ (my `personal fav <http://delicious.com/jtsnake/>`_).  \"In the cloud\" only means not on your personal computing device.  Rather, your bookmarks are stored on the Delicious servers, ready to be slurped up at whatever computer you belly up to.  For instance, if I cite a bookmark at work, I instantly have access to it at home.  Also, Delicious bookmarks are gonna give you tagging ability, giving good meta information for categorizing your links without all the rigmarole.  Plus, you have great plugins/extensions available for both `Firefox <https://addons.mozilla.org/en-US/firefox/addon/3615/>`_ and Chrome, integrating Delicious into your browser through REST services.  Firefox, with a Ctrl-D shortcut for bookmarking and nice separate interface for browsing your sync'ed Delicious bookmarks, seems to have a slight upper hand here.\r\n\r\nKeywords / Custom Search Engines\r\n--------------------------------\r\n\r\nThese are two words, depending on the browser, for the same bookmark-type thing.  Have you ever had a bookmark that's just slightly different?  For instance, every day at my current job, I use a bug/issue tracker called `Jira <http://www.atlassian.com/software/jira/>`_.  As I work through my assigned issues at work, I'm always popping directly to the issue, navigating by number.  So, let's have an example:\r\n\r\nNow, I work on a project called Screening, so the first issue I want to go to, by # of 303, might be here:\r\n\r\nhttp://theurl/jira/browse/SCRN-303\r\n\r\nBut then the next issue I want to jump to is # 135 at:\r\n\r\nhttp://theurl/jira/browse/SCRN-135\r\n\r\nWell, since I don't want to bookmark each of these individual issues, I'm going to create a bookmark based on keyword (in Firefox) or a custom search engine (in Chrome), that is going to be formatted the same in each:\r\n\r\nhttp://theurl/jira/browse/SCRN-%s  \r\n\r\nwith a keyword of:\r\n\r\nscrn\r\n\r\nThen, when I want to jump to an issue, all I type in my address bar is:\r\n\r\nscrn 303\r\n\r\nor \r\n\r\nscrn 135\r\n\r\nIt's fast, snazzy, and quick!  Just jump to your bookmarks with glee!  I love this feature!\r\n\r\n`In Firefox <http://www.mozilla.org/docs/end-user/keywords.html>`_, set this up by going to: Bookmarks menu > Organize Bookmarks > right click and Add Bookmark\r\n\r\n`In Chrome <http://www.google.com/support/chrome/bin/answer.py?answer=95653>`_, set this up by going to:  Tools menu > Basic tab > Default Search Manage button\r\n", 
      "date_published": "2010-07-28 10:54:50", 
      "image_path": "", 
      "title_slug": "quick-bookmarks", 
      "rendered_body": "<div class=\"section\" id=\"bookmarks-in-the-cloud\">\n<h1>Bookmarks in the Cloud</h1>\n<p>You have lots of options here, but what I really mean is <a class=\"reference external\" href=\"http://delicious.com\">Delicious</a> (my <a class=\"reference external\" href=\"http://delicious.com/jtsnake/\">personal fav</a>).  &quot;In the cloud&quot; only means not on your personal computing device.  Rather, your bookmarks are stored on the Delicious servers, ready to be slurped up at whatever computer you belly up to.  For instance, if I cite a bookmark at work, I instantly have access to it at home.  Also, Delicious bookmarks are gonna give you tagging ability, giving good meta information for categorizing your links without all the rigmarole.  Plus, you have great plugins/extensions available for both <a class=\"reference external\" href=\"https://addons.mozilla.org/en-US/firefox/addon/3615/\">Firefox</a> and Chrome, integrating Delicious into your browser through REST services.  Firefox, with a Ctrl-D shortcut for bookmarking and nice separate interface for browsing your sync'ed Delicious bookmarks, seems to have a slight upper hand here.</p>\n</div>\n<div class=\"section\" id=\"keywords-custom-search-engines\">\n<h1>Keywords / Custom Search Engines</h1>\n<p>These are two words, depending on the browser, for the same bookmark-type thing.  Have you ever had a bookmark that's just slightly different?  For instance, every day at my current job, I use a bug/issue tracker called <a class=\"reference external\" href=\"http://www.atlassian.com/software/jira/\">Jira</a>.  As I work through my assigned issues at work, I'm always popping directly to the issue, navigating by number.  So, let's have an example:</p>\n<p>Now, I work on a project called Screening, so the first issue I want to go to, by # of 303, might be here:</p>\n<p><a class=\"reference external\" href=\"http://theurl/jira/browse/SCRN-303\">http://theurl/jira/browse/SCRN-303</a></p>\n<p>But then the next issue I want to jump to is # 135 at:</p>\n<p><a class=\"reference external\" href=\"http://theurl/jira/browse/SCRN-135\">http://theurl/jira/browse/SCRN-135</a></p>\n<p>Well, since I don't want to bookmark each of these individual issues, I'm going to create a bookmark based on keyword (in Firefox) or a custom search engine (in Chrome), that is going to be formatted the same in each:</p>\n<p><a class=\"reference external\" href=\"http://theurl/jira/browse/SCRN-%s\">http://theurl/jira/browse/SCRN-%s</a></p>\n<p>with a keyword of:</p>\n<p>scrn</p>\n<p>Then, when I want to jump to an issue, all I type in my address bar is:</p>\n<p>scrn 303</p>\n<p>or</p>\n<p>scrn 135</p>\n<p>It's fast, snazzy, and quick!  Just jump to your bookmarks with glee!  I love this feature!</p>\n<p><a class=\"reference external\" href=\"http://www.mozilla.org/docs/end-user/keywords.html\">In Firefox</a>, set this up by going to: Bookmarks menu &gt; Organize Bookmarks &gt; right click and Add Bookmark</p>\n<p><a class=\"reference external\" href=\"http://www.google.com/support/chrome/bin/answer.py?answer=95653\">In Chrome</a>, set this up by going to:  Tools menu &gt; Basic tab &gt; Default Search Manage button</p>\n</div>\n", 
      "date_updated": "2010-07-28 10:59:37", 
      "demo": "", 
      "markup": "r", 
      "title": "Quick Bookmarks", 
      "source_path": "", 
      "collection": 1, 
      "summary": "For someone who spends mucho time daily on the interwebs, being able to jump around quickly is important -- both for focused productivity and ADD-inducing web surfing.  Bookmarks have long facilitated savings your place on the web for a future return, but there are a few enhancements to the regular vanilla bookmarks that have greatly added to my bookmark delight: 1) Bookmarks in the cloud and 2) Keywords/custom search engines.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-07-28 10:55:46", 
       
      "tags": "browser web"
    }
  }, 
  {
    "pk": 341, 
    "model": "blog.article", 
    "fields": {
      "body": "Oh Man, I just want to know which radio button has been selected when I get to my javascript function so I do this in the form:\r\n\r\n.. code-block:: html\t\t\t\t\t\r\n\r\n   <form class=\"frm-full hint\">\r\n\t\t<fieldset>\r\n\t\t\t<label for=\"count\" title=\"Count\">Number of Users to Create</label><br/>\r\n\t\t\t<input type=\"text\" id=\"count\"/><br/>\r\n\t\r\n\t\t\t<div>\r\n\t\t\t\t<ul id=\"selectOne\" style=\"list-style:none\">\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t<label for=\"mongoDB\">mongoDB</label>\r\n\t\t\t\t\t<input type=\"radio\" value=\"mongoDB\" id=\"mongoDB\" name=\"dbType\" />\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t<label for=\"couchDB\">couchDB</label>\r\n\t\t\t\t\t<input type=\"radio\" value=\"couchDB\" id=\"couchDb\" name=\"dbType\" />\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t<label for=\"markLogic\">markLogic</label>\r\n\t\t\t\t\t<input type=\"radio\" value=\"markLogic\" id=\"markLogic\" name=\"dbType\" />\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"margin:20 20 20 0;\">\r\n\t\t\t\t<ul style=\"list-style:none\">\r\n\t\t\t\t\t<li style=\"float:left\">\r\n\t\t\t\t\t\t<input type=\"button\" class=\"\" value=\"createUsers\"\r\n\t\t\t\t\t\t\t   onclick=\"users.createUsers($('#count'),$('input[name=dbType]:radio:checked'))\"\r\n\t\t\t\t\t\t\t   id=\"createUsers\"/><br/>\r\n\t\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<input type=\"button\" class=\"\" value=\"clearUsers\"\r\n\t\t\t\t\t\t\t   onclick=\"users.clearUsers(this)\"\r\n\t\t\t\t\t\t\t   id=\"clearUsers\"/><br/>\r\n\t\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</fieldset>\r\n\t</form>\r\n\r\nThe delicious part is the selector in the javascript call. I'll repeat it here for your grey matter:\r\n\r\n.. code-block:: javascript\r\n\r\n\t$('input[name=dbType]:radio:checked')\r\n\r\nAnd then I do this in the Javascript\r\n\r\n\r\n.. code-block:: javascript\r\n\r\n var users = {\r\n\tcreateUsers : function(count,dbName){\r\n\t\talert(count.val()+' users created in'+dbName.val());\r\n\t}\r\n };\r\n\r\n\r\nAnd then I go home happy.", 
      "date_published": "2010-09-29 14:36:41", 
      "image_path": "", 
      "title_slug": "radio-button-meet-jquery-and-be-dominated", 
      "rendered_body": "<p>Oh Man, I just want to know which radio button has been selected when I get to my javascript function so I do this in the form:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;form</span> <span class=\"na\">class=</span><span class=\"s\">&quot;frm-full hint&quot;</span><span class=\"nt\">&gt;</span>\n             <span class=\"nt\">&lt;fieldset&gt;</span>\n                     <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">&quot;count&quot;</span> <span class=\"na\">title=</span><span class=\"s\">&quot;Count&quot;</span><span class=\"nt\">&gt;</span>Number of Users to Create<span class=\"nt\">&lt;/label&gt;&lt;br/&gt;</span>\n                     <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;text&quot;</span> <span class=\"na\">id=</span><span class=\"s\">&quot;count&quot;</span><span class=\"nt\">/&gt;&lt;br/&gt;</span>\n\n                     <span class=\"nt\">&lt;div&gt;</span>\n                             <span class=\"nt\">&lt;ul</span> <span class=\"na\">id=</span><span class=\"s\">&quot;selectOne&quot;</span> <span class=\"na\">style=</span><span class=\"s\">&quot;list-style:none&quot;</span><span class=\"nt\">&gt;</span>\n                                     <span class=\"nt\">&lt;li&gt;</span>\n                                     <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">&quot;mongoDB&quot;</span><span class=\"nt\">&gt;</span>mongoDB<span class=\"nt\">&lt;/label&gt;</span>\n                                     <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;radio&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;mongoDB&quot;</span> <span class=\"na\">id=</span><span class=\"s\">&quot;mongoDB&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;dbType&quot;</span> <span class=\"nt\">/&gt;</span>\n                                     <span class=\"nt\">&lt;/li&gt;</span>\n                                     <span class=\"nt\">&lt;li&gt;</span>\n                                     <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">&quot;couchDB&quot;</span><span class=\"nt\">&gt;</span>couchDB<span class=\"nt\">&lt;/label&gt;</span>\n                                     <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;radio&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;couchDB&quot;</span> <span class=\"na\">id=</span><span class=\"s\">&quot;couchDb&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;dbType&quot;</span> <span class=\"nt\">/&gt;</span>\n                                     <span class=\"nt\">&lt;/li&gt;</span>\n                                     <span class=\"nt\">&lt;li&gt;</span>\n                                     <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">&quot;markLogic&quot;</span><span class=\"nt\">&gt;</span>markLogic<span class=\"nt\">&lt;/label&gt;</span>\n                                     <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;radio&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;markLogic&quot;</span> <span class=\"na\">id=</span><span class=\"s\">&quot;markLogic&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;dbType&quot;</span> <span class=\"nt\">/&gt;</span>\n                                     <span class=\"nt\">&lt;/li&gt;</span>\n                             <span class=\"nt\">&lt;/ul&gt;</span>\n                     <span class=\"nt\">&lt;/div&gt;</span>\n                     <span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">&quot;margin:20 20 20 0;&quot;</span><span class=\"nt\">&gt;</span>\n                             <span class=\"nt\">&lt;ul</span> <span class=\"na\">style=</span><span class=\"s\">&quot;list-style:none&quot;</span><span class=\"nt\">&gt;</span>\n                                     <span class=\"nt\">&lt;li</span> <span class=\"na\">style=</span><span class=\"s\">&quot;float:left&quot;</span><span class=\"nt\">&gt;</span>\n                                             <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;button&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;createUsers&quot;</span>\n                                                        <span class=\"na\">onclick=</span><span class=\"s\">&quot;users.createUsers($(&#39;#count&#39;),$(&#39;input[name=dbType]:radio:checked&#39;))&quot;</span>\n                                                        <span class=\"na\">id=</span><span class=\"s\">&quot;createUsers&quot;</span><span class=\"nt\">/&gt;&lt;br/&gt;</span>\n\n                                     <span class=\"nt\">&lt;/li&gt;</span>\n                                     <span class=\"nt\">&lt;li&gt;</span>\n                                             <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;button&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;clearUsers&quot;</span>\n                                                        <span class=\"na\">onclick=</span><span class=\"s\">&quot;users.clearUsers(this)&quot;</span>\n                                                        <span class=\"na\">id=</span><span class=\"s\">&quot;clearUsers&quot;</span><span class=\"nt\">/&gt;&lt;br/&gt;</span>\n\n                                     <span class=\"nt\">&lt;/li&gt;</span>\n                             <span class=\"nt\">&lt;/ul&gt;</span>\n                     <span class=\"nt\">&lt;/div&gt;</span>\n             <span class=\"nt\">&lt;/fieldset&gt;</span>\n     <span class=\"nt\">&lt;/form&gt;</span>\n</pre></div>\n</div><p>The delicious part is the selector in the javascript call. I'll repeat it here for your grey matter:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;input[name=dbType]:radio:checked&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div><p>And then I do this in the Javascript</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">users</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n       <span class=\"nx\">createUsers</span> <span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"o\">,</span><span class=\"nx\">dbName</span><span class=\"p\">){</span>\n               <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s1\">&#39; users created in&#39;</span><span class=\"o\">+</span><span class=\"nx\">dbName</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n       <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div><p>And then I go home happy.</p>\n", 
      "date_updated": "2010-09-29 15:58:43", 
      "demo": "", 
      "markup": "r", 
      "title": "Radio Button, Meet JQuery and be dominated!", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Let JQuery determine which radio button has been selected", 
      "source": "", 
      "user": 2, 
      "active": true, 
      "date_created": "2010-09-29 14:42:57", 
       
      "tags": "forms javascript"
    }
  }, 
  {
    "pk": 243, 
    "model": "blog.article", 
    "fields": {
      "body": "<iframe src=\"http://docs.google.com/present/embed?id=dcsq834g_58hp4kx2gx&size=m\" frameborder=\"0\" width=\"555\" height=\"451\"></iframe>", 
      "date_published": "2009-08-18 08:37:34", 
      "image_path": null, 
      "title_slug": "release-it-stability-review", 
      "rendered_body": "<iframe src=\"http://docs.google.com/present/embed?id=dcsq834g_58hp4kx2gx&size=m\" frameborder=\"0\" width=\"555\" height=\"451\"></iframe>", 
      "date_updated": "2010-05-04 12:21:58", 
      "demo": null, 
      "markup": "h", 
      "title": "Release It! Stability Review", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I recently read Release It! by Michael Nygard.  I became interested in this book when the NFJS 2008 panel cited it as their #1 suggested read.  In my view, the essence of Nygard's expose boils down to two points: \r\n\r\n1. One can build software that passes QA with flying colors and still fails miserably in real environments.\r\n2. Problem in production are unavoidable. Good software will be able to navigate them as gracefully as possible.\r\n\r\nThat said, the book was mostly conceptual, offering real-world examples of how antipatterns in software development made problems that were encountered even worse.  Then, he counters with patterns in stability, capacity, general design, and operations.  The principles discussed are those that most developers have at least some exposure to, but those that we don't necessarily consider every day.  These consist mostly of non-functional requirements that do not often enjoy QA scrutiny.  The set of antipatterns and patterns is one that I think all developers, QA, and project managers would do well to consider within the scope of their current and future projects.\r\n\r\nOverall, it was a thoughtful book.  I particularly enjoyed the sections on capactiy and stability that seemed more immediately applicable to my everday life in code.  I found the operations section to be the driest, but giving me opportunity to consider the plight of sys admins.  I would agree with the NFJS panel and highly recommend the read.\r\n\r\nI have included a short slide deck on the stability section with some highlights on what one might consider and what is explained in much clearer detail in the book.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-08-18 08:42:34", 
       
      "tags": "functional-testing requirements"
    }
  }, 
  {
    "pk": 248, 
    "model": "blog.article", 
    "fields": {
      "body": "In Linux, this change is much, much easier than the corresponding procedure on a Windows machine, there consisting of registry hacks.  But, on Ubuntu, it's even easier.  There's actually a GUI dialog to accomplish just the thing:\r\n\r\nCheck out:\r\nSystem->Preferences->Keyboard->Layouts->Layout Options->Ctrl key behavior\r\n\r\n<img src=\"http://lh5.ggpht.com/_5XZCKcD6--c/SpU8MJd7aAI/AAAAAAAAISY/-TbYr10RY80/s800/keyboard-preferences.png\" />\r\n\r\n<img src=\"http://lh3.ggpht.com/_5XZCKcD6--c/SpU8L_C2obI/AAAAAAAAISU/4jXwduIfBoQ/s800/keyboard-layout-options.png\" />\r\n\r\nSo, not only do you have ready-made options to switch caps lock and ctrl, but you can duplicate ctrl onto caps lock, etc.  Sweetness!", 
      "date_published": "2009-08-26 07:39:39", 
      "image_path": null, 
      "title_slug": "remapping-ctrl-key-ubuntu", 
      "rendered_body": "In Linux, this change is much, much easier than the corresponding procedure on a Windows machine, there consisting of registry hacks.  But, on Ubuntu, it's even easier.  There's actually a GUI dialog to accomplish just the thing:\r\n\r\nCheck out:\r\nSystem->Preferences->Keyboard->Layouts->Layout Options->Ctrl key behavior\r\n\r\n<img src=\"http://lh5.ggpht.com/_5XZCKcD6--c/SpU8MJd7aAI/AAAAAAAAISY/-TbYr10RY80/s800/keyboard-preferences.png\" />\r\n\r\n<img src=\"http://lh3.ggpht.com/_5XZCKcD6--c/SpU8L_C2obI/AAAAAAAAISU/4jXwduIfBoQ/s800/keyboard-layout-options.png\" />\r\n\r\nSo, not only do you have ready-made options to switch caps lock and ctrl, but you can duplicate ctrl onto caps lock, etc.  Sweetness!", 
      "date_updated": "2010-05-04 12:22:33", 
      "demo": null, 
      "markup": "h", 
      "title": "Remapping Ctrl Key in Ubuntu", 
      "source_path": null, 
      "collection": 1, 
      "summary": "On a Sun keyboard, the ctrl key is actually in the space that the caps lock key occupies on a standard qwerty keyboard nowadays.  In a program where the ctrl key is often used, this positioning can be helpful as no Vulcan figure stretches are required for common key patterns.  So, why not change caps lock to be a control key.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-08-26 07:46:02", 
       
      "tags": "customization linux ubuntu"
    }
  }, 
  {
    "pk": 260, 
    "model": "blog.article", 
    "fields": {
      "body": "I'm no regex guru, so I split this into 4 separate pieces:\r\n\r\n<code class=\"javascript\">\r\n// remove newline / carriage return\r\nstr.replace(/\\n/g, \"\");\r\n\r\n// remove whitespace (space and tabs) before tags\r\nstr.replace(/[\\t ]+\\</g, \"<\");\r\n\r\n// remove whitespace between tags\r\nstr.replace(/\\>[\\t ]+\\</g, \"><\");\r\n\r\n// remove whitespace after tags\r\nstr.replace(/\\>[\\t ]+$/g, \">\");\r\n</code>\r\n\r\nReturn the replacement string and set it to the value you want to save.  I wanted to use jQuery, so here's the final product:\r\n\r\n<code class=\"javascript\">\r\n$(\"#copy-txt\").val(\r\n  $(\"#nn-results\").html().replace(/\\n/g, \"\")\r\n    .replace(/[\\t ]+\\</g, \"<\")\r\n    .replace(/\\>[\\t ]+\\</g, \"><\")\r\n    .replace(/\\>[\\t ]+$/g, \">\")\r\n);\r\n</code>\r\n\r\nI have a containing div with the id \"nn-results\", grab it's inner html, do the replacements on that html, and then set the id=\"copy-txt\" input element value to be the results.  I have seen some posts where people tried to make all that replacement happen in one regex, but I wasn't good enough with the regex/js combo to make it work.  If someone is ready to go pro, and it isn't easy, please comment below.", 
      "date_published": "2009-09-15 10:27:59", 
      "image_path": null, 
      "title_slug": "remove-whitespace-html-javascript", 
      "rendered_body": "I'm no regex guru, so I split this into 4 separate pieces:\r\n\r\n<code class=\"javascript\">\r\n// remove newline / carriage return\r\nstr.replace(/\\n/g, \"\");\r\n\r\n// remove whitespace (space and tabs) before tags\r\nstr.replace(/[\\t ]+\\</g, \"<\");\r\n\r\n// remove whitespace between tags\r\nstr.replace(/\\>[\\t ]+\\</g, \"><\");\r\n\r\n// remove whitespace after tags\r\nstr.replace(/\\>[\\t ]+$/g, \">\");\r\n</code>\r\n\r\nReturn the replacement string and set it to the value you want to save.  I wanted to use jQuery, so here's the final product:\r\n\r\n<code class=\"javascript\">\r\n$(\"#copy-txt\").val(\r\n  $(\"#nn-results\").html().replace(/\\n/g, \"\")\r\n    .replace(/[\\t ]+\\</g, \"<\")\r\n    .replace(/\\>[\\t ]+\\</g, \"><\")\r\n    .replace(/\\>[\\t ]+$/g, \">\")\r\n);\r\n</code>\r\n\r\nI have a containing div with the id \"nn-results\", grab it's inner html, do the replacements on that html, and then set the id=\"copy-txt\" input element value to be the results.  I have seen some posts where people tried to make all that replacement happen in one regex, but I wasn't good enough with the regex/js combo to make it work.  If someone is ready to go pro, and it isn't easy, please comment below.", 
      "date_updated": "2010-05-04 12:24:46", 
      "demo": null, 
      "markup": "h", 
      "title": "Remove Whitespace in Html with Javascript", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Lots of websites give you the ability to copy certain pieces of text/code/something off their website in a \"copy to clipboard\"-type functionality.  In the process of creating just such a function on a little page I was making, I wanted to make the html that was copied very tight and compact.  The most annoying things were the whitespace and the newlines.  Here's some javascript to strip out the whitespace between xml/html tags.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-15 10:28:35", 
       
      "tags": "html javascript"
    }
  }, 
  {
    "pk": 313, 
    "model": "blog.article", 
    "fields": {
      "body": "We use CruiseControl.NET to gather statistics of our WatiN/NUnit tests.  We had some custom XSL inserted into the default tests.xsl to add additional statistics to the NUnit Details page on CruiseControl.NET.\r\n\r\nAfter upgrading to the latest version of CruiseControl.NET (1.4.4.83), and then inserting the custom xsl back in, I could not expand the details to view the test results.  I kept getting an error that \"eDiv is null\".  After troubleshooting it, I found that each ID had a line feed that prevented the toggleDiv javascript function to get each element specifically by ID.  In other words, the line feed got in the way and the details wouldn't expand.\r\n\r\nSo, I inserted:\r\n<code class=\"java\">\r\n<xsl:template match=\"/text\"><xsl:value-of select='normalize-space()'/></xsl:template>\r\n</code>\r\nat the top of the page and it did the trick.  That was more convenient than putting it in more than 5 locations.", 
      "date_published": "2010-05-17 07:21:18", 
      "image_path": "", 
      "title_slug": "removing-line-feeds-xsl", 
      "rendered_body": "We use CruiseControl.NET to gather statistics of our WatiN/NUnit tests.  We had some custom XSL inserted into the default tests.xsl to add additional statistics to the NUnit Details page on CruiseControl.NET.\r\n\r\nAfter upgrading to the latest version of CruiseControl.NET (1.4.4.83), and then inserting the custom xsl back in, I could not expand the details to view the test results.  I kept getting an error that \"eDiv is null\".  After troubleshooting it, I found that each ID had a line feed that prevented the toggleDiv javascript function to get each element specifically by ID.  In other words, the line feed got in the way and the details wouldn't expand.\r\n\r\nSo, I inserted:\r\n<code class=\"java\">\r\n<xsl:template match=\"/text\"><xsl:value-of select='normalize-space()'/></xsl:template>\r\n</code>\r\nat the top of the page and it did the trick.  That was more convenient than putting it in more than 5 locations.", 
      "date_updated": "2010-05-17 07:24:14", 
      "demo": "", 
      "markup": "h", 
      "title": "Removing line feeds from xsl", 
      "source_path": null, 
      "collection": 1, 
      "summary": "After upgrading to the latest version of CruiseControl.NET (1.4.4.83), and then inserting the custom xsl back in, I could not expand the details to view the test results.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-05-17 07:23:17", 
       
      "tags": "cruisecontrol.net xsl"
    }
  }, 
  {
    "pk": 159, 
    "model": "blog.article", 
    "fields": {
      "body": "Set the height attribute to 0, set overflow to hidden, and set the padding-top to the height of the image.  In an example of my code, this is how it looks:\r\n\r\n<code class=\"css\">\r\n<style type=\"text/css\">\r\n.title {\r\n   height: 0px;\r\n   overflow: hidden;\r\n   padding-top: 150px;\r\n   width: 400px;\r\n   background: center no-repeat url(title.jpg);\r\n}\r\n</style>\r\n</code>\r\n\r\n<code class=\"html\">\r\n<h1 class=\"title\">\r\n   AprilandJake.com\r\n</h1>\r\n</code>", 
      "date_published": "2009-02-28 16:05:49", 
      "image_path": null, 
      "title_slug": "replace-text-css-defined-image", 
      "rendered_body": "Set the height attribute to 0, set overflow to hidden, and set the padding-top to the height of the image.  In an example of my code, this is how it looks:\r\n\r\n<code class=\"css\">\r\n<style type=\"text/css\">\r\n.title {\r\n   height: 0px;\r\n   overflow: hidden;\r\n   padding-top: 150px;\r\n   width: 400px;\r\n   background: center no-repeat url(title.jpg);\r\n}\r\n</style>\r\n</code>\r\n\r\n<code class=\"html\">\r\n<h1 class=\"title\">\r\n   AprilandJake.com\r\n</h1>\r\n</code>", 
      "date_updated": "2010-05-04 12:24:46", 
      "demo": null, 
      "markup": "h", 
      "title": "Replace Text With Css-Defined Image", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Sometimes bland text on a webpage needs a little spicing up with an image.  Instead of having to mess with markup, this text can be replaced with an image.  Plus, the remaining text in the markup allows for better screen-reader access.  There is a fair amount of discussion on the best way to do this.  One of the ways that I've found works pretty well for me is what is known as the <a href=\"http://stopdesign.com/archive/2003/03/07/replace-text.html#notes\">Leahy/Langridge Image Replacement (LIR)</a>", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-02-28 16:12:47", 
       
      "tags": "css images"
    }
  }, 
  {
    "pk": 347, 
    "model": "blog.article", 
    "fields": {
      "body": "I was using the console runner for NUnit, but you could apply the same fix to the NUnit gui.  Find the related NUnit configuration file in your NUnit directory.  For the nunit-console runner, it is the nunit-console.exe.config file located in C: > Program Files > NUnit 2.5.5 > bin > net-2.0.  Edit this file.\r\n\r\nUnder the <configuration> node, put:\r\n\r\n .. code-block :: xml\r\n\r\n  <startup>\r\n    <requiredRuntime version=\"v4.0.20506\" />\r\n  </startup>\r\n\r\nUnder the <runtime> node, put:\r\n\r\n .. code-block :: xml\r\n\r\n  <loadFromRemoteSources enabled=\"true\" />\r\n\r\n\r\n\r\nNow, when I load the tests using NUnit, it runs like a charm!\r\nThanks to http://www.cookcomputing.com/blog/archives/000597.html for the solution.", 
      "date_published": "2010-10-15 08:33:47", 
      "image_path": "", 
      "title_slug": "running-nunit-tests-net-40", 
      "rendered_body": "<p>I was using the console runner for NUnit, but you could apply the same fix to the NUnit gui.  Find the related NUnit configuration file in your NUnit directory.  For the nunit-console runner, it is the nunit-console.exe.config file located in C: &gt; Program Files &gt; NUnit 2.5.5 &gt; bin &gt; net-2.0.  Edit this file.</p>\n<p>Under the &lt;configuration&gt; node, put:</p>\n<blockquote>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;startup&gt;</span>\n  <span class=\"nt\">&lt;requiredRuntime</span> <span class=\"na\">version=</span><span class=\"s\">&quot;v4.0.20506&quot;</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/startup&gt;</span>\n</pre></div>\n</div></blockquote>\n<p>Under the &lt;runtime&gt; node, put:</p>\n<blockquote>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;loadFromRemoteSources</span> <span class=\"na\">enabled=</span><span class=\"s\">&quot;true&quot;</span> <span class=\"nt\">/&gt;</span>\n</pre></div>\n</div></blockquote>\n<p>Now, when I load the tests using NUnit, it runs like a charm!\nThanks to <a class=\"reference external\" href=\"http://www.cookcomputing.com/blog/archives/000597.html\">http://www.cookcomputing.com/blog/archives/000597.html</a> for the solution.</p>\n", 
      "date_updated": "2010-10-15 08:52:32", 
      "demo": "", 
      "markup": "r", 
      "title": "Running NUnit tests on .NET 4.0", 
      "source_path": "", 
      "collection": 1, 
      "summary": "We've recently moved some of our tests from the .NET 3.5 framework to run against the .NET 4.0 framework.  I updated the Project target framework to be 4.0 as well.  However, I was getting this error: This assembly is built by a runtime newer than the currently loaded runtime and cannot be loaded.  After some research, it required a pretty easy fix.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-10-15 08:41:34", 
       
      "tags": ".net4 nunit"
    }
  }, 
  {
    "pk": 121, 
    "model": "blog.article", 
    "fields": {
      "body": "I haven't done php for a while, but at work our prototypes are in html/php.  So, I needed to get Apache webserver downloaded and working on my Linux box with php.  Here's how it all went down:\r\n\r\nInstall apache2 and the php handler:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install apache2 libapache2-mod-php5\r\n</code>\r\n\r\nFind the DocumentRoot:\r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/apache2/sites-available/default\r\n</code>\r\n\r\nMine defaulted to /var/www/.  I have a limited number of my projects on this box right now, so I decided to setup sym links to the project directories:\r\n\r\n<code class=\"bash\">\r\ncd /var/www/;  ln -s ~/dev/records-proto/ proto\r\n</code>\r\n\r\nNow I need to tell apache that I want my .html files treated as php files too (because that's how our designer did it).  I did a grep on 'AddType':\r\n\r\n<code class=\"bash\">\r\ncd /etc/apache2/; grep AddType * -r\r\n</code>\r\n\r\nThat turned up the file that you need to edit:\r\n<code class=\"bash\">\r\nsudo emacs mods-enabled/php.conf &\r\n</code>\r\n\r\nI made the php handler line look like this (added the .html on the end):\r\n<code class=\"xml\">\r\nAddType application/x-httpd-php .php .phtml .php3 .html\r\n</code>\r\n\r\nNow the server's going to need a restart:\r\n<code class=\"bash\">\r\nsudo /etc/init.d/apache2 restart\r\n</code>\r\n\r\nNow, I point my favorite web browser to this address (using the sym-link), and I'm good to go:\r\n<code class=\"bash\">\r\nfirefox http://localhost/proto &\r\n</code>\r\n\r\n", 
      "date_published": "2008-10-15 15:15:44", 
      "image_path": null, 
      "title_slug": "running-php-apache-linux", 
      "rendered_body": "I haven't done php for a while, but at work our prototypes are in html/php.  So, I needed to get Apache webserver downloaded and working on my Linux box with php.  Here's how it all went down:\r\n\r\nInstall apache2 and the php handler:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install apache2 libapache2-mod-php5\r\n</code>\r\n\r\nFind the DocumentRoot:\r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/apache2/sites-available/default\r\n</code>\r\n\r\nMine defaulted to /var/www/.  I have a limited number of my projects on this box right now, so I decided to setup sym links to the project directories:\r\n\r\n<code class=\"bash\">\r\ncd /var/www/;  ln -s ~/dev/records-proto/ proto\r\n</code>\r\n\r\nNow I need to tell apache that I want my .html files treated as php files too (because that's how our designer did it).  I did a grep on 'AddType':\r\n\r\n<code class=\"bash\">\r\ncd /etc/apache2/; grep AddType * -r\r\n</code>\r\n\r\nThat turned up the file that you need to edit:\r\n<code class=\"bash\">\r\nsudo emacs mods-enabled/php.conf &\r\n</code>\r\n\r\nI made the php handler line look like this (added the .html on the end):\r\n<code class=\"xml\">\r\nAddType application/x-httpd-php .php .phtml .php3 .html\r\n</code>\r\n\r\nNow the server's going to need a restart:\r\n<code class=\"bash\">\r\nsudo /etc/init.d/apache2 restart\r\n</code>\r\n\r\nNow, I point my favorite web browser to this address (using the sym-link), and I'm good to go:\r\n<code class=\"bash\">\r\nfirefox http://localhost/proto &\r\n</code>\r\n\r\n", 
      "date_updated": "2010-05-04 12:24:47", 
      "demo": null, 
      "markup": "h", 
      "title": "Running Php in Apache on Linux", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I haven't done php for a while, but at work our prototypes are in html/php.  So, I needed to get Apache webserver downloaded and working on my Linux box with php.  Here's how it all went down.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:17:16", 
       
      "tags": "apache linux php ubuntu"
    }
  }, 
  {
    "pk": 97, 
    "model": "blog.article", 
    "fields": {
      "body": "", 
      "date_published": "2008-08-25 14:46:16", 
      "image_path": null, 
      "title_slug": "seo-quiz", 
      "rendered_body": "", 
      "date_updated": "2010-05-04 12:24:47", 
      "demo": null, 
      "markup": "h", 
      "title": "SEO Quiz", 
      "source_path": null, 
      "collection": 1, 
      "summary": "It seems that I don't have much of a flair for SEO'ness.  I just code stuff that most people don't care to see anyway. :)\r\n\r\n<a href=\"http://www.seomoz.org/\" style=\"text-decoration: none; display: block; width: 241px; height: 108px; background: url(http://www.seomoz.org/css/images/quiz/badges/seo_quiz_badge_f.gif); border: solid 3px #EFEFEF; position: relative;\"><span style=\"display: none\">SEO Novice - </span><span style=\"position: absolute; top: 3px; right: 3px; color: #FFF; font-size: 18px; font-family: Georgia, serif; letter-spacing: -0.05em\">47%</span></a><p><a href=\"http://www.seomoz.org/seo-expert-quiz\">Are you an SEO Expert?</a></p>\r\n\r\nTry the quiz.  It's 75 questions, so have a few minutes.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 14:47:44", 
       
      "tags": "seo"
    }
  }, 
  {
    "pk": 124, 
    "model": "blog.article", 
    "fields": {
      "body": "One of the stinky things about having a VM is that is can be difficult to transfer files to and from the host machine.  You generally have everything that you need on the host machine and don't want to re-download stuff, burn CD's, or go through any of that jazz.  Sharing folders is probably the best option.\r\n\r\nFirst, start up your VirtualBox client.  I'm using 1.5.6_OSE.  Select your VM and then click the large \"Settings\" button.\r\n\r\n<img src=\"http://lh4.ggpht.com/_5XZCKcD6--c/SQ9oMOWw6AI/AAAAAAAAEjc/Ev3u68fKLPY/s800/settings.png\" />\r\n\r\nIn the dialog, select the \"Shared Folders\" section.  Then, on the far right, add a shared folder.  This is where you can select a directory on your host machine and name it.  In my case, I selected /home/jtsnake/shared and called it \"linux-shared\".\r\n\r\n<img src=\"http://lh3.ggpht.com/_5XZCKcD6--c/SQ9oMdDmegI/AAAAAAAAEjk/Qa1phVO-67U/s800/shared.png\" />\r\n\r\nNow, start up your VM.  In the lower right hand corner, you should see a blue folder.  When you hover above it, the tooltip should show you that the shared folder you just shared is working.\r\n\r\n<img src=\"http://lh5.ggpht.com/_5XZCKcD6--c/SQ9oM_IqTwI/AAAAAAAAEjs/VTrOslAZyuk/s800/status.png\" />\r\n\r\nNow, you have a couple of options.  From the VM side, you can mount a network drive, or from the host side you can mount a drive.  My host machine is Linux; my VM is Windows XP.  I chose to mount the Linux shared folder from the Windows/VM side.  So, I opened the command prompt and entered this command:\r\n\r\n<code class=\"bash\">\r\nnet use x: \\\\vboxsvr\\linux-shared\r\n</code>\r\n\r\nIf you wanted to mount from the Linux side, you could use this:\r\n\r\n<code class=\"bash\">\r\nmount -t vboxsf share mount_point\r\n</code>\r\n\r\nJust remember to substitute the name of the drive with whatever you called you shared folder.\r\n", 
      "date_published": "2008-11-03 15:19:12", 
      "image_path": null, 
      "title_slug": "sharing-folders-virtual-box", 
      "rendered_body": "One of the stinky things about having a VM is that is can be difficult to transfer files to and from the host machine.  You generally have everything that you need on the host machine and don't want to re-download stuff, burn CD's, or go through any of that jazz.  Sharing folders is probably the best option.\r\n\r\nFirst, start up your VirtualBox client.  I'm using 1.5.6_OSE.  Select your VM and then click the large \"Settings\" button.\r\n\r\n<img src=\"http://lh4.ggpht.com/_5XZCKcD6--c/SQ9oMOWw6AI/AAAAAAAAEjc/Ev3u68fKLPY/s800/settings.png\" />\r\n\r\nIn the dialog, select the \"Shared Folders\" section.  Then, on the far right, add a shared folder.  This is where you can select a directory on your host machine and name it.  In my case, I selected /home/jtsnake/shared and called it \"linux-shared\".\r\n\r\n<img src=\"http://lh3.ggpht.com/_5XZCKcD6--c/SQ9oMdDmegI/AAAAAAAAEjk/Qa1phVO-67U/s800/shared.png\" />\r\n\r\nNow, start up your VM.  In the lower right hand corner, you should see a blue folder.  When you hover above it, the tooltip should show you that the shared folder you just shared is working.\r\n\r\n<img src=\"http://lh5.ggpht.com/_5XZCKcD6--c/SQ9oM_IqTwI/AAAAAAAAEjs/VTrOslAZyuk/s800/status.png\" />\r\n\r\nNow, you have a couple of options.  From the VM side, you can mount a network drive, or from the host side you can mount a drive.  My host machine is Linux; my VM is Windows XP.  I chose to mount the Linux shared folder from the Windows/VM side.  So, I opened the command prompt and entered this command:\r\n\r\n<code class=\"bash\">\r\nnet use x: \\\\vboxsvr\\linux-shared\r\n</code>\r\n\r\nIf you wanted to mount from the Linux side, you could use this:\r\n\r\n<code class=\"bash\">\r\nmount -t vboxsf share mount_point\r\n</code>\r\n\r\nJust remember to substitute the name of the drive with whatever you called you shared folder.\r\n", 
      "date_updated": "2010-05-04 12:24:47", 
      "demo": null, 
      "markup": "h", 
      "title": "Sharing Folders in Virtual Box", 
      "source_path": null, 
      "collection": 1, 
      "summary": "One of the stinky things about having a VM is that is can be difficult to transfer files to and from the host machine.  You generally have everything that you need on the host machine and don't want to re-download stuff, burn CD's, or go through any of that jazz.  Sharing folders is probably the best option.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:19:58", 
       
      "tags": "virtualbox vm"
    }
  }, 
  {
    "pk": 182, 
    "model": "blog.article", 
    "fields": {
      "body": "<code class=\"sql\">\r\nalter session set nls_date_format = 'MM/DD/YYYY HH24:MI:SS';\r\n</code>\r\n\r\n", 
      "date_published": "2009-04-08 09:06:31", 
      "image_path": null, 
      "title_slug": "show-full-sql-developer-timestamp", 
      "rendered_body": "<code class=\"sql\">\r\nalter session set nls_date_format = 'MM/DD/YYYY HH24:MI:SS';\r\n</code>\r\n\r\n", 
      "date_updated": "2010-05-04 12:24:47", 
      "demo": null, 
      "markup": "h", 
      "title": "Show Full SQL Developer Timestamp", 
      "source_path": null, 
      "collection": 1, 
      "summary": "In Oracle's SQL Developer 1.5 tool, there seems to be a crazy bug where one can't see the full timestamp value (including time) by default.  You can change this by running this awesome piece of code...", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-04-08 09:07:55", 
       
      "tags": "sql sql-developer"
    }
  }, 
  {
    "pk": 392, 
    "model": "blog.article", 
    "fields": {
      "body": "I realized this the other night when I read `this tweet <http://twitter.com/#!/jennymesserly/status/107197662192865280>`_:\r\n\r\n\tI rarely hear developers compliment each other. It's usually negativity about how someone else \"did it wrong.\" #sad\r\n\t\r\nI agree with the sentiment.  I think it's too often true.  And that *is* sad.  \r\n\r\nSo why do we developers often lack in our compliments?  I'm sure the reasons are varied.  Here are some of my thoughts about the nature of software development, the people who develop it, and how these factors might contribute:\r\n\r\nSoftware is Hard to Write\r\n---------------------------------------------------\r\n\r\nNumber one, software is just generally hard to write.  Tons of it is produced daily, but a very small slice of the pie would probably be considered truly spectacular by anyone.  But if this is really true, that means that we very often kid ourselves into thinking that what we could do is any better.  (It would be us now trying to solve the same hard problem.)\r\n\r\nInfinitely Malleable Medium\r\n-------------------------------\r\n\r\nSoftware, because it's virtual and does not conform to many physical laws, can be bended and twisted into just about anything you can imagine.  There are so many ways to get from point A to point B.  And whatever the end goal is could be infinitely improved upon.  We only stop because we run out of time, money, or interest.  \r\n\r\nCode as Art\r\n--------------\r\n\r\nRelated to its malleability, creating software, in my mind, is absolutely an art form.  So much of a solution will be shaped by the person or people that create it -- their combined biases, tendencies, heuristics, and styles.  This is what makes software fun to write for the creative person -- you can put yourself into it.  Often it is probably the case that others don't appreciate some bit of code mostly based on its style, just as not everyone enjoys the same flavored food (even though it might give you the same energy and nutrients when you eat it) or just as not everyone likes the same paintings (even though they might depict the same landscape or portrait subject).\r\n\r\nWe're Too Protective\r\n-------------------------\r\n\r\nSoftware, because it is hard to write and because your own style is so embedded in the product, is often seen as some brain child of the creating developer.  And of course, which mother doesn't believe her baby the cutest?  We are often blinded by this instinct.\r\n\r\nInherent Complexity\r\n------------------------\r\n\r\nSoftware is often used to solve or make simpler many of the complex problems or questions that we face in just about any field.  Thus, related to software malleability and difficulty of development, software can balloon in complexity quite quickly.  Now, sometimes we as developers introduce a fair sum of our own accidental complexity, but of the problems software solves, there is a great potential for huge inherent complexity.\r\n\r\nAlternate Use\r\n-------------\r\n\r\nOften times sotware that is written for one purpose is put into applications never imagined when the software was originally conceived.  This can easily create situations where the software is not looking very elegant as a square pegged hammered into a round hole.\r\n\r\n(Out of) Timelines\r\n---------------------\r\n\r\nIt is all too often that software is developed under crazy, unrealistic timelines.  Unrealistic only if you want your hard problem solved correctly, in an elegant, maintainable, stable manner.  The reality that we often buy with our crazy timeline is code that barely works for the stated business case but code that needs rewritten or cannibalized as soon as the situation or people change.\r\n\r\nCave Dwellers\r\n-------------\r\n\r\nDevelopers that I've met are generally bright people that are doing their best to complete the challenging tasks they're given.  But we're usually not the most socially-enabled bunch.  We're often content grumbling and mumbling -- gollum! -- at our desks (or prone to breaking out into song, depending on who you are).  I don't think this defines us as a species (Developus Sapiens), but our constant machine interaction, I think, tends to wear on our interpersonal skills.  We might tend toward more passive-aggressive behavior, or just lack in much communication at all.  Another reason for lack of inter-developer compliments?  Most of us are men -- notoriously competitive.  And since we've now programmed farm machinery to allow many to do something besides hunting and gathering, we need another field of competition.\r\n\r\nThank You\r\n-----------------\r\n\r\nThere are many bright exceptions to these aforementioned observations of software that pains our eyes, fingers, and psyches and exceptions to our less-desirable developer attributes.  \r\n\r\nThank you to the developer that takes complexity and truly innovates, creating the simplest possible solution.\r\n\r\nThank you to the language creators who make languages that expressive, fluid, and guide us toward elegant techniques.\r\n\r\nThank you to the developers that push back aginst horrendous timelines and avoid false heroism.\r\n\r\nThank you to the patient customers and project managers who realize that good software is a gem that is rare and polished over time.\r\n\r\nThank you to the developers that refactor smelly code when they see it.\r\n\r\nThank you to the customers that have paid me even though my code was probably not \"done right\" at times.\r\n\r\nThank you to the team lead who is willing to try new things or better ways while still learning from his experiences.\r\n\r\nThank you to the corporate management that hires creative people and lets them do creative work without standardizing them into cookie-cutter solutions.\r\n\r\nThank you to the mentor developer who patiently explains to another how code works and why he chose to make it that way.\r\n\r\nThank you to the marketing developer who is willing to stand up in front of his peers and explain why he feels certain software choices are the best.\r\n\r\nThank you to the developer that, while he might create inelegant code, crafts good test suites around it to ensure I don't break it.\r\n\r\nThe Bottom Line\r\n-------------------\r\n\r\nThere really is no such thing as perfect developers or perfect software.  Neither exist.  We're all developing in our capacities across a spectrum -- one that evolves at a rapid pace.  One where the definition of \"good\" and \"right\" code is changing constantly.  One where the bar is constantly being raised.  We're in an exciting field.  The jobs are many.  The problems are interesting.  The technology is just getting more amazing all the time.  \r\n\r\nLet's help each other out along the way.  If it is hard to make software that is sometimes brain-drainingly complex and we live in plain, gray caves, then I'm sure we all need a good word now and then.", 
      "date_published": "2011-08-27 13:40:17", 
      "image_path": "", 
      "title_slug": "software-dev-hard-dont-be-negative-about-it", 
      "rendered_body": "<p>I realized this the other night when I read <a class=\"reference external\" href=\"http://twitter.com/#!/jennymesserly/status/107197662192865280\">this tweet</a>:</p>\n<blockquote>\nI rarely hear developers compliment each other. It's usually negativity about how someone else &quot;did it wrong.&quot; #sad</blockquote>\n<p>I agree with the sentiment.  I think it's too often true.  And that <em>is</em> sad.</p>\n<p>So why do we developers often lack in our compliments?  I'm sure the reasons are varied.  Here are some of my thoughts about the nature of software development, the people who develop it, and how these factors might contribute:</p>\n<div class=\"section\" id=\"software-is-hard-to-write\">\n<h1>Software is Hard to Write</h1>\n<p>Number one, software is just generally hard to write.  Tons of it is produced daily, but a very small slice of the pie would probably be considered truly spectacular by anyone.  But if this is really true, that means that we very often kid ourselves into thinking that what we could do is any better.  (It would be us now trying to solve the same hard problem.)</p>\n</div>\n<div class=\"section\" id=\"infinitely-malleable-medium\">\n<h1>Infinitely Malleable Medium</h1>\n<p>Software, because it's virtual and does not conform to many physical laws, can be bended and twisted into just about anything you can imagine.  There are so many ways to get from point A to point B.  And whatever the end goal is could be infinitely improved upon.  We only stop because we run out of time, money, or interest.</p>\n</div>\n<div class=\"section\" id=\"code-as-art\">\n<h1>Code as Art</h1>\n<p>Related to its malleability, creating software, in my mind, is absolutely an art form.  So much of a solution will be shaped by the person or people that create it -- their combined biases, tendencies, heuristics, and styles.  This is what makes software fun to write for the creative person -- you can put yourself into it.  Often it is probably the case that others don't appreciate some bit of code mostly based on its style, just as not everyone enjoys the same flavored food (even though it might give you the same energy and nutrients when you eat it) or just as not everyone likes the same paintings (even though they might depict the same landscape or portrait subject).</p>\n</div>\n<div class=\"section\" id=\"we-re-too-protective\">\n<h1>We're Too Protective</h1>\n<p>Software, because it is hard to write and because your own style is so embedded in the product, is often seen as some brain child of the creating developer.  And of course, which mother doesn't believe her baby the cutest?  We are often blinded by this instinct.</p>\n</div>\n<div class=\"section\" id=\"inherent-complexity\">\n<h1>Inherent Complexity</h1>\n<p>Software is often used to solve or make simpler many of the complex problems or questions that we face in just about any field.  Thus, related to software malleability and difficulty of development, software can balloon in complexity quite quickly.  Now, sometimes we as developers introduce a fair sum of our own accidental complexity, but of the problems software solves, there is a great potential for huge inherent complexity.</p>\n</div>\n<div class=\"section\" id=\"alternate-use\">\n<h1>Alternate Use</h1>\n<p>Often times sotware that is written for one purpose is put into applications never imagined when the software was originally conceived.  This can easily create situations where the software is not looking very elegant as a square pegged hammered into a round hole.</p>\n</div>\n<div class=\"section\" id=\"out-of-timelines\">\n<h1>(Out of) Timelines</h1>\n<p>It is all too often that software is developed under crazy, unrealistic timelines.  Unrealistic only if you want your hard problem solved correctly, in an elegant, maintainable, stable manner.  The reality that we often buy with our crazy timeline is code that barely works for the stated business case but code that needs rewritten or cannibalized as soon as the situation or people change.</p>\n</div>\n<div class=\"section\" id=\"cave-dwellers\">\n<h1>Cave Dwellers</h1>\n<p>Developers that I've met are generally bright people that are doing their best to complete the challenging tasks they're given.  But we're usually not the most socially-enabled bunch.  We're often content grumbling and mumbling -- gollum! -- at our desks (or prone to breaking out into song, depending on who you are).  I don't think this defines us as a species (Developus Sapiens), but our constant machine interaction, I think, tends to wear on our interpersonal skills.  We might tend toward more passive-aggressive behavior, or just lack in much communication at all.  Another reason for lack of inter-developer compliments?  Most of us are men -- notoriously competitive.  And since we've now programmed farm machinery to allow many to do something besides hunting and gathering, we need another field of competition.</p>\n</div>\n<div class=\"section\" id=\"thank-you\">\n<h1>Thank You</h1>\n<p>There are many bright exceptions to these aforementioned observations of software that pains our eyes, fingers, and psyches and exceptions to our less-desirable developer attributes.</p>\n<p>Thank you to the developer that takes complexity and truly innovates, creating the simplest possible solution.</p>\n<p>Thank you to the language creators who make languages that expressive, fluid, and guide us toward elegant techniques.</p>\n<p>Thank you to the developers that push back aginst horrendous timelines and avoid false heroism.</p>\n<p>Thank you to the patient customers and project managers who realize that good software is a gem that is rare and polished over time.</p>\n<p>Thank you to the developers that refactor smelly code when they see it.</p>\n<p>Thank you to the customers that have paid me even though my code was probably not &quot;done right&quot; at times.</p>\n<p>Thank you to the team lead who is willing to try new things or better ways while still learning from his experiences.</p>\n<p>Thank you to the corporate management that hires creative people and lets them do creative work without standardizing them into cookie-cutter solutions.</p>\n<p>Thank you to the mentor developer who patiently explains to another how code works and why he chose to make it that way.</p>\n<p>Thank you to the marketing developer who is willing to stand up in front of his peers and explain why he feels certain software choices are the best.</p>\n<p>Thank you to the developer that, while he might create inelegant code, crafts good test suites around it to ensure I don't break it.</p>\n</div>\n<div class=\"section\" id=\"the-bottom-line\">\n<h1>The Bottom Line</h1>\n<p>There really is no such thing as perfect developers or perfect software.  Neither exist.  We're all developing in our capacities across a spectrum -- one that evolves at a rapid pace.  One where the definition of &quot;good&quot; and &quot;right&quot; code is changing constantly.  One where the bar is constantly being raised.  We're in an exciting field.  The jobs are many.  The problems are interesting.  The technology is just getting more amazing all the time.</p>\n<p>Let's help each other out along the way.  If it is hard to make software that is sometimes brain-drainingly complex and we live in plain, gray caves, then I'm sure we all need a good word now and then.</p>\n</div>\n", 
      "date_updated": "2011-09-09 08:34:26", 
      "demo": "", 
      "markup": "r", 
      "title": "Software Dev is Hard -- Don't Be Negative About It", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Is negativism between developers the norm?  Probably not, but it's common.  Do developers ever compliment each other?  Yes, but it sometimes seems rare.  When I step back, it does in fact seem that there is sometimes a noticeable wealth of negativism and a noticeable lack of complimenting.  The nature of software and its developers may contribute.  But we can overcome our challenges.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-08-27 13:41:48", 
       
      "tags": "engineering project-management"
    }
  }, 
  {
    "pk": 390, 
    "model": "blog.article", 
    "fields": {
      "body": "1. Inject the JavaScript-XPath library onto the page.\r\n2. Use the JavaScript-XPath library to locate the element in JavaScript.\r\n3. Add a uniqueidentifier to the element through JavaScript.\r\n4. Use WatiN to attach to the element.\r\n5. Continue with actions as usual.\r\n\r\n\r\nFirst, inject the latest library from the website.  Main link to site is: http://coderepos.org/share/wiki/JavaScript-XPath.\r\n\r\n<code class=\"java\">\r\npublic static void InjectJavascriptXPath(Browser browser)\r\n        {\r\n            try\r\n            {\r\n                const string injectJavascriptXPath =\r\n                    @\"{var b=document.getElementsByTagName('body')[0]; \" +\r\n                    @\"var script=document.createElement('script'); script.src='http://svn.coderepos.org/share/lang/javascript/javascript-xpath/trunk/release/javascript-xpath-latest-cmp.js';\" +\r\n                    @\"var head=document.getElementsByTagName('head')[0],done=false;script.onload=script.onreadystatechange=function()\" +\r\n                    @\"{if(!done&&(!this.readyState||this.readyState=='loaded'||this.readyState=='complete')){done=true;\" +\r\n                    @\"script.onload=script.onreadystatechange=null;head.removeChild(script);}};head.appendChild(script);}\";\r\n\r\n                browser.RunScript(injectJavascriptXPath);\r\n            }\r\n            catch (Exception)\r\n            { }\r\n        }\r\n</code>\r\n\r\nSecond, use the library to locate the element.  Then, add a unique identifier to the element.\r\n\r\n<code class=\"java\">\r\nstring uniqueId = CreateUniqueId(date);\r\n            \r\nStringBuilder js = new StringBuilder();\r\njs.Append(@\"var result = document.evaluate('\" + xpath.Replace(\"'\", \"\\\"\") + \"', document, null, 7, null);\");\r\njs.Append(@\"var ele = result.snapshotItem(0);\");\r\njs.Append(@\"ele.setAttribute('id', '\" + uniqueId + \"');\");\r\n            \r\nbrowser.RunScript(js.ToString());\r\n\r\n</code>\r\n\r\nLastly, find the Element using WatiN.\r\n\r\n<code class=\"java\">\r\n\r\nElement element = browser.Element(Find.ById(uniqueId));\r\n element.Click()\r\n\r\n</code>\r\n\r\n\r\n\r\n\r\nProps to Anders for the idea.  W00t!\r\n", 
      "date_published": "2011-08-12 12:36:26", 
      "image_path": "", 
      "title_slug": "watin-and-xpath-support", 
      "rendered_body": "1. Inject the JavaScript-XPath library onto the page.\r\n2. Use the JavaScript-XPath library to locate the element in JavaScript.\r\n3. Add a uniqueidentifier to the element through JavaScript.\r\n4. Use WatiN to attach to the element.\r\n5. Continue with actions as usual.\r\n\r\n\r\nFirst, inject the latest library from the website.  Main link to site is: http://coderepos.org/share/wiki/JavaScript-XPath.\r\n\r\n<code class=\"java\">\r\npublic static void InjectJavascriptXPath(Browser browser)\r\n        {\r\n            try\r\n            {\r\n                const string injectJavascriptXPath =\r\n                    @\"{var b=document.getElementsByTagName('body')[0]; \" +\r\n                    @\"var script=document.createElement('script'); script.src='http://svn.coderepos.org/share/lang/javascript/javascript-xpath/trunk/release/javascript-xpath-latest-cmp.js';\" +\r\n                    @\"var head=document.getElementsByTagName('head')[0],done=false;script.onload=script.onreadystatechange=function()\" +\r\n                    @\"{if(!done&&(!this.readyState||this.readyState=='loaded'||this.readyState=='complete')){done=true;\" +\r\n                    @\"script.onload=script.onreadystatechange=null;head.removeChild(script);}};head.appendChild(script);}\";\r\n\r\n                browser.RunScript(injectJavascriptXPath);\r\n            }\r\n            catch (Exception)\r\n            { }\r\n        }\r\n</code>\r\n\r\nSecond, use the library to locate the element.  Then, add a unique identifier to the element.\r\n\r\n<code class=\"java\">\r\nstring uniqueId = CreateUniqueId(date);\r\n            \r\nStringBuilder js = new StringBuilder();\r\njs.Append(@\"var result = document.evaluate('\" + xpath.Replace(\"'\", \"\\\"\") + \"', document, null, 7, null);\");\r\njs.Append(@\"var ele = result.snapshotItem(0);\");\r\njs.Append(@\"ele.setAttribute('id', '\" + uniqueId + \"');\");\r\n            \r\nbrowser.RunScript(js.ToString());\r\n\r\n</code>\r\n\r\nLastly, find the Element using WatiN.\r\n\r\n<code class=\"java\">\r\n\r\nElement element = browser.Element(Find.ById(uniqueId));\r\n element.Click()\r\n\r\n</code>\r\n\r\n\r\n\r\n\r\nProps to Anders for the idea.  W00t!\r\n", 
      "date_updated": "2011-08-12 12:54:48", 
      "demo": "", 
      "markup": "h", 
      "title": "Solution to WatiN and XPath support", 
      "source_path": "", 
      "collection": 1, 
      "summary": "This is lacking.  It's been one of the few disappointments I've had with WatiN.  It does not handle XPath support out of the box.  I found several other posts out there on the same issue with work arounds but we found a pretty slick solution using JavaScript-XPath.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2011-08-12 12:44:24", 
       
      "tags": ""
    }
  }, 
  {
    "pk": 320, 
    "model": "blog.article", 
    "fields": {
      "body": "\r\n.. code-block:: java\r\n\r\n  //The ListOption object. Simple.\r\n\r\n  public class ListOption\r\n  {\r\n    public String category;\r\n    public String value;\r\n    public String option;\r\n\r\n    public ListOption(String category, String value, String option)\r\n    {\r\n      //set values here - removed\r\n    }\r\n\r\n    //others methods here\r\n  }\r\n\r\n\r\nUsing LINQ, I was able to sort the list quickly using the OrderBy function.  Since ListOption.option is the text displayed, this was the value I wanted to sort on.\r\n\r\n.. code-block:: java\r\n\r\n  //snippet from OptionList : IEnumerable<ListOption>\r\n\r\n  private IList<ListOption> optionList = new List<ListOption>();\r\n\r\n  public void Sort()\r\n  {\r\n      IEnumerable<ListOption> sortedEnum = optionList.OrderBy(f => f.option);\r\n      optionList = sortedEnum.ToList();\r\n  }\r\n", 
      "date_published": "2010-06-28 11:21:53", 
      "image_path": "", 
      "title_slug": "sorting-ilist-using-linq", 
      "rendered_body": "<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"c\">//The ListOption object. Simple.</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ListOption</span>\n<span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"n\">category</span><span class=\"o\">;</span>\n  <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n  <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"n\">option</span><span class=\"o\">;</span>\n\n  <span class=\"kd\">public</span> <span class=\"nf\">ListOption</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">category</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">option</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span>\n    <span class=\"c\">//set values here - removed</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"c\">//others methods here</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div><p>Using LINQ, I was able to sort the list quickly using the OrderBy function.  Since ListOption.option is the text displayed, this was the value I wanted to sort on.</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"c\">//snippet from OptionList : IEnumerable&lt;ListOption&gt;</span>\n\n<span class=\"kd\">private</span> <span class=\"n\">IList</span><span class=\"o\">&lt;</span><span class=\"n\">ListOption</span><span class=\"o\">&gt;</span> <span class=\"n\">optionList</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">ListOption</span><span class=\"o\">&gt;();</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">Sort</span><span class=\"o\">()</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">IEnumerable</span><span class=\"o\">&lt;</span><span class=\"n\">ListOption</span><span class=\"o\">&gt;</span> <span class=\"n\">sortedEnum</span> <span class=\"o\">=</span> <span class=\"n\">optionList</span><span class=\"o\">.</span><span class=\"na\">OrderBy</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"na\">option</span><span class=\"o\">);</span>\n    <span class=\"n\">optionList</span> <span class=\"o\">=</span> <span class=\"n\">sortedEnum</span><span class=\"o\">.</span><span class=\"na\">ToList</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>", 
      "date_updated": "2010-06-28 11:39:12", 
      "demo": "", 
      "markup": "r", 
      "title": "Sorting an IList using LINQ", 
      "source_path": null, 
      "collection": 1, 
      "summary": "We have a custom object called ListOption in our code.  It holds category, value and option and fairly represents the basics of a single SelectList item.  To hold the ListOption values, the primary developer stored this List as and IList instead of an ArrayList or any other concrete type.  OptionList extends IEnumerable<ListOption>.\r\n\r\nHere is how I sorted the IList.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-06-28 11:29:11", 
       
      "tags": "csharp linq sort"
    }
  }, 
  {
    "pk": 318, 
    "model": "blog.article", 
    "fields": {
      "body": "First, you can specify the Category on the TestFixture or on the Test itself.  Examples:\r\n\r\n<code class=\"java\">\r\n[TestFixture]\r\n[Category(\"LongRunning\")]\r\n[Description(\"These are the long running tests of the application\")]\r\npublic void CreatePaymentsTests\r\n{\r\n\r\n        [Test, Category(\"Smoke\"), Description(\"A one-time payment\")]\r\n        public void verifyCreatePayment()\r\n        {\r\n               //test contents\r\n        }\r\n\r\n}\r\n</code>\r\n\r\n\r\nIn this case, when running NUnit from the Gui - you could select the Categories tab and both categories will be shown to you.  If you select the LongRunning category, it will run all the tests in the TestFixture.  If you select the Smoke category, it will only run the 1 test.\r\n\r\nHowever, what if you have a Level 3 test case (not a high priority feature) but you want to run with the Smoke tests category, just to make sure the build is working correctly.  This is how you do it.\r\n\r\n<code class=\"java\">\r\n\r\n        [Test, Category(\"Smoke\"), Category(\"L3\"), Description(\"A one-time payment\")]\r\n        public void verifyCreatePayment()\r\n        {\r\n               //test contents\r\n        }\r\n\r\n</code>\r\n\r\nNow this test will be picked up by either choosing LongRunning, Smoke, or L3.  If more than one of those categories are chosen, the test will still only run 1 time.  Just adds a bit of flexibility when running the suite.  \r\n\r\nIt would be nice to have the parameter on the CategoryAttribute be a var args or something, but as of version 2.5.5, that doesn't be the case.", 
      "date_published": "2010-06-16 07:35:42", 
      "image_path": "", 
      "title_slug": "specifying-multiple-categories-nunit", 
      "rendered_body": "First, you can specify the Category on the TestFixture or on the Test itself.  Examples:\r\n\r\n<code class=\"java\">\r\n[TestFixture]\r\n[Category(\"LongRunning\")]\r\n[Description(\"These are the long running tests of the application\")]\r\npublic void CreatePaymentsTests\r\n{\r\n\r\n        [Test, Category(\"Smoke\"), Description(\"A one-time payment\")]\r\n        public void verifyCreatePayment()\r\n        {\r\n               //test contents\r\n        }\r\n\r\n}\r\n</code>\r\n\r\n\r\nIn this case, when running NUnit from the Gui - you could select the Categories tab and both categories will be shown to you.  If you select the LongRunning category, it will run all the tests in the TestFixture.  If you select the Smoke category, it will only run the 1 test.\r\n\r\nHowever, what if you have a Level 3 test case (not a high priority feature) but you want to run with the Smoke tests category, just to make sure the build is working correctly.  This is how you do it.\r\n\r\n<code class=\"java\">\r\n\r\n        [Test, Category(\"Smoke\"), Category(\"L3\"), Description(\"A one-time payment\")]\r\n        public void verifyCreatePayment()\r\n        {\r\n               //test contents\r\n        }\r\n\r\n</code>\r\n\r\nNow this test will be picked up by either choosing LongRunning, Smoke, or L3.  If more than one of those categories are chosen, the test will still only run 1 time.  Just adds a bit of flexibility when running the suite.  \r\n\r\nIt would be nice to have the parameter on the CategoryAttribute be a var args or something, but as of version 2.5.5, that doesn't be the case.", 
      "date_updated": "2010-06-16 07:44:50", 
      "demo": "", 
      "markup": "h", 
      "title": "Specifying multiple categories in nUnit", 
      "source_path": null, 
      "collection": 1, 
      "summary": "The CategoryAttribute can be used to specify additional groupings of test cases that you want to run at the same time.  For example, we have our test cases split up into level of priorities (Level 1, Level 2, Level 3).  Here's how you can do it:", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-06-16 07:44:50", 
       
      "tags": "categories csharp nunit unittest"
    }
  }, 
  {
    "pk": 249, 
    "model": "blog.article", 
    "fields": {
      "body": "If I had text like this:\r\n\r\n<code class=\"text\">\r\n1. The Morning Breaks\r\n2. The Spirit of God\r\n3. Now Let Us Rejoice\r\n4. Truth Eternal\r\n5. High On A Mountain Top\r\n</code>\r\n\r\nI would paste it into one column in the spreadsheet, select that column, and select Date -> Text to Columns...  In that dialog, you can select what you want to use as your delimiter.  I my case, I chose the period (\".\").  That way, the hymn # ends up in column 1, the hymn title in column 2.  The same feature is available in MS Excel.\r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/FUo5j2r8EbPsCGwvHQQgGA?feat=embedwebsite\"><img src=\"http://lh3.ggpht.com/_5XZCKcD6--c/Spbuc8alHvI/AAAAAAAAISg/SrQ9iopLEx4/s400/texttocolumn.png\" /></a>", 
      "date_published": "2009-08-27 14:31:25", 
      "image_path": "", 
      "title_slug": "split-text-open-office-spreadsheet", 
      "rendered_body": "If I had text like this:\r\n\r\n<code class=\"text\">\r\n1. The Morning Breaks\r\n2. The Spirit of God\r\n3. Now Let Us Rejoice\r\n4. Truth Eternal\r\n5. High On A Mountain Top\r\n</code>\r\n\r\nI would paste it into one column in the spreadsheet, select that column, and select Date -> Text to Columns...  In that dialog, you can select what you want to use as your delimiter.  I my case, I chose the period (\".\").  That way, the hymn # ends up in column 1, the hymn title in column 2.  The same feature is available in MS Excel.\r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/FUo5j2r8EbPsCGwvHQQgGA?feat=embedwebsite\"><img src=\"http://lh3.ggpht.com/_5XZCKcD6--c/Spbuc8alHvI/AAAAAAAAISg/SrQ9iopLEx4/s400/texttocolumn.png\" /></a>", 
      "date_updated": "2010-05-07 08:22:27", 
      "demo": "", 
      "markup": "h", 
      "title": "Split Text in Open Office Spreadsheet", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Sometimes I paste text into a spreadsheet so that I can quickly manipulate it.  The same could be done with a small script, but this particular feature is built into Open Office Spreadsheet: You can split text into separate columns using delimiters.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-08-27 14:36:40", 
       
      "tags": "open-office"
    }
  }, 
  {
    "pk": 101, 
    "model": "blog.article", 
    "fields": {
      "body": "Since my work recently relieved us of our Toad licenses, I've gotten to know and love SQL Developer.  I used it back in the day of pre-version 1.0 Raptor days, but have recently picked it back up of necessity.  I like it for the most part and use it with pleasure for the most part.\r\n\r\nI just recently installed Ubuntu 8 on my machine, and threw down this bad boy of a SQL console.  I downloaded the tar file for <a href=\"http://www.oracle.com/technology/software/products/sql/index_archive15.html\">SQL Developer 1.5</a>.  \r\n\r\nAfter downloading, unpack the tar\r\n\r\n<code class=\"bash\">\r\ntar xvf sqldeveloper1.5.tar\r\n</code>\r\n\r\nI copied the directory into /usr/lib:\r\n\r\n<code class=\"bash\">\r\ncp sqldeveloper1.5/ /usr/lib/sqldeveloper1.5\r\n</code>\r\n\r\nand then added it to the path:\r\n\r\n<code class=\"bash\">\r\nemacs /etc/environment\r\nPATH=\"[other stuff]:/usr/lib/sqldeveloper1.5\"\r\n</code>\r\n\r\nSave and reload env with:\r\n\r\n<code class=\"bash\">\r\nsource /etc/environment\r\n</code>\r\n\r\n(environment is loaded on session login, but this command will refresh it for the current terminal process)\r\n\r\nNow, run it from anywhere (it's in your path)\r\n\r\n<code class=\"bash\">\r\nsqldeveloper.sh\r\n</code>\r\n\r\n1.5 is still in beta, and there still are problems.  For one, the column tab for views shows nothing.  Pook!  Another annoying thing about SQL Developer in general is that you can't specify a default schema.  At work, we have developer login schemas, but I want to work within our app schema every time.  I wish I could just default to that schema as a per-connection configuration.  \r\n\r\nI do like the 1.5 version more than 1.2 if nothing, for no more than one changed feature: code complete matches case on the rest of my query (which is lowercase in my case), instead of always giving caps.  BTW, the code complete is very nice and responsive.\r\n\r\nIt was also very good to find a certain <a href=\"http://wiki.oracle.com/page/SQL+Developer+FAQ?t=anon\">FAQ</a> that helped me figure out where to put my tnsnames.ora file.  For Linux, it's:\r\n\r\n<code class=\"bash\">\r\n/etc/tnsnames.ora\r\n</code>\r\n\r\nAlso, be sure that tnsnames.ora is available to whatever user you're executing SQL Developer with.\r\n\r\n<code class=\"bash\">\r\nsudo chmod +r /etc/tnsnames.ora\r\n</code>\r\n\r\nHappy SQL'ing!", 
      "date_published": "2008-10-11 14:53:49", 
      "image_path": null, 
      "title_slug": "sql-developer-15-ubuntu-linux", 
      "rendered_body": "Since my work recently relieved us of our Toad licenses, I've gotten to know and love SQL Developer.  I used it back in the day of pre-version 1.0 Raptor days, but have recently picked it back up of necessity.  I like it for the most part and use it with pleasure for the most part.\r\n\r\nI just recently installed Ubuntu 8 on my machine, and threw down this bad boy of a SQL console.  I downloaded the tar file for <a href=\"http://www.oracle.com/technology/software/products/sql/index_archive15.html\">SQL Developer 1.5</a>.  \r\n\r\nAfter downloading, unpack the tar\r\n\r\n<code class=\"bash\">\r\ntar xvf sqldeveloper1.5.tar\r\n</code>\r\n\r\nI copied the directory into /usr/lib:\r\n\r\n<code class=\"bash\">\r\ncp sqldeveloper1.5/ /usr/lib/sqldeveloper1.5\r\n</code>\r\n\r\nand then added it to the path:\r\n\r\n<code class=\"bash\">\r\nemacs /etc/environment\r\nPATH=\"[other stuff]:/usr/lib/sqldeveloper1.5\"\r\n</code>\r\n\r\nSave and reload env with:\r\n\r\n<code class=\"bash\">\r\nsource /etc/environment\r\n</code>\r\n\r\n(environment is loaded on session login, but this command will refresh it for the current terminal process)\r\n\r\nNow, run it from anywhere (it's in your path)\r\n\r\n<code class=\"bash\">\r\nsqldeveloper.sh\r\n</code>\r\n\r\n1.5 is still in beta, and there still are problems.  For one, the column tab for views shows nothing.  Pook!  Another annoying thing about SQL Developer in general is that you can't specify a default schema.  At work, we have developer login schemas, but I want to work within our app schema every time.  I wish I could just default to that schema as a per-connection configuration.  \r\n\r\nI do like the 1.5 version more than 1.2 if nothing, for no more than one changed feature: code complete matches case on the rest of my query (which is lowercase in my case), instead of always giving caps.  BTW, the code complete is very nice and responsive.\r\n\r\nIt was also very good to find a certain <a href=\"http://wiki.oracle.com/page/SQL+Developer+FAQ?t=anon\">FAQ</a> that helped me figure out where to put my tnsnames.ora file.  For Linux, it's:\r\n\r\n<code class=\"bash\">\r\n/etc/tnsnames.ora\r\n</code>\r\n\r\nAlso, be sure that tnsnames.ora is available to whatever user you're executing SQL Developer with.\r\n\r\n<code class=\"bash\">\r\nsudo chmod +r /etc/tnsnames.ora\r\n</code>\r\n\r\nHappy SQL'ing!", 
      "date_updated": "2010-05-04 12:24:47", 
      "demo": null, 
      "markup": "h", 
      "title": "SQL Developer 1.5 on Ubuntu Linux", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Since my work recently relieved us of our Toad licenses, I've gotten to know and love SQL Developer.  I used it back in the day of pre-version 1.0 Raptor days, but have recently picked it back up of necessity.  I like it for the most part and use it with pleasure for the most part.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 14:54:33", 
       
      "tags": "linux sql-developer ubuntu"
    }
  }, 
  {
    "pk": 331, 
    "model": "blog.article", 
    "fields": {
      "body": "Using the jQuery javascript library, preventing this on the client side is actually pretty easy. First, make sure you have jQuery included in your app. Then, use this code:\r\n\r\n\r\n<code class=\"javascript\">\r\n$(\"form\").submit(function() {\r\n    $(\":submit\",this).attr(\"disabled\", \"disabled\");\r\n});\r\n</code>\r\nThis disables the submit button immediately after the first click, so the user cannot click it more than once.", 
      "date_published": "2010-08-02 12:44:28", 
      "image_path": "", 
      "title_slug": "stopping-dreaded-double-form-submission-jquery", 
      "rendered_body": "Using the jQuery javascript library, preventing this on the client side is actually pretty easy. First, make sure you have jQuery included in your app. Then, use this code:\r\n\r\n\r\n<code class=\"javascript\">\r\n$(\"form\").submit(function() {\r\n    $(\":submit\",this).attr(\"disabled\", \"disabled\");\r\n});\r\n</code>\r\nThis disables the submit button immediately after the first click, so the user cannot click it more than once.", 
      "date_updated": "2010-08-06 13:04:12", 
      "demo": "", 
      "markup": "h", 
      "title": "Stopping the dreaded double-form submission with jQuery", 
      "source_path": "", 
      "collection": 1, 
      "summary": "When developing forms, we web developers always have to guard against the dreaded double-form submit, when impatient (or even patient) users, depending on the latency of form submissions, hit the \u201csubmit\u201d or \u201center\u201d button multiple times, causing havoc to the application.", 
      "source": "", 
      "user": 6, 
      "active": true, 
      "date_created": "2010-08-02 12:45:37", 
       
      "tags": "jquery"
    }
  }, 
  {
    "pk": 327, 
    "model": "blog.article", 
    "fields": {
      "body": "One of the things I've had to work around are these hoity-toity designers who don't like to use typical \"submit\" buttons for form submissions when they're designing forms. They like to use anchor tags, presumably because they're more easily styleable. So, how does one submit a form without a submit button using jquery?\r\n\r\nHere's one way I've learned:\r\n\r\n<code class=\"javascript\">\r\n<form>\r\n  // Arbitrary code here\r\n  <a href=\"#\" onclick=\"$(this).parents('form').submit();\">Your text</a>\r\n  // More arbitrary code here\r\n</form>\r\n</code>", 
      "date_published": "2010-07-20 16:06:25", 
      "image_path": "", 
      "title_slug": "submitting-form-href-link-using-jquery", 
      "rendered_body": "One of the things I've had to work around are these hoity-toity designers who don't like to use typical \"submit\" buttons for form submissions when they're designing forms. They like to use anchor tags, presumably because they're more easily styleable. So, how does one submit a form without a submit button using jquery?\r\n\r\nHere's one way I've learned:\r\n\r\n<code class=\"javascript\">\r\n<form>\r\n  // Arbitrary code here\r\n  <a href=\"#\" onclick=\"$(this).parents('form').submit();\">Your text</a>\r\n  // More arbitrary code here\r\n</form>\r\n</code>", 
      "date_updated": "2010-07-20 16:10:07", 
      "demo": "", 
      "markup": "h", 
      "title": "Submitting a form from an a href link using jquery", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Okay, Okay, I admit it. I'm javascript challanged. As a Java developer, I've looked down my nose at paltry javascript, treating it as a \"me-too\" technology trying to cash in on the hype surrounding java all these years.\r\nAs a result, I've missed out on a lot of js goodies. And, with javascript entering a renaissance of sorts, combined with the wildfire-like buzz surrounding libraries such as jquery, it's high time I learn some.", 
      "source": "", 
      "user": 6, 
      "active": true, 
      "date_created": "2010-07-20 16:09:00", 
       
      "tags": "javascript jquery"
    }
  }, 
  {
    "pk": 112, 
    "model": "blog.article", 
    "fields": {
      "body": "Comments are essential to Subversion checkins.  A good text editor is essential to a good comment.  Here's how to set the editor of your choice to pop up when you do an svn checkin.\r\n\r\nOf course, the best plain text editor (and so much more) that I can think of is Emacs, so we'll use that for this example.\r\n\r\nSVN will attempt these options in this order when trying to launch a text editor for checkin comments:\r\n   \r\n   1.Command-line option --editor-cmd\r\n   2.Environment variable SVN_EDITOR\r\n   3.Configuration option editor-cmd\r\n   4.Environment variable VISUAL\r\n   5.Environment variable EDITOR\r\n   6. Possibly, a default value built in to Subversion (not present in the official builds)\r\n\r\nI prefer option #2:\r\n\r\n<code class=\"bash\">\r\nemacs ~/.bashrc\r\n\r\n#add this line\r\nexport SVN_EDITOR=\"/usr/bin/emacs\"\r\n</code>\r\n\r\nReload your bashrc:\r\n\r\n<code class=\"bash\">\r\n. ~/.bashrc\r\n</code>\r\n\r\nAnd now do your checkin:\r\n\r\n<code class=\"bash\">\r\nsvn ci information.html\r\n</code>\r\n\r\nAnd voila, Emacs pops up in all its glory!\r\n\r\nFor short comments, the inline option might be more convenient:\r\n\r\n<code class=\"bash\">\r\nsvn ci information.html -m \"This is my comment\"\r\n</code>\r\n\r\nFor the section of the Subversion manual describing this, see <a href=\"http://svnbook.red-bean.com/en/1.4/svn-book.html#svn.advanced.confarea.opts.config\">this page</a>.", 
      "date_published": "2008-11-26 15:06:01", 
      "image_path": null, 
      "title_slug": "svn-comment-editor", 
      "rendered_body": "Comments are essential to Subversion checkins.  A good text editor is essential to a good comment.  Here's how to set the editor of your choice to pop up when you do an svn checkin.\r\n\r\nOf course, the best plain text editor (and so much more) that I can think of is Emacs, so we'll use that for this example.\r\n\r\nSVN will attempt these options in this order when trying to launch a text editor for checkin comments:\r\n   \r\n   1.Command-line option --editor-cmd\r\n   2.Environment variable SVN_EDITOR\r\n   3.Configuration option editor-cmd\r\n   4.Environment variable VISUAL\r\n   5.Environment variable EDITOR\r\n   6. Possibly, a default value built in to Subversion (not present in the official builds)\r\n\r\nI prefer option #2:\r\n\r\n<code class=\"bash\">\r\nemacs ~/.bashrc\r\n\r\n#add this line\r\nexport SVN_EDITOR=\"/usr/bin/emacs\"\r\n</code>\r\n\r\nReload your bashrc:\r\n\r\n<code class=\"bash\">\r\n. ~/.bashrc\r\n</code>\r\n\r\nAnd now do your checkin:\r\n\r\n<code class=\"bash\">\r\nsvn ci information.html\r\n</code>\r\n\r\nAnd voila, Emacs pops up in all its glory!\r\n\r\nFor short comments, the inline option might be more convenient:\r\n\r\n<code class=\"bash\">\r\nsvn ci information.html -m \"This is my comment\"\r\n</code>\r\n\r\nFor the section of the Subversion manual describing this, see <a href=\"http://svnbook.red-bean.com/en/1.4/svn-book.html#svn.advanced.confarea.opts.config\">this page</a>.", 
      "date_updated": "2010-05-04 12:24:47", 
      "demo": null, 
      "markup": "h", 
      "title": "SVN Comment Editor", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Comments are essential to Subversion checkins.  A good text editor is essential to a good comment.  Here's how to set the editor of your choice to pop up when you do an svn checkin.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:06:33", 
       
      "tags": "svn vcs"
    }
  }, 
  {
    "pk": 126, 
    "model": "blog.article", 
    "fields": {
      "body": "In projects that create project meta data or compiled class files in the same directory as source, svn commits can be particularly cluttered with those files that we really don't care to keep under version control.  This is where svn:ignore can beceome our good friend.\r\n\r\nFor instance, in my django projects, the compile .pyc files are littered throughout my directory structure.  I don't want to commit them, so I want to ignore them.  \r\n\r\nWe need to edit the special property: svn:ignore.  The syntax is:\r\n\r\n<code class=\"bash\">\r\nsvn propedit svn:ignore target_dir\r\n</code>\r\n\r\nIf you have multiple directories, you'll have to run this for each or list multiple directories in the command.  I have yet to figure out how to do this recursively.  Does anyone know?\r\n\r\nLater, to see what you're ignoring, try this:\r\n\r\n<code class=\"bash\">\r\nsvn status --no-ignore\r\n</code>\r\n\r\n<h3>Update for Django</h3>\r\nOne of the main reasons I care about svn ignore is for my django projects.  I hate getting the .pyc files stuck in svn.  To purge your project of your *.pyc files, go to the project root and run this:\r\n\r\n<code class=\"bash\">\r\nfind -name '*.pyc' -print0|xargs -0 rm\r\n</code>", 
      "date_published": "2008-11-23 15:20:40", 
      "image_path": null, 
      "title_slug": "svn-ignore", 
      "rendered_body": "In projects that create project meta data or compiled class files in the same directory as source, svn commits can be particularly cluttered with those files that we really don't care to keep under version control.  This is where svn:ignore can beceome our good friend.\r\n\r\nFor instance, in my django projects, the compile .pyc files are littered throughout my directory structure.  I don't want to commit them, so I want to ignore them.  \r\n\r\nWe need to edit the special property: svn:ignore.  The syntax is:\r\n\r\n<code class=\"bash\">\r\nsvn propedit svn:ignore target_dir\r\n</code>\r\n\r\nIf you have multiple directories, you'll have to run this for each or list multiple directories in the command.  I have yet to figure out how to do this recursively.  Does anyone know?\r\n\r\nLater, to see what you're ignoring, try this:\r\n\r\n<code class=\"bash\">\r\nsvn status --no-ignore\r\n</code>\r\n\r\n<h3>Update for Django</h3>\r\nOne of the main reasons I care about svn ignore is for my django projects.  I hate getting the .pyc files stuck in svn.  To purge your project of your *.pyc files, go to the project root and run this:\r\n\r\n<code class=\"bash\">\r\nfind -name '*.pyc' -print0|xargs -0 rm\r\n</code>", 
      "date_updated": "2010-05-04 12:24:47", 
      "demo": null, 
      "markup": "h", 
      "title": "SVN Ignore", 
      "source_path": null, 
      "collection": 1, 
      "summary": "In projects that create project meta data or compiled class files in the same directory as source, svn commits can be particularly cluttered with those files that we really don't care to keep under version control.  This is where svn:ignore can beceome our good friend.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:21:30", 
       
      "tags": "svn vcs"
    }
  }, 
  {
    "pk": 343, 
    "model": "blog.article", 
    "fields": {
      "body": "I love synergy. Synergy is a little program that lets you share your keyboard and mouse with other computers on your network. \r\n\r\nI recently set up synergy to work on a windows7 computer so I could share keyboard and mouse with a linux machine. It didn't work. Before I became too melancholy I googled and was able to find out that I needed to enable two Inbound rules.\r\n\r\nIn the Windows Firewall Advanced Security, select Inbound Rules. Next find the two rules called File and Printer Sharing (Echo Request - ICMPv4-In) and enable those rules.\r\n\r\nThat should get synergy running for you. \r\n\r\nNote: Those rules also may prevent your machine from answering ping requests.\r\n", 
      "date_published": "2010-10-05 10:14:48", 
      "image_path": "", 
      "title_slug": "synergy-configuring-windows-7", 
      "rendered_body": "I love synergy. Synergy is a little program that lets you share your keyboard and mouse with other computers on your network. \r\n\r\nI recently set up synergy to work on a windows7 computer so I could share keyboard and mouse with a linux machine. It didn't work. Before I became too melancholy I googled and was able to find out that I needed to enable two Inbound rules.\r\n\r\nIn the Windows Firewall Advanced Security, select Inbound Rules. Next find the two rules called File and Printer Sharing (Echo Request - ICMPv4-In) and enable those rules.\r\n\r\nThat should get synergy running for you. \r\n\r\nNote: Those rules also may prevent your machine from answering ping requests.\r\n", 
      "date_updated": "2010-10-05 11:48:35", 
      "demo": "", 
      "markup": "h", 
      "title": "Synergy Needs Inbound Rules on Win 7", 
      "source_path": "", 
      "collection": 1, 
      "summary": "When configuring synergy on windows7, don't forget to open this policy", 
      "source": "", 
      "user": 2, 
      "active": true, 
      "date_created": "2010-10-05 10:24:18", 
       
      "tags": "synergy windows7"
    }
  }, 
  {
    "pk": 306, 
    "model": "blog.article", 
    "fields": {
      "body": "For my personal setup, I wanted to link my Linux box (lds-lap-3) and my Windows (sidekick) box.  I wanted the Linux box to be the server and the Windows box to be the client.  I also want both to work on login.  Here are are the steps:\r\n\r\nFirst, install the Windows executable after downloading it from the <a href=\"http://sourceforge.net/projects/synergy2/files/\">Sourceforge</a> site.  For the Linux side, take advantage of the glorious network updates:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install synergy\r\n</code>\r\n\r\nOn the Ubuntu server, create a file called synergy.conf.  For the complete explanation, refer to the <a href=\"http://synergy2.sourceforge.net/running.html\">Synergy docs</a>.  Here's my example file:\r\n\r\n<code class=\"text\">\r\nsection: screens\r\n\t lds-lap-3:\r\n\t sidekick:\r\nend\r\nsection: links\r\n\tlds-lap-3:\r\n\t\tleft = sidekick\r\n        sidekick:\r\n\t\tright = lds-lap-3\r\nend\r\n</code>\r\n\r\nIn the above configuration, lds-lap-3 is to the right of sidekick.  Now, setup the Synergy server to start when I log into my Ubuntu box (running gnome):\r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/gdm/Xsession\r\n\r\n# add these lines:\r\n/usr/bin/killall synergys\r\nsleep 1\r\n/usr/bin/synergys --config /your/path/to/synergy.conf\r\n</code>\r\n\r\nFor a more comprehensive take on autostarting, check out the <a href=\"http://synergy2.sourceforge.net/autostart.html\">Synergy docs</a>.  On the Windows box, start the Synergy GUI and select the option to \"Use another computer's shared keyboard and mouse (client)\".  Then, enter the other computer's host name.  In my case, this is \"lds-lap-3\".\r\n\r\nIf you want the client to connect on login or start up for the Windows box, you'll find that under the \"Options\" section, click the \"Autostart...\" button.  \r\n\r\nNow, I restart the Ubuntu box and log in.  To check to see if Synergy auto-started, run a:\r\n\r\n<code class=\"bash\">\r\nps ax | grep synergys\r\n</code>\r\n\r\nYou should see the command run by the loading of the Xsession script.  Now, you can restart your Windows box.  Or, if you want to test that later, just click \"Start\" to get your client going.\r\n\r\nIn my case, using Synergy 1.3.1, the client couldn't find the server this time.  I received this in the Synergy log: \"WARNING: failed to connect to server: address not found for: lds-lap-3\".  Well!  I'm not sure how I got this working before, but a Jaunty install with the same Windows install, I know this worked.  So, maybe it's a Karmic thing, I'm not sure.  I've also changed the physical location of my network plugin, so who knows.  In this <a href=\"http://www.linein.org/blog/2007/06/25/synergy-131-warning-failed-to-connect-to-server-time-out/\">post</a>, they suggested pointing the client to the actual IP of the server.  This did work, though it's not as fun or automatic and gives me little spasms in my left eyebrow.  But, hey, it's working now.  If I find something more definitive, I'll post.\r\n\r\nEnjoy the awesomeness of Synergy, for which there is also no charge, and enjoy finding your mouse pointer in the sea of screen that you are about to enjoy.", 
      "date_published": "2010-01-04 11:01:39", 
      "image_path": null, 
      "title_slug": "synergy-ubuntu", 
      "rendered_body": "For my personal setup, I wanted to link my Linux box (lds-lap-3) and my Windows (sidekick) box.  I wanted the Linux box to be the server and the Windows box to be the client.  I also want both to work on login.  Here are are the steps:\r\n\r\nFirst, install the Windows executable after downloading it from the <a href=\"http://sourceforge.net/projects/synergy2/files/\">Sourceforge</a> site.  For the Linux side, take advantage of the glorious network updates:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install synergy\r\n</code>\r\n\r\nOn the Ubuntu server, create a file called synergy.conf.  For the complete explanation, refer to the <a href=\"http://synergy2.sourceforge.net/running.html\">Synergy docs</a>.  Here's my example file:\r\n\r\n<code class=\"text\">\r\nsection: screens\r\n\t lds-lap-3:\r\n\t sidekick:\r\nend\r\nsection: links\r\n\tlds-lap-3:\r\n\t\tleft = sidekick\r\n        sidekick:\r\n\t\tright = lds-lap-3\r\nend\r\n</code>\r\n\r\nIn the above configuration, lds-lap-3 is to the right of sidekick.  Now, setup the Synergy server to start when I log into my Ubuntu box (running gnome):\r\n\r\n<code class=\"bash\">\r\nsudo emacs /etc/gdm/Xsession\r\n\r\n# add these lines:\r\n/usr/bin/killall synergys\r\nsleep 1\r\n/usr/bin/synergys --config /your/path/to/synergy.conf\r\n</code>\r\n\r\nFor a more comprehensive take on autostarting, check out the <a href=\"http://synergy2.sourceforge.net/autostart.html\">Synergy docs</a>.  On the Windows box, start the Synergy GUI and select the option to \"Use another computer's shared keyboard and mouse (client)\".  Then, enter the other computer's host name.  In my case, this is \"lds-lap-3\".\r\n\r\nIf you want the client to connect on login or start up for the Windows box, you'll find that under the \"Options\" section, click the \"Autostart...\" button.  \r\n\r\nNow, I restart the Ubuntu box and log in.  To check to see if Synergy auto-started, run a:\r\n\r\n<code class=\"bash\">\r\nps ax | grep synergys\r\n</code>\r\n\r\nYou should see the command run by the loading of the Xsession script.  Now, you can restart your Windows box.  Or, if you want to test that later, just click \"Start\" to get your client going.\r\n\r\nIn my case, using Synergy 1.3.1, the client couldn't find the server this time.  I received this in the Synergy log: \"WARNING: failed to connect to server: address not found for: lds-lap-3\".  Well!  I'm not sure how I got this working before, but a Jaunty install with the same Windows install, I know this worked.  So, maybe it's a Karmic thing, I'm not sure.  I've also changed the physical location of my network plugin, so who knows.  In this <a href=\"http://www.linein.org/blog/2007/06/25/synergy-131-warning-failed-to-connect-to-server-time-out/\">post</a>, they suggested pointing the client to the actual IP of the server.  This did work, though it's not as fun or automatic and gives me little spasms in my left eyebrow.  But, hey, it's working now.  If I find something more definitive, I'll post.\r\n\r\nEnjoy the awesomeness of Synergy, for which there is also no charge, and enjoy finding your mouse pointer in the sea of screen that you are about to enjoy.", 
      "date_updated": "2010-05-04 12:24:47", 
      "demo": null, 
      "markup": "h", 
      "title": "Synergy on Ubuntu", 
      "source_path": null, 
      "collection": 1, 
      "summary": "<a href=\"http://synergy2.sourceforge.net/\" target=\"_blank\">Synergy</a> is a fantastic project that allows you to share a single set of input devices (keyboard and mouse) over multiple machines.  Clipboard sharing is also supported.  It's remarkably easy to set up, and it works across multiple platforms.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-01-04 11:21:50", 
       
      "tags": "linux synergy ubuntu"
    }
  }, 
  {
    "pk": 394, 
    "model": "blog.article", 
    "fields": {
      "body": "Ok, it may be slightly <em>more</em> magical than that.  But, I don't want to get your hopes up.  Seriously, though, if TDD is fun in, say Java Land (and it still is in MarkLogic land with \"the Swede\"), then it's a required portion of fun in MarkLogic Land?  Why?  While you might imagine yourself going back and adding tests to your Java project and sometimes you do, if you imagine it and then attempt it in your XQuery project, I believe the likelihood that you shrivel in shame and tears under your desk is much higher than in some other environments.\r\n\r\nI the difficulty of the test after development approach is higher in MarkLogic XQuery because of what I've called \"camouflaged dependencies\" -- essentially, access to the http request and respond and to the database.  \r\n\r\nYou can get access to request fields or headers or anything else dealing with the web context in which the code is executed at any place in your code.  This doesn't mean you have to code like this, but the language doesn't necessarily help you enforce your discipline.  This is where testing before you write the code will help.  Make you functions functional -- pass in parameters and make them the only data access.  \r\n\r\nYou can read the database natively in MarkLogic XQuery.  That means that you can be retrieving data anywhere in your code.  There is an extreme lack of ceremony in making a connection to the database -- it's always there;  they're connected.  This is both refreshing and a shiny nail strip upon which to puncture the tires of your test-driven sports coupe e're you drive it off the lot.  Resist the temptation to read from the database or write to the database save in very determined and specific parts of your app -- parts that you will not actually unit test [gasp] because they'll be doing nothing but saving xmls at given database uris, and MarkLogic already has internal testing for that.\r\n\r\nSo, respect what you might call your dependencies -- the network and the database -- and be thrilled with the adventure of testing the business logic that you write yourself and need to verify.  And test it first to help keep you on the strait and narrow.  Otherwise, you're \"discipline\" will crumble under deadlines and in the end it will \"just work\" -- until it doesn't -- and you won't know why.\r\n\r\n\r\n\r\nNote:\r\nBelow are the slides to support a presentation given at an in-house development conference.  It is an evolution of a talk previously given on <a href=\"\">unit testing XQuery on MarkLogic</a> with streamlined principles and skills section and a not-included coding portion surrounding the use of XqTest, our XQuery unit test framework, and its integration in our environment.  Tonight, as I say my prayers, I will continue to hope that someday XqTest will be released from its prison and \"the Swede\" will see the light of day!\r\n\r\n<div style=\"width:425px\" id=\"__ss_9651897\"> <strong style=\"display:block;margin:12px 0 4px\"><a href=\"http://www.slideshare.net/rockycode/testdriven-development-on-marklogic\" title=\"Test-driven Development on MarkLogic\" target=\"_blank\">Test-driven Development on MarkLogic</a></strong> <iframe src=\"http://www.slideshare.net/slideshow/embed_code/9651897\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe> <div style=\"padding:5px 0 12px\"> View more <a href=\"http://www.slideshare.net/\" target=\"_blank\">presentations</a> from <a href=\"http://www.slideshare.net/rockycode\" target=\"_blank\">rockycode</a> </div> </div>", 
      "date_published": "2011-10-11 20:46:44", 
      "image_path": "", 
      "title_slug": "test-driven-development-marklogic", 
      "rendered_body": "Ok, it may be slightly <em>more</em> magical than that.  But, I don't want to get your hopes up.  Seriously, though, if TDD is fun in, say Java Land (and it still is in MarkLogic land with \"the Swede\"), then it's a required portion of fun in MarkLogic Land?  Why?  While you might imagine yourself going back and adding tests to your Java project and sometimes you do, if you imagine it and then attempt it in your XQuery project, I believe the likelihood that you shrivel in shame and tears under your desk is much higher than in some other environments.\r\n\r\nI the difficulty of the test after development approach is higher in MarkLogic XQuery because of what I've called \"camouflaged dependencies\" -- essentially, access to the http request and respond and to the database.  \r\n\r\nYou can get access to request fields or headers or anything else dealing with the web context in which the code is executed at any place in your code.  This doesn't mean you have to code like this, but the language doesn't necessarily help you enforce your discipline.  This is where testing before you write the code will help.  Make you functions functional -- pass in parameters and make them the only data access.  \r\n\r\nYou can read the database natively in MarkLogic XQuery.  That means that you can be retrieving data anywhere in your code.  There is an extreme lack of ceremony in making a connection to the database -- it's always there;  they're connected.  This is both refreshing and a shiny nail strip upon which to puncture the tires of your test-driven sports coupe e're you drive it off the lot.  Resist the temptation to read from the database or write to the database save in very determined and specific parts of your app -- parts that you will not actually unit test [gasp] because they'll be doing nothing but saving xmls at given database uris, and MarkLogic already has internal testing for that.\r\n\r\nSo, respect what you might call your dependencies -- the network and the database -- and be thrilled with the adventure of testing the business logic that you write yourself and need to verify.  And test it first to help keep you on the strait and narrow.  Otherwise, you're \"discipline\" will crumble under deadlines and in the end it will \"just work\" -- until it doesn't -- and you won't know why.\r\n\r\n\r\n\r\nNote:\r\nBelow are the slides to support a presentation given at an in-house development conference.  It is an evolution of a talk previously given on <a href=\"\">unit testing XQuery on MarkLogic</a> with streamlined principles and skills section and a not-included coding portion surrounding the use of XqTest, our XQuery unit test framework, and its integration in our environment.  Tonight, as I say my prayers, I will continue to hope that someday XqTest will be released from its prison and \"the Swede\" will see the light of day!\r\n\r\n<div style=\"width:425px\" id=\"__ss_9651897\"> <strong style=\"display:block;margin:12px 0 4px\"><a href=\"http://www.slideshare.net/rockycode/testdriven-development-on-marklogic\" title=\"Test-driven Development on MarkLogic\" target=\"_blank\">Test-driven Development on MarkLogic</a></strong> <iframe src=\"http://www.slideshare.net/slideshow/embed_code/9651897\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe> <div style=\"padding:5px 0 12px\"> View more <a href=\"http://www.slideshare.net/\" target=\"_blank\">presentations</a> from <a href=\"http://www.slideshare.net/rockycode\" target=\"_blank\">rockycode</a> </div> </div>", 
      "date_updated": "2011-10-11 21:10:35", 
      "demo": "", 
      "markup": "h", 
      "title": "Test-driven Development on MarkLogic", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Unit testing is a required part of a healthy software development lifecycle and a balanced breakfast.  But test-driven development is a rockin' part of an *awesome* development lifecycle.  What's the difference?  If you don't test-drive the dev of your MarkLogic XQuery, you may never come back to test again.  Test-driven XQuery development will ease your headaches, put you into the plush seat of a developer with confidence, and rocket you down the road to making all your wildest dreams come true.  Kachow!", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-10-11 21:08:40", 
       
      "tags": "marklogic tdd unit-testing xquery"
    }
  }, 
  {
    "pk": 325, 
    "model": "blog.article", 
    "fields": {
      "body": "Say you have a method to time how long an operation takes. It looks something like:\r\n<code class=\"java\">\r\npublic int time(value) {\r\n    start = System.currentTimeMillis();\r\n    runOperation(value);\r\n    stop = System.currentTimeMillis();\r\n    return stop - start;\r\n}\r\n</code>\r\n\r\nand runOperation(), for the sake of simplicity, just performs a simple multiplication operation:\r\n\r\n<code class=\"java\">\r\npublic int runOperation(int value) {\r\n    return (value * 15);\r\n}\r\n</code>\r\n\r\nWorks great, right? Well, insofar as the operation run by runOperation() is concerned. But what if you had more than one operation you wanted timed? Or, what if you wanted to be able to time <em>any</em> arbitrary operation?\r\nYou can see that this would require a lot of code duplication. Enter Groovy closures. As you may know, a closure is an arbitrary, assignable block of code. First, we'll create a couple of operations, similar to runOperation(), above, but make them <em>closures</em>:\r\n\r\n<code class=\"java\">\r\ndef simpleMult = { (int)  it * 15 }\r\n\r\ndef complexMult = { it.multiply(15) }\r\n</code>\r\n<br/>\r\n<em>it</em> is basically like <en>this</em> in Java.<br/>\r\nThen, we create our timer method, similar to time() above, but with a couple of changes. First, it takes an additional parameter of type Closure. Second, instead of the call to runOperation(), we instead yield control to the closure that is passed in. (I use the word <em>yield</em> on purpose, for this works a lot like Ruby's yield, for yielding control to a proc.) For added interest, we'll pass an incremented count to the closure of the value passed to the method:\r\n\r\n<code class=\"java>\r\ndef time(value, closure)  {\r\n    start = System.currentTimeMillis()\r\n    repeat.times { closure(it) }\r\n    stop = System.currentTimeMillis()\r\n    stop - start\r\n}\r\n</code>\r\n\r\nAlso note that we define a closure within the time() method, namely the one being passed to the each method, wherein we are calling our closure.\r\nFinally, we have the test harness code:\r\n\r\n<code class=\"java\">\r\nsimpleTry = time(10000, simpleMult)\r\ncomplexTry = time(10000, complexMult)\r\n</code>\r\n\r\nThis way, we can run time() for any arbitrary calculation--pretty powerful stuff!", 
      "date_published": "2010-07-19 12:13:16", 
      "image_path": "", 
      "title_slug": "power-groovy-closures", 
      "rendered_body": "Say you have a method to time how long an operation takes. It looks something like:\r\n<code class=\"java\">\r\npublic int time(value) {\r\n    start = System.currentTimeMillis();\r\n    runOperation(value);\r\n    stop = System.currentTimeMillis();\r\n    return stop - start;\r\n}\r\n</code>\r\n\r\nand runOperation(), for the sake of simplicity, just performs a simple multiplication operation:\r\n\r\n<code class=\"java\">\r\npublic int runOperation(int value) {\r\n    return (value * 15);\r\n}\r\n</code>\r\n\r\nWorks great, right? Well, insofar as the operation run by runOperation() is concerned. But what if you had more than one operation you wanted timed? Or, what if you wanted to be able to time <em>any</em> arbitrary operation?\r\nYou can see that this would require a lot of code duplication. Enter Groovy closures. As you may know, a closure is an arbitrary, assignable block of code. First, we'll create a couple of operations, similar to runOperation(), above, but make them <em>closures</em>:\r\n\r\n<code class=\"java\">\r\ndef simpleMult = { (int)  it * 15 }\r\n\r\ndef complexMult = { it.multiply(15) }\r\n</code>\r\n<br/>\r\n<em>it</em> is basically like <en>this</em> in Java.<br/>\r\nThen, we create our timer method, similar to time() above, but with a couple of changes. First, it takes an additional parameter of type Closure. Second, instead of the call to runOperation(), we instead yield control to the closure that is passed in. (I use the word <em>yield</em> on purpose, for this works a lot like Ruby's yield, for yielding control to a proc.) For added interest, we'll pass an incremented count to the closure of the value passed to the method:\r\n\r\n<code class=\"java>\r\ndef time(value, closure)  {\r\n    start = System.currentTimeMillis()\r\n    repeat.times { closure(it) }\r\n    stop = System.currentTimeMillis()\r\n    stop - start\r\n}\r\n</code>\r\n\r\nAlso note that we define a closure within the time() method, namely the one being passed to the each method, wherein we are calling our closure.\r\nFinally, we have the test harness code:\r\n\r\n<code class=\"java\">\r\nsimpleTry = time(10000, simpleMult)\r\ncomplexTry = time(10000, complexMult)\r\n</code>\r\n\r\nThis way, we can run time() for any arbitrary calculation--pretty powerful stuff!", 
      "date_updated": "2010-07-20 14:19:12", 
      "demo": "", 
      "markup": "h", 
      "title": "The power of Groovy closures", 
      "source_path": "", 
      "collection": 1, 
      "summary": "In the Java world, we don\u2019t get closures until Java 7. Groovy already has them. Here's what I\u2019ve learned about these important programming structures, and why they're powerful.", 
      "source": "", 
      "user": 6, 
      "active": true, 
      "date_created": "2010-07-19 12:20:23", 
       
      "tags": "groovy java"
    }
  }, 
  {
    "pk": 120, 
    "model": "blog.article", 
    "fields": {
      "body": "Sometimes you have a large database schema and a lot of tables that you're not sure what they contain.  You do know, however, the nature of the data'ific needle that you're trying to find in your schema'ific schema.  Oracle provides some cool dictionary tables that might help you in your quest.\r\n\r\nTry to find what you're looking for by table name: \r\n\r\n<code class=\"sql\">\r\n   select *\r\n   from   dba_tab_cols\r\n   where  owner = 'SCHEMA_NAME'\r\n   and    table_name like '%SWEET%';\r\n</code>\r\n\r\nTry to find what you're looking for by column name:\r\n\r\n<code class=\"sql\">\r\n   select *\r\n   from   dba_tab_cols\r\n   where  owner = 'SCHEMA_NAME'\r\n   and    column_name like '%COOLNESS%';\r\n</code>", 
      "date_published": "2008-10-14 15:15:04", 
      "image_path": null, 
      "title_slug": "these-arent-tables-youre-looking", 
      "rendered_body": "Sometimes you have a large database schema and a lot of tables that you're not sure what they contain.  You do know, however, the nature of the data'ific needle that you're trying to find in your schema'ific schema.  Oracle provides some cool dictionary tables that might help you in your quest.\r\n\r\nTry to find what you're looking for by table name: \r\n\r\n<code class=\"sql\">\r\n   select *\r\n   from   dba_tab_cols\r\n   where  owner = 'SCHEMA_NAME'\r\n   and    table_name like '%SWEET%';\r\n</code>\r\n\r\nTry to find what you're looking for by column name:\r\n\r\n<code class=\"sql\">\r\n   select *\r\n   from   dba_tab_cols\r\n   where  owner = 'SCHEMA_NAME'\r\n   and    column_name like '%COOLNESS%';\r\n</code>", 
      "date_updated": "2010-05-04 12:24:47", 
      "demo": null, 
      "markup": "h", 
      "title": "These Aren't the Tables You're Looking For", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Sometimes you have a large database schema and a lot of tables that you're not sure what they contain.  You do know, however, the nature of the data'ific needle that you're trying to find in your schema'ific schema.  Oracle provides some cool dictionary tables that might help you in your quest.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:15:44", 
       
      "tags": "oracle sql"
    }
  }, 
  {
    "pk": 367, 
    "model": "blog.article", 
    "fields": {
      "body": "* If you buy instead of build, expect to change your business processes to match the purchased product or expect to build onto what you have bought.\r\n\r\n* Early standardization stifles innovation.\r\n\r\n* Software comes in generations.  In the beginning phase of a generation, it's the wild west because nothing is established.  Somewhere in the middle, reuse is desired, best practices are assembled, and products become de facto standards.  Toward the end of a generation, software developers begin to decide the standard is insufficient.   A new generation begins when a large enough mass of mind share decides to again make the jump into the unknown of innovation.\r\n\r\n* Customized solutions encourage innovation and project ownership. \r\n\r\n* Convention can move you miles ahead, often much faster than starting ground-up, which can feel just as satisfying as a possibly more creative solution.\r\n\r\n* Custom solutions and standard solutions both have bugs.  \r\n\r\n* Standard solutions, if the product of increased time and contributors, can be more thoroughly proven and solid.\r\n\r\n* Build it and solve technical problems or buy it and solve political problems.\r\n\r\n* Customized solutions incur greater risk because they ideas are often new and untested.  Reward potentials are similar.\r\n\r\n* It is easier to quantify costs of custom development -- it's x number of people working x hours on a product.  It is hard to quantify the costs of buying a product -- support wait time, consultation time, business inefficiencies because of mismatched product.\r\n\r\n* The best solutions are born from solving a specific, practical problem in real life as opposed to theoretical, invented problems for which a solution can be built and marketed.\r\n\r\n* Priorities influence the build or buy decision.  For instance, what's the value of R&D compared with business consolidation?\r\n\r\n* Standard solutions tend to be standard, addressing a general need.  Custom solutions can answer your problem as directly as you can make it.\r\n\r\n* You own the destiny of your own custom solutions -- most of the time.\r\n\r\nWell, there are some thoughts from my swirling cerebral cortex.  It's not an easy problem.  I have no answers.  Being a creative person, an independent person, and a curious person I sometimes favor custom solutions.  Being a practical, conservative,  or tired person I sometimes favor a standard out-of-the box solution.  Take my mutterings for what they're worth.\r\n", 
      "date_published": "2011-03-11 11:16:22", 
      "image_path": "", 
      "title_slug": "thoughts-customization-and-convention", 
      "rendered_body": "<ul class=\"simple\">\n<li>If you buy instead of build, expect to change your business processes to match the purchased product or expect to build onto what you have bought.</li>\n<li>Early standardization stifles innovation.</li>\n<li>Software comes in generations.  In the beginning phase of a generation, it's the wild west because nothing is established.  Somewhere in the middle, reuse is desired, best practices are assembled, and products become de facto standards.  Toward the end of a generation, software developers begin to decide the standard is insufficient.   A new generation begins when a large enough mass of mind share decides to again make the jump into the unknown of innovation.</li>\n<li>Customized solutions encourage innovation and project ownership.</li>\n<li>Convention can move you miles ahead, often much faster than starting ground-up, which can feel just as satisfying as a possibly more creative solution.</li>\n<li>Custom solutions and standard solutions both have bugs.</li>\n<li>Standard solutions, if the product of increased time and contributors, can be more thoroughly proven and solid.</li>\n<li>Build it and solve technical problems or buy it and solve political problems.</li>\n<li>Customized solutions incur greater risk because they ideas are often new and untested.  Reward potentials are similar.</li>\n<li>It is easier to quantify costs of custom development -- it's x number of people working x hours on a product.  It is hard to quantify the costs of buying a product -- support wait time, consultation time, business inefficiencies because of mismatched product.</li>\n<li>The best solutions are born from solving a specific, practical problem in real life as opposed to theoretical, invented problems for which a solution can be built and marketed.</li>\n<li>Priorities influence the build or buy decision.  For instance, what's the value of R&amp;D compared with business consolidation?</li>\n<li>Standard solutions tend to be standard, addressing a general need.  Custom solutions can answer your problem as directly as you can make it.</li>\n<li>You own the destiny of your own custom solutions -- most of the time.</li>\n</ul>\n<p>Well, there are some thoughts from my swirling cerebral cortex.  It's not an easy problem.  I have no answers.  Being a creative person, an independent person, and a curious person I sometimes favor custom solutions.  Being a practical, conservative,  or tired person I sometimes favor a standard out-of-the box solution.  Take my mutterings for what they're worth.</p>\n", 
      "date_updated": "2011-03-11 11:18:37", 
      "demo": "", 
      "markup": "r", 
      "title": "Thoughts on Customization and Convention", 
      "source_path": "", 
      "collection": 1, 
      "summary": "There is an epic balancing act in software today, fought between customization and convention.  When to build, when to buy?  When to create new solutions or reuse those already created?  What are the pros and cons to either?  I don't think that there is a quick answer that is going to always be true for any of these questions?  Each situation brings with it too many diverse aspects.  But, here are some of my observations.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-03-11 11:17:57", 
       
      "tags": "convention customization project-management"
    }
  }, 
  {
    "pk": 299, 
    "model": "blog.article", 
    "fields": {
      "body": "\r\nUnexpected call to method or property access\r\n\r\nThe usefulness of this error message led me to Google, where I soon found the many people had experienced this same awfulness on IE for a multiplicity of reasons, most wide-spread among them being appending children to elements that didn't exist and trying to remove elements from the head.  Neither of these scenarios seemed applicable, so being stuck without Firebug on the offending \"browser\", I devo'd back to the good 'ol alert box debugging.  I soon happened upon this method:\r\n\r\n<code class=\"javascript\">\r\nfunction (data, prefix) {\r\n  for (field in data) {\r\n      $(prefix + field).html(data[field]).val(data[field]);\r\n  }\r\n}\r\n</code>\r\n\r\nIt turns out that the elements that I'm selecting with the selector \"prefix + field\", gave me both input tags and other html elements.  This is why I do an update to the content with html() and with val().  This works in Firefox and Chrome.  But, on IE, it fails without pretense of working at all.  Eventually, I found that if I did an html() update on the html tags, and a val() update on inputs, it would work.  In this light, the error message actually makes a little sense.  Rewritten, it might say, \"Hey naive web developer, you are trying to set an attribute that is not there.  I'm gonna die.  Bye now.\"\r\n\r\nRewritten for the express purpose of pleasing IE and to overcome my naivete, here it is:\r\n<code class=\"javascript\">\r\nfunction (data, prefix) {\r\n  for (field in data) {\r\n      $(prefix + field).each(function () {\r\n          if ($(this).attr('value') != undefined) {\r\n              $(this).val(data[field]);\r\n          } else {\r\n              $(this).html(data[field]);\r\n          }\r\n      });\r\n  }\r\n}\r\n</code>\r\n", 
      "date_published": "2009-12-18 12:43:05", 
      "image_path": null, 
      "title_slug": "unexpected-call-method-or-property-access", 
      "rendered_body": "\r\nUnexpected call to method or property access\r\n\r\nThe usefulness of this error message led me to Google, where I soon found the many people had experienced this same awfulness on IE for a multiplicity of reasons, most wide-spread among them being appending children to elements that didn't exist and trying to remove elements from the head.  Neither of these scenarios seemed applicable, so being stuck without Firebug on the offending \"browser\", I devo'd back to the good 'ol alert box debugging.  I soon happened upon this method:\r\n\r\n<code class=\"javascript\">\r\nfunction (data, prefix) {\r\n  for (field in data) {\r\n      $(prefix + field).html(data[field]).val(data[field]);\r\n  }\r\n}\r\n</code>\r\n\r\nIt turns out that the elements that I'm selecting with the selector \"prefix + field\", gave me both input tags and other html elements.  This is why I do an update to the content with html() and with val().  This works in Firefox and Chrome.  But, on IE, it fails without pretense of working at all.  Eventually, I found that if I did an html() update on the html tags, and a val() update on inputs, it would work.  In this light, the error message actually makes a little sense.  Rewritten, it might say, \"Hey naive web developer, you are trying to set an attribute that is not there.  I'm gonna die.  Bye now.\"\r\n\r\nRewritten for the express purpose of pleasing IE and to overcome my naivete, here it is:\r\n<code class=\"javascript\">\r\nfunction (data, prefix) {\r\n  for (field in data) {\r\n      $(prefix + field).each(function () {\r\n          if ($(this).attr('value') != undefined) {\r\n              $(this).val(data[field]);\r\n          } else {\r\n              $(this).html(data[field]);\r\n          }\r\n      });\r\n  }\r\n}\r\n</code>\r\n", 
      "date_updated": "2010-05-04 12:24:47", 
      "demo": null, 
      "markup": "h", 
      "title": "Unexpected call to method or property access", 
      "source_path": null, 
      "collection": 1, 
      "summary": "In a recent admin tool I was creating, I was using SOUIT of Javascript... apparently more than I knew how to write well.  Eventually, it all worked wonderfully -- that is, until someone tried to use it in a lesser browser -- Internet Explorer. The error was thus:\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-12-18 12:44:08", 
       
      "tags": "ie javascript web-browser"
    }
  }, 
  {
    "pk": 355, 
    "model": "blog.article", 
    "fields": {
      "body": "Safety-wise, we're a little perplexed on how safe typing really is.  In the past, it's helped fail fast, providing feedback on data anomalies or bad conditions during test.  But, if you haven't tested a particular condition that would trigger an error, you're going to have to wait until runtime to then get the app to blow up in your face.  A compile-time check would be really nice here.\r\n\r\nReadability, I think, is vastly improved by typing parameters and return types.  I'm very thankful that the built-in functions of MarkLogic, the Xquery implementation I use most often, are so annotated.  I also dig the occurrence indicators a la regex that provide terse, elegant meaning.\r\n\r\nIn trying to get to the point of increased safety and readability, I've also reached the point of increased confusion.  We setup an example of what we thought would error out, but instead it still didn't work, but gave us something unexpected.  Here's the example:\r\n\r\n.. code-block:: xquery\r\n\r\n\txquery version \"1.0-ml\";\r\n\r\n\tdeclare namespace aw = \"awesome\";\r\n\r\n\tdeclare function aw:foo($in as xs:string) as xs:string? {\r\n\t  ()\r\n\t};\r\n\r\n\tdeclare function aw:foo2($in as xs:string) {\r\n\t  \"sweetness\"\r\n\t};\r\n\r\n\taw:foo2(aw:foo(\"something\"))\r\n\t\r\nThe function foo2() is supposed to requires a string and return \"sweetness\".  We pass into foo2() the result of foo(), which is always an empty sequence, so we would have expected the call to foo2() to blow some serious xml chunks.  Instead, the return value of the whole expression is also empty sequence.  Will someone please explain why this is, because foo2() is hardcoded to return \"sweetness\".  Is it that foo2() is never called?  And if so, why does that seem to happen silently?  Doesn't that seem dangerous?  The mysteries mount.  \r\n\r\nIf I change the xquery version itself on this code to read:\r\n\r\n.. code-block:: xquery\r\n\r\n\txquery version \"1.0\";\r\n\t\r\nNow we're back into vanilla Xquery land without the MarkLogic flavor.  Now, I get what seems to be a more expected response.  Calling this code now yields this lovely:\r\n\r\n.. code-block:: xquery\r\n\r\n\t[1.0] XDMP-AS: (err:XPTY0004) $in as xs:string -- Invalid coercion: () as xs:string\r\n\tStack trace:\r\n\r\n\tline 9:\r\n\t7: };\r\n\t8: \r\n\t9: declare function aw:foo2($in as xs:string) {\r\n\t10: \"sweetness\"\r\n\t11: };\r\n\r\n\taw:foo2(())\r\n\r\n\r\n\tline 13:\r\n\t11: };\r\n\t12: \r\n\t13: aw:foo2(aw:foo(\"something\"))\r\n\t14: \r\n\t15:\r\n\t\r\nSo, is this a bug in the MarkLogic implementation of type checking, coercion or something else?  Beats me, but for now this is something that makes me a little more unsure of the code I write in Xquery/MarkLogic.  Help me Obi-wan, you're my only hope.\r\n\t\r\n\r\n**Update - Mystery Solved**\r\n\r\nKelly Stirman of MarkLogic was kind enough to comment on my consternation (see his post below).  I took his advice, saw the coercion error that I was observing when running in vanilla 1.0 xquery, and the universe came back into alignment.\r\n\r\nSo, it turns out that my function foo2() was indeed never called.  From the `MarkLogic Docs <http://docs.marklogic.com/4.2doc/docapp.xqy#display.xqy?fname=http://pubs/4.2doc/xml/xquery/enhanced.xml%2355459>`_ describing function mapping:\r\n\r\n\tOne consequence of function mapping, which can be **surprising** the first time you see it, is that if the value passed for a parameter is the empty sequence, it could result in the function being called 0 times (that is, in the function never runs and results in the empty sequence. For example, if you entered the empty sequence as the parameter to the above function call, it returns empty, as follows:\r\n\r\n\t\t.. code-block:: xquery\r\n\t\t\r\n\t\t\txquery version \"1.0-ml\";\r\n\r\n\t\t\tdeclare function local:print-word ($word as xs:string) { $word };\r\n\r\n\t\t\tlocal:print-word( () )\r\n\t\t\t(: \r\n\t\t\t   evaluates the print-word function zero times, resulting \r\n\t\t\t   in the empty sequence\r\n\t\t\t:)\r\n\t\t\r\n\tThe local:print-word function is never called in this case, because it is iterating over the empty sequence, which causes zero invocations of the function. If your function calls are fed by code that can return the empty sequence (an XPath expression, for example), then you might see this behavior.\r\n\r\nAnd boy was I surprised. :)  \r\n\r\nSo, what was the fix?  It was to disable function mapping that MarkLogic-flavored Xquery adds as an extension to the language:\r\n\r\n.. code-block:: xquery\r\n\r\n\txquery version \"1.0-ml\";\r\n\r\n\tdeclare namespace aw = \"awesome\";\r\n\r\n\tdeclare namespace xdmp = \"http://marklogic.com/xdmp\";\r\n\r\n\tdeclare option xdmp:mapping \"false\"; \r\n\r\n\tdeclare function aw:foo($in as xs:string) as xs:string? {\r\n\t  ()\r\n\t};\r\n\r\n\tdeclare function aw:foo2($in as xs:string) {\r\n\t  \"else\"\r\n\t};\r\n\r\n\taw:foo2(aw:foo(\"something\"))\r\n\r\nThis yielded:\r\n\r\n.. code-block:: xquery\r\n\r\n\t[1.0-ml] XDMP-AS: (err:XPTY0004) $in as xs:string -- Invalid coercion: () as xs:string\r\n\r\nAnd I felt much better knowing what was happening in the code.\r\n\r\nThe behavior of not calling a function when passed an empty sequence when function mapping is on does not seem very intuitive to me, but it does seem to fit in with the logic of function mapping if it treats for the sequence as the variable iterated on in the for a FLWOR.  Recently, I've created a hotkey for turning off function mapping for other reasons, and now here's another one.  I have obviously not leveled up sufficiently to handle this function mapping beast with any dexterity.  \r\n\r\nThanks, Kelly, for letting our souls rest easier over the holidays. :)\r\n", 
      "date_published": "2010-12-17 08:02:11", 
      "image_path": "", 
      "title_slug": "unexpected-results-marklogic-xquery-type-coercion", 
      "rendered_body": "<p>Safety-wise, we're a little perplexed on how safe typing really is.  In the past, it's helped fail fast, providing feedback on data anomalies or bad conditions during test.  But, if you haven't tested a particular condition that would trigger an error, you're going to have to wait until runtime to then get the app to blow up in your face.  A compile-time check would be really nice here.</p>\n<p>Readability, I think, is vastly improved by typing parameters and return types.  I'm very thankful that the built-in functions of MarkLogic, the Xquery implementation I use most often, are so annotated.  I also dig the occurrence indicators a la regex that provide terse, elegant meaning.</p>\n<p>In trying to get to the point of increased safety and readability, I've also reached the point of increased confusion.  We setup an example of what we thought would error out, but instead it still didn't work, but gave us something unexpected.  Here's the example:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0-ml&quot;;\n\ndeclare namespace aw = &quot;awesome&quot;;\n\ndeclare function aw:foo($in as xs:string) as xs:string? {\n  ()\n};\n\ndeclare function aw:foo2($in as xs:string) {\n  &quot;sweetness&quot;\n};\n\naw:foo2(aw:foo(&quot;something&quot;))\n</pre></div>\n</div><p>The function foo2() is supposed to requires a string and return &quot;sweetness&quot;.  We pass into foo2() the result of foo(), which is always an empty sequence, so we would have expected the call to foo2() to blow some serious xml chunks.  Instead, the return value of the whole expression is also empty sequence.  Will someone please explain why this is, because foo2() is hardcoded to return &quot;sweetness&quot;.  Is it that foo2() is never called?  And if so, why does that seem to happen silently?  Doesn't that seem dangerous?  The mysteries mount.</p>\n<p>If I change the xquery version itself on this code to read:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0&quot;;\n</pre></div>\n</div><p>Now we're back into vanilla Xquery land without the MarkLogic flavor.  Now, I get what seems to be a more expected response.  Calling this code now yields this lovely:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>[1.0] XDMP-AS: (err:XPTY0004) $in as xs:string -- Invalid coercion: () as xs:string\nStack trace:\n\nline 9:\n7: };\n8:\n9: declare function aw:foo2($in as xs:string) {\n10: &quot;sweetness&quot;\n11: };\n\naw:foo2(())\n\n\nline 13:\n11: };\n12:\n13: aw:foo2(aw:foo(&quot;something&quot;))\n14:\n15:\n</pre></div>\n</div><p>So, is this a bug in the MarkLogic implementation of type checking, coercion or something else?  Beats me, but for now this is something that makes me a little more unsure of the code I write in Xquery/MarkLogic.  Help me Obi-wan, you're my only hope.</p>\n<p><strong>Update - Mystery Solved</strong></p>\n<p>Kelly Stirman of MarkLogic was kind enough to comment on my consternation (see his post below).  I took his advice, saw the coercion error that I was observing when running in vanilla 1.0 xquery, and the universe came back into alignment.</p>\n<p>So, it turns out that my function foo2() was indeed never called.  From the <a class=\"reference external\" href=\"http://docs.marklogic.com/4.2doc/docapp.xqy#display.xqy?fname=http://pubs/4.2doc/xml/xquery/enhanced.xml%2355459\">MarkLogic Docs</a> describing function mapping:</p>\n<blockquote>\n<p>One consequence of function mapping, which can be <strong>surprising</strong> the first time you see it, is that if the value passed for a parameter is the empty sequence, it could result in the function being called 0 times (that is, in the function never runs and results in the empty sequence. For example, if you entered the empty sequence as the parameter to the above function call, it returns empty, as follows:</p>\n<blockquote>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0-ml&quot;;\n\ndeclare function local:print-word ($word as xs:string) { $word };\n\nlocal:print-word( () )\n(:\n   evaluates the print-word function zero times, resulting\n   in the empty sequence\n:)\n</pre></div>\n</div></blockquote>\n<p>The local:print-word function is never called in this case, because it is iterating over the empty sequence, which causes zero invocations of the function. If your function calls are fed by code that can return the empty sequence (an XPath expression, for example), then you might see this behavior.</p>\n</blockquote>\n<p>And boy was I surprised. :)</p>\n<p>So, what was the fix?  It was to disable function mapping that MarkLogic-flavored Xquery adds as an extension to the language:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0-ml&quot;;\n\ndeclare namespace aw = &quot;awesome&quot;;\n\ndeclare namespace xdmp = &quot;http://marklogic.com/xdmp&quot;;\n\ndeclare option xdmp:mapping &quot;false&quot;;\n\ndeclare function aw:foo($in as xs:string) as xs:string? {\n  ()\n};\n\ndeclare function aw:foo2($in as xs:string) {\n  &quot;else&quot;\n};\n\naw:foo2(aw:foo(&quot;something&quot;))\n</pre></div>\n</div><p>This yielded:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>[1.0-ml] XDMP-AS: (err:XPTY0004) $in as xs:string -- Invalid coercion: () as xs:string\n</pre></div>\n</div><p>And I felt much better knowing what was happening in the code.</p>\n<p>The behavior of not calling a function when passed an empty sequence when function mapping is on does not seem very intuitive to me, but it does seem to fit in with the logic of function mapping if it treats for the sequence as the variable iterated on in the for a FLWOR.  Recently, I've created a hotkey for turning off function mapping for other reasons, and now here's another one.  I have obviously not leveled up sufficiently to handle this function mapping beast with any dexterity.</p>\n<p>Thanks, Kelly, for letting our souls rest easier over the holidays. :)</p>\n", 
      "date_updated": "2010-12-23 16:03:45", 
      "demo": "", 
      "markup": "r", 
      "title": "Unexpected Results in MarkLogic Xquery Type Coercion", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Recently, we've been working on writing an API using xquery.  We have wanted to make the API as solid as possible, since we're putting the brunt of the complexity of our system into this module of code.  What might typing our parameters and return types give us?  We are hoping for safety and readability.  ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-12-17 08:02:51", 
       
      "tags": "marklogic typing xquery"
    }
  }, 
  {
    "pk": 378, 
    "model": "blog.article", 
    "fields": {
      "body": "This slide deck is from a presentation at the MarkLogic Users Conference 2011.  \r\n\r\n<div style=\"width:510px\" id=\"__ss_7778485\"> <strong style=\"display:block;margin:12px 0 4px\"><a href=\"http://www.slideshare.net/rockycode/unit-testing-xquery-on-marklogic\" title=\"Unit Testing XQuery on MarkLogic\">Unit Testing XQuery on MarkLogic</a></strong> <iframe src=\"http://www.slideshare.net/slideshow/embed_code/7778485\" width=\"510\" height=\"426\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe> <div style=\"padding:5px 0 12px\"> View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=\"http://www.slideshare.net/rockycode\">rockycode</a> </div> </div>\r\n\r\nMore prose to follow and support these slides soon.  \r\n", 
      "date_published": "2011-04-29 09:50:30", 
      "image_path": "", 
      "title_slug": "unit-testing-xquery-marklogic", 
      "rendered_body": "This slide deck is from a presentation at the MarkLogic Users Conference 2011.  \r\n\r\n<div style=\"width:510px\" id=\"__ss_7778485\"> <strong style=\"display:block;margin:12px 0 4px\"><a href=\"http://www.slideshare.net/rockycode/unit-testing-xquery-on-marklogic\" title=\"Unit Testing XQuery on MarkLogic\">Unit Testing XQuery on MarkLogic</a></strong> <iframe src=\"http://www.slideshare.net/slideshow/embed_code/7778485\" width=\"510\" height=\"426\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe> <div style=\"padding:5px 0 12px\"> View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=\"http://www.slideshare.net/rockycode\">rockycode</a> </div> </div>\r\n\r\nMore prose to follow and support these slides soon.  \r\n", 
      "date_updated": "2011-05-03 07:39:21", 
      "demo": "", 
      "markup": "h", 
      "title": "Unit Testing XQuery on MarkLogic", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Unit testing is a required part of a healthy software development lifecycle.  Business logic in MarkLogic Xquery needs the same insurance of superb testing as any other language.  \r\n\r\nPrinciples: Come learn the motivation for unit testing and how test-driven development can increase your productivity writing solid Xquery code in an Agile-coding environment.  \r\n\r\nSkills: We'll code Xquery examples to learn general skills including the TDD workflow, how to isolate your code for unit testability, and how to test one thing at a time.  In each case, we'll address how to apply these skills specifically to development in the MarkLogic environment.\r\n\r\nTools: We'll also introduce you to in-house-developed tooling for creating unit tests and running them.  This tooling provides an all-Xquery method of creating test functions, annotating them as such so they're runnable in the test runner, isolating certain modules to test, and viewing clear test results.\r\n\r\nWith a few principles, skills, and tools for unit testing, you can go forward with increased confidence that the Xquery code you write on MarkLogic is more awesome than ever.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-04-29 09:52:48", 
       
      "tags": "marklogic unit-testing xquery"
    }
  }, 
  {
    "pk": 116, 
    "model": "blog.article", 
    "fields": {
      "body": "It's important to understand what libraries, utilities, engines and so on that are used by your Ubuntu Linux OS.  It's easy to tell if you only have on option -- of course, it uses the only thing available.  But if there are multiple options, which does it use?  In general, the default;  Here's how to set it.\r\n\r\nThis is similar to the Set Default Applications dialog in Windows XP.  \r\n\r\nType:\r\n\r\n<code class=\"bash\">\r\nupdate-alternates --config [press tab, tab]\r\n</code>\r\n\r\nFor me, this asked me if I wanted to see all 120 possibilities.  These possibilities represent the full set of options on libraries, utilities, engines, and so on that you have the ability to change the default of.\r\n\r\nOne that was important for me upon first installing Ubuntu was to change the version of Java that the OS used as default.  After installing my new version of Java, I ran this:\r\n\r\n<code class=\"bash\">\r\nsudo update-alternates --config java\r\n</code>\r\n\r\nThen, I chose #2, java-6-sun, and life has been good ever since.  At one point, I also had reason to change my totem movie player engine (--config totem).\r\n\r\nLinux is great for ultimate control!\r\n\r\n<strong>UPDATE:</strong>\r\n\r\nI ran into an interesting problem where I was getting a java.lang.UnsupportedClassVersionError when trying to run a .java file that I had compiled.  This error is generated when the source is built for a different JDK than it's run in, so make sure that both 'java' and 'javac' are configured to target the same version of Java.", 
      "date_published": "2008-11-27 15:11:10", 
      "image_path": null, 
      "title_slug": "update-alternatives", 
      "rendered_body": "It's important to understand what libraries, utilities, engines and so on that are used by your Ubuntu Linux OS.  It's easy to tell if you only have on option -- of course, it uses the only thing available.  But if there are multiple options, which does it use?  In general, the default;  Here's how to set it.\r\n\r\nThis is similar to the Set Default Applications dialog in Windows XP.  \r\n\r\nType:\r\n\r\n<code class=\"bash\">\r\nupdate-alternates --config [press tab, tab]\r\n</code>\r\n\r\nFor me, this asked me if I wanted to see all 120 possibilities.  These possibilities represent the full set of options on libraries, utilities, engines, and so on that you have the ability to change the default of.\r\n\r\nOne that was important for me upon first installing Ubuntu was to change the version of Java that the OS used as default.  After installing my new version of Java, I ran this:\r\n\r\n<code class=\"bash\">\r\nsudo update-alternates --config java\r\n</code>\r\n\r\nThen, I chose #2, java-6-sun, and life has been good ever since.  At one point, I also had reason to change my totem movie player engine (--config totem).\r\n\r\nLinux is great for ultimate control!\r\n\r\n<strong>UPDATE:</strong>\r\n\r\nI ran into an interesting problem where I was getting a java.lang.UnsupportedClassVersionError when trying to run a .java file that I had compiled.  This error is generated when the source is built for a different JDK than it's run in, so make sure that both 'java' and 'javac' are configured to target the same version of Java.", 
      "date_updated": "2010-05-04 12:25:57", 
      "demo": null, 
      "markup": "h", 
      "title": "Update Alternatives", 
      "source_path": null, 
      "collection": 1, 
      "summary": "It's important to understand what libraries, utilities, engines and so on that are used by your Ubuntu Linux OS.  It's easy to tell if you only have on option -- of course, it uses the only thing available.  But if there are multiple options, which does it use?  In general, the default;  Here's how to set it.\r\n\r\nThis is similar to the Set Default Applications dialog in Windows XP. ", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:12:01", 
       
      "tags": "java ubuntu"
    }
  }, 
  {
    "pk": 149, 
    "model": "blog.article", 
    "fields": {
      "body": "In our application, we use a jsf converter that converts the string representation of the a jpa-managed object into the object proper.  \r\n\r\nThe required format of this string is thus:\r\n\r\n<code>\r\nfully.qualified.class.name:primarykey\r\n</code>\r\n\r\nI don't want to override the toString() method because we use it for other things.  And, I don't want to have to create some method to return this formatted string to me in <strong>every</strong> class that I might want to call this on.  So, I created a util method to do this for me.\r\n\r\n<code class=\"java\">\r\npublic static String getEntityConverterString(Object o) {\r\n   String retval = null;\r\n   if (o != null) {\r\n      String id = null;\r\n      for (Field f : o.getClass().getDeclaredFields()) {\r\n      if (f.isAnnotationPresent(Id.class)) {\r\n         String getterName = \"get\" + StringUtils.capitalize(f.getName());\r\n         for (Method m : o.getClass().getDeclaredMethods()) {\r\n         if (m.getName().equals(getterName)) {\r\n            try {\r\n            Object idObj = m.invoke(o, null);\r\n            if (idObj != null) {\r\n               id = idObj.toString();\r\n               break;\r\n            }\r\n            } catch (IllegalAccessException e) {\r\n            throw new RuntimeException(\"Cannot find appropriate accessor for @Id field \");\r\n            } catch (InvocationTargetException e) {\r\n            throw new RuntimeException(\"Exception thrown w/in accessor\");\r\n            }\r\n         }\r\n         }\r\n         break;\r\n      }\r\n      }\r\n      retval = o.toString().split(\"@\")[0] + \":\" + id;\r\n   }\r\n   return retval;\r\n}\r\n</code>\r\n\r\nThe only stipulation to this working is that the class follows the JavaBean naming convention standard of \"get\" + capitalized field name following.  Oh, and one more: this is only designed for @Entity's with one @Id field (no composite key).\r\n\r\nThis method goes through all fields, finds the one with the javax.persistence.Id interface annotation, then tries to find a matching accessor method.  If it is found, it is executed, the value of the id field is given, finally to be used to create the specially formatted string.", 
      "date_published": "2009-02-20 13:36:55", 
      "image_path": null, 
      "title_slug": "use-java-reflection-get-field-w-accessor", 
      "rendered_body": "In our application, we use a jsf converter that converts the string representation of the a jpa-managed object into the object proper.  \r\n\r\nThe required format of this string is thus:\r\n\r\n<code>\r\nfully.qualified.class.name:primarykey\r\n</code>\r\n\r\nI don't want to override the toString() method because we use it for other things.  And, I don't want to have to create some method to return this formatted string to me in <strong>every</strong> class that I might want to call this on.  So, I created a util method to do this for me.\r\n\r\n<code class=\"java\">\r\npublic static String getEntityConverterString(Object o) {\r\n   String retval = null;\r\n   if (o != null) {\r\n      String id = null;\r\n      for (Field f : o.getClass().getDeclaredFields()) {\r\n      if (f.isAnnotationPresent(Id.class)) {\r\n         String getterName = \"get\" + StringUtils.capitalize(f.getName());\r\n         for (Method m : o.getClass().getDeclaredMethods()) {\r\n         if (m.getName().equals(getterName)) {\r\n            try {\r\n            Object idObj = m.invoke(o, null);\r\n            if (idObj != null) {\r\n               id = idObj.toString();\r\n               break;\r\n            }\r\n            } catch (IllegalAccessException e) {\r\n            throw new RuntimeException(\"Cannot find appropriate accessor for @Id field \");\r\n            } catch (InvocationTargetException e) {\r\n            throw new RuntimeException(\"Exception thrown w/in accessor\");\r\n            }\r\n         }\r\n         }\r\n         break;\r\n      }\r\n      }\r\n      retval = o.toString().split(\"@\")[0] + \":\" + id;\r\n   }\r\n   return retval;\r\n}\r\n</code>\r\n\r\nThe only stipulation to this working is that the class follows the JavaBean naming convention standard of \"get\" + capitalized field name following.  Oh, and one more: this is only designed for @Entity's with one @Id field (no composite key).\r\n\r\nThis method goes through all fields, finds the one with the javax.persistence.Id interface annotation, then tries to find a matching accessor method.  If it is found, it is executed, the value of the id field is given, finally to be used to create the specially formatted string.", 
      "date_updated": "2010-05-04 12:25:57", 
      "demo": null, 
      "markup": "h", 
      "title": "Use Java Reflection to Get Field w/ Accessor", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Java is about objects.  Reflection is about knowing things about those objects generally without have specific fields and methods in hand.  I must get to one of those field values via its accessor, allowing me to keep the fields private and abstracted away... of course, until I start unit testing.  Here's one method...", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-02-20 13:46:26", 
       
      "tags": "java reflection"
    }
  }, 
  {
    "pk": 366, 
    "model": "blog.article", 
    "fields": {
      "body": "`X RandR <http://en.wikipedia.org/wiki/Xrandr>`_ is a command line tool allowing the XServer to dynamically change the configuration.  To save you from writing your own shell script utilizing xrandr, two tools have been created:\r\n\r\n- Disper: http://willem.engen.nl/projects/disper/\r\n    `Debian package <https://launchpad.net/~disper-dev/+archive/ppa/+files/disper_0.2.3_all.deb>`_\r\n- autorandr: https://github.com/wertarbyte/autorandr\r\n\r\n\r\n**Disclaimer:** I am new to Linux, not a seasoned veteran like many of you, so I can't tell you exactly what these tools do, just how I use them.  But they work.\r\n\r\nIn Ubuntu you should already have xrandr installed.  Install Disper using the Debian package above (or build it from source, if you'd like).  Disper sounds like it is geared towards NVidia cards.  While it (or the plain autorandr alone) may work fine for ATI cards, you may want to take a look at `this page <http://www.thinkwiki.org/wiki/Script_for_Dynamic_Display_Management_with_fglrx>`_ if you have an ATI card.\r\n\r\nOnce xrandr and Disper are both in place, download the autorandr script from the link above, and place it where you'd like to run it from.  The most documentation I've found for it is within the comments of the script, so read through those.  It is suggested on `this issue page <https://github.com/wertarbyte/auto-disper/issues/issue/5>`_ to use the auto-disper symlink if you have an NVidia card.  The basic usage is:\r\n\r\n.. code-block:: bash\r\n\r\n    auto-disper --save <profile_name>\r\n\r\nThen to toggle profiles:\r\n\r\n.. code-block:: bash\r\n\r\n    auto-disper --change\r\n\r\nAgain, the comments in the script explain this and a bit more, so read through those.  Set up your typical docked display configuration and save that as something like 'docked'.  Then do what you need to to set up your typical undocked configuration and save that as something like 'undocked'.  The names are arbitrary unless you call them with ``--load docked``, which I do not.\r\n\r\nFinally, I have added a global keyboard shortcut in gnome so that Shift+Ctrl+F7 calls ``auto-disper --change``.  I have tried to get the FN+F7 switch display button to work for this (per `these instructions <http://www.thinkwiki.org/wiki/Sample_Fn-F7_script>`_), but haven't yet succeeded.  The ACPI event is triggered and arbitrary scripts I write are called, but for some reason calling auto-disper in that way still doesn't work.\r\n\r\nUpdate:\r\nWhen saving a profile you may get the error: ``could not get scaling for screen CRT-0, reverting to \"default\"``.  Something out there lead me to believe that was irrelevant, but in any case I have thus far ignored it with no noticeable issues.", 
      "date_published": "2011-02-09 09:39:56", 
      "image_path": "", 
      "title_slug": "using-autorandr-undocking-goodness", 
      "rendered_body": "<p><a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Xrandr\">X RandR</a> is a command line tool allowing the XServer to dynamically change the configuration.  To save you from writing your own shell script utilizing xrandr, two tools have been created:</p>\n<ul>\n<li><dl class=\"first docutils\">\n<dt>Disper: <a class=\"reference external\" href=\"http://willem.engen.nl/projects/disper/\">http://willem.engen.nl/projects/disper/</a></dt>\n<dd><p class=\"first last\"><a class=\"reference external\" href=\"https://launchpad.net/~disper-dev/+archive/ppa/+files/disper_0.2.3_all.deb\">Debian package</a></p>\n</dd>\n</dl>\n</li>\n<li><p class=\"first\">autorandr: <a class=\"reference external\" href=\"https://github.com/wertarbyte/autorandr\">https://github.com/wertarbyte/autorandr</a></p>\n</li>\n</ul>\n<p><strong>Disclaimer:</strong> I am new to Linux, not a seasoned veteran like many of you, so I can't tell you exactly what these tools do, just how I use them.  But they work.</p>\n<p>In Ubuntu you should already have xrandr installed.  Install Disper using the Debian package above (or build it from source, if you'd like).  Disper sounds like it is geared towards NVidia cards.  While it (or the plain autorandr alone) may work fine for ATI cards, you may want to take a look at <a class=\"reference external\" href=\"http://www.thinkwiki.org/wiki/Script_for_Dynamic_Display_Management_with_fglrx\">this page</a> if you have an ATI card.</p>\n<p>Once xrandr and Disper are both in place, download the autorandr script from the link above, and place it where you'd like to run it from.  The most documentation I've found for it is within the comments of the script, so read through those.  It is suggested on <a class=\"reference external\" href=\"https://github.com/wertarbyte/auto-disper/issues/issue/5\">this issue page</a> to use the auto-disper symlink if you have an NVidia card.  The basic usage is:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>auto-disper --save &lt;profile_name&gt;\n</pre></div>\n</div><p>Then to toggle profiles:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>auto-disper --change\n</pre></div>\n</div><p>Again, the comments in the script explain this and a bit more, so read through those.  Set up your typical docked display configuration and save that as something like 'docked'.  Then do what you need to to set up your typical undocked configuration and save that as something like 'undocked'.  The names are arbitrary unless you call them with <tt class=\"docutils literal\"><span class=\"pre\">--load</span> docked</tt>, which I do not.</p>\n<p>Finally, I have added a global keyboard shortcut in gnome so that Shift+Ctrl+F7 calls <tt class=\"docutils literal\"><span class=\"pre\">auto-disper</span> <span class=\"pre\">--change</span></tt>.  I have tried to get the FN+F7 switch display button to work for this (per <a class=\"reference external\" href=\"http://www.thinkwiki.org/wiki/Sample_Fn-F7_script\">these instructions</a>), but haven't yet succeeded.  The ACPI event is triggered and arbitrary scripts I write are called, but for some reason calling auto-disper in that way still doesn't work.</p>\n<p>Update:\nWhen saving a profile you may get the error: <tt class=\"docutils literal\">could not get scaling for screen <span class=\"pre\">CRT-0,</span> reverting to &quot;default&quot;</tt>.  Something out there lead me to believe that was irrelevant, but in any case I have thus far ignored it with no noticeable issues.</p>\n", 
      "date_updated": "2011-02-10 08:12:39", 
      "demo": "", 
      "markup": "r", 
      "title": "Using Autorandr for Undocking Goodness in Linux", 
      "source_path": "", 
      "collection": 1, 
      "summary": "If you, like me, are sick of having to restart the XServer when you undock/dock your laptop in order to get the display to reconfigure (ok, so I've only undocked once since I installed Linux; still, I was bugged), your days of wo are numbered.", 
      "source": "", 
      "user": 7, 
      "active": true, 
      "date_created": "2011-02-09 10:12:11", 
       
      "tags": "linux ubuntu xserver"
    }
  }, 
  {
    "pk": 359, 
    "model": "blog.article", 
    "fields": {
      "body": "First, some background: DavMail's basically a server, written in Java, running on your local box or somewhere else. It used Outlook Web Access to get your mail, calendar, and other stuff and then re-sends them using standard protocols like IMAP, LDAP, CalDav, etc. A post with an explanatory graphic is <a href=\"http://techruminations.blogspot.com/2010/01/using-davmail-gateway-to-allow.html\">here</a>.\r\nDisclaimer: These instructions assume you are using Ubuntu 10.10 (Maverick) with at least Java 5 installed.\r\n</ol>\r\n<h3>Installation</h3>\r\n<ol>\r\n<li>Go to http://sourceforge.net/projects/davmail/files/ and click the Download link for the .deb file. After downloading, install the .deb.</li>\r\n<li>Start DavMail by entering davmail in a terminal. You will see a yellow circle in your notification area.</li>\r\n<li>Right click the DavMail icon and select <b>Settings...</b>.</li>\r\n<li>Enter your webmail's URL in the OWA (Exchange) URL field. It will be something like <b>https://mail.yourcompany.com/owa/</b>.\r\n<li>Make note of the Local IMAP SMTP, and LDAP port settings, and then close the dialog.</li>\r\n<h3>E-mail configuration</h3>\r\n<ol>\r\n<li>Start your favorite email client, and configure a new account with the following settings:\r\n<li>Incoming server type: IMAP</li>\r\n<li>Server name: localhost</li>\r\n<li>Port: &lt;The port from DavMail's Local IMAP port setting&gt;</li>\r\n<li>Username: &lt;Your corporate email address&gt; note-you may need <b>&lt;Domain_name&gt;\\\\</b> on the front of this, depending on which version of Exchange you are on.</li>\r\n<li>No connection security, and set authentication method to whatever your corporate exchange server's authentication method is.</li>\r\n<li>Outgoing (SMTP) server name: localhost</li>\r\n<li>Port: &lt;The port from DavMail's Local SMTP port setting&gt;</li>\r\n<li>Username: &lt;Your corporate user name&gt; note-you may need <b>&lt;Domain_name&gt;\\\\</b> on the front of this, depending on which version of Exchange you are on.</li>\r\n<li>No connection security, and set authentication method to whatever your corporate exchange server's authentication method is.</li>\r\n</ol>\r\n</ol>\r\n<h3>Calendar configuration</h3>\r\nClients vary on how to configure calendars, but I'll give the general settings.\r\n<ol>\r\n<li>Start your favorite email client, and configure a new calendar with the following settings:\r\n<ol>\r\n<li>Calendar type: CalDav</li>\r\n<li>Server name: localhost</li>\r\n<li>Port: &lt;The port from DavMail's Local CalDav port setting&gt;</li>\r\n<li>URL: http://localhost:1080/users/mail@company.com/calendar</li>\r\n</ol>\r\n<li>Save the calendar.</li>\r\n</ol>\r\nThat should do it! Hit me up if you run into any snags. I have tested both sending and accepting event invitations in Thunderbird with another Ubuntu/DavMail user, and all my Calendar events--even from before the install--show up correctly. Bonus: it works outside any corporate firewall.", 
      "date_published": "2011-01-28 08:06:05", 
      "image_path": "", 
      "title_slug": "using-davmail-exchange-linux", 
      "rendered_body": "First, some background: DavMail's basically a server, written in Java, running on your local box or somewhere else. It used Outlook Web Access to get your mail, calendar, and other stuff and then re-sends them using standard protocols like IMAP, LDAP, CalDav, etc. A post with an explanatory graphic is <a href=\"http://techruminations.blogspot.com/2010/01/using-davmail-gateway-to-allow.html\">here</a>.\r\nDisclaimer: These instructions assume you are using Ubuntu 10.10 (Maverick) with at least Java 5 installed.\r\n</ol>\r\n<h3>Installation</h3>\r\n<ol>\r\n<li>Go to http://sourceforge.net/projects/davmail/files/ and click the Download link for the .deb file. After downloading, install the .deb.</li>\r\n<li>Start DavMail by entering davmail in a terminal. You will see a yellow circle in your notification area.</li>\r\n<li>Right click the DavMail icon and select <b>Settings...</b>.</li>\r\n<li>Enter your webmail's URL in the OWA (Exchange) URL field. It will be something like <b>https://mail.yourcompany.com/owa/</b>.\r\n<li>Make note of the Local IMAP SMTP, and LDAP port settings, and then close the dialog.</li>\r\n<h3>E-mail configuration</h3>\r\n<ol>\r\n<li>Start your favorite email client, and configure a new account with the following settings:\r\n<li>Incoming server type: IMAP</li>\r\n<li>Server name: localhost</li>\r\n<li>Port: &lt;The port from DavMail's Local IMAP port setting&gt;</li>\r\n<li>Username: &lt;Your corporate email address&gt; note-you may need <b>&lt;Domain_name&gt;\\\\</b> on the front of this, depending on which version of Exchange you are on.</li>\r\n<li>No connection security, and set authentication method to whatever your corporate exchange server's authentication method is.</li>\r\n<li>Outgoing (SMTP) server name: localhost</li>\r\n<li>Port: &lt;The port from DavMail's Local SMTP port setting&gt;</li>\r\n<li>Username: &lt;Your corporate user name&gt; note-you may need <b>&lt;Domain_name&gt;\\\\</b> on the front of this, depending on which version of Exchange you are on.</li>\r\n<li>No connection security, and set authentication method to whatever your corporate exchange server's authentication method is.</li>\r\n</ol>\r\n</ol>\r\n<h3>Calendar configuration</h3>\r\nClients vary on how to configure calendars, but I'll give the general settings.\r\n<ol>\r\n<li>Start your favorite email client, and configure a new calendar with the following settings:\r\n<ol>\r\n<li>Calendar type: CalDav</li>\r\n<li>Server name: localhost</li>\r\n<li>Port: &lt;The port from DavMail's Local CalDav port setting&gt;</li>\r\n<li>URL: http://localhost:1080/users/mail@company.com/calendar</li>\r\n</ol>\r\n<li>Save the calendar.</li>\r\n</ol>\r\nThat should do it! Hit me up if you run into any snags. I have tested both sending and accepting event invitations in Thunderbird with another Ubuntu/DavMail user, and all my Calendar events--even from before the install--show up correctly. Bonus: it works outside any corporate firewall.", 
      "date_updated": "2011-02-04 08:38:42", 
      "demo": "", 
      "markup": "h", 
      "title": "Using DavMail with Exchange for Linux", 
      "source_path": "", 
      "collection": 1, 
      "summary": "My one bone of contention in using Linux has been the paucity of Exchange-compatible clients. I have the inclination to blame M$, but hey--my Android phone client works just fine. Evolution, Thunderbird, KMail--sure, I can get IMAP mail, but none have worked to the point of syncing with my appointments. Enter DavMail. I'll show you how to install it and set it up to work with your company's Exchange server.", 
      "source": "", 
      "user": 6, 
      "active": true, 
      "date_created": "2011-01-28 08:17:11", 
       
      "tags": "davmail exchange linux ubuntu"
    }
  }, 
  {
    "pk": 382, 
    "model": "blog.article", 
    "fields": {
      "body": "Ubuntu Personal Package Archives (PPA) are an easy way for developers to make their source packages available to the common user (like myself) through APT, Debian's great package manager.  Packages from the default repositories are often out of date, where the developer has published newer versions that may have fixed serious bugs.  In order to ensure that the ppa is trusted, an encrypted connection over gpg is used.  However, apt by default connects via port 11371, likely to be blocked if you are behind a corporate firewall.  When you try to add the ppa you're likely to see the following error:\r\n\r\n.. code-block:: text\r\n\r\n    gpg: requesting key 34EF4A35 from hkp server keyserver.ubuntu.com\r\n    ?: keyserver.ubuntu.com: Connection refused\r\n    gpgkeys: HTTP fetch error 7: couldn't connect: Connection refused\r\n    gpg: no valid OpenPGP data found.\r\n    gpg: Total number processed: 0\r\n\r\nThe simplest way I found to configure apt to use port 80 instead of the default was found in `this launchpad bug\r\n<https://bugs.launchpad.net/ubuntu/+source/software-properties/+bug/516032>`_, post #9:\r\n\r\n\tTo make add-apt-repository use port 80 by default, the /usr/share/pyshared/softwareproperties/ppa.py file used by add-apt-repository can be modified to use port 80.\r\n\tEdit the file **/usr/share/pyshared/softwareproperties/ppa.py**\r\n\tSearch for **\"keyserver.ubuntu.com\"**\r\n\tReplace it by **\"hkp://keyserver.ubuntu.com:80\"** and save the file.\r\n\tadd-apt-repository should work behind a proxy now.\r\n\r\nThe downside to a code change, like we're doing here to ppa.py, is that a typical upgrade would overwrite our changes.  However, according to the thread referenced above, this change has already been made in Ubuntu 11.04 and up.", 
      "date_published": "2011-05-24 10:13:40", 
      "image_path": "", 
      "title_slug": "using-ubuntu-ppa-repositories-behind-firewall", 
      "rendered_body": "<p>Ubuntu Personal Package Archives (PPA) are an easy way for developers to make their source packages available to the common user (like myself) through APT, Debian's great package manager.  Packages from the default repositories are often out of date, where the developer has published newer versions that may have fixed serious bugs.  In order to ensure that the ppa is trusted, an encrypted connection over gpg is used.  However, apt by default connects via port 11371, likely to be blocked if you are behind a corporate firewall.  When you try to add the ppa you're likely to see the following error:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>gpg: requesting key 34EF4A35 from hkp server keyserver.ubuntu.com\n?: keyserver.ubuntu.com: Connection refused\ngpgkeys: HTTP fetch error 7: couldn&#39;t connect: Connection refused\ngpg: no valid OpenPGP data found.\ngpg: Total number processed: 0\n</pre></div>\n</div><p>The simplest way I found to configure apt to use port 80 instead of the default was found in <a class=\"reference external\" href=\"https://bugs.launchpad.net/ubuntu/+source/software-properties/+bug/516032\">this launchpad bug</a>, post #9:</p>\n<blockquote>\nTo make add-apt-repository use port 80 by default, the /usr/share/pyshared/softwareproperties/ppa.py file used by add-apt-repository can be modified to use port 80.\nEdit the file <strong>/usr/share/pyshared/softwareproperties/ppa.py</strong>\nSearch for <strong>&quot;keyserver.ubuntu.com&quot;</strong>\nReplace it by <strong>&quot;hkp://keyserver.ubuntu.com:80&quot;</strong> and save the file.\nadd-apt-repository should work behind a proxy now.</blockquote>\n<p>The downside to a code change, like we're doing here to ppa.py, is that a typical upgrade would overwrite our changes.  However, according to the thread referenced above, this change has already been made in Ubuntu 11.04 and up.</p>\n", 
      "date_updated": "2011-06-08 09:09:22", 
      "demo": "", 
      "markup": "r", 
      "title": "Using Ubuntu PPA Repositories Behind a Firewall", 
      "source_path": "", 
      "collection": 1, 
      "summary": "This post describes a quick and dirty way to configure apt-add-repository to use port 80 instead of port 11371.", 
      "source": "", 
      "user": 7, 
      "active": true, 
      "date_created": "2011-05-24 10:32:27", 
       
      "tags": "linux networking ubuntu"
    }
  }, 
  {
    "pk": 316, 
    "model": "blog.article", 
    "fields": {
      "body": "1. The wsdl file needs a proxy class to be called from the .NET code.  To create this proxy class, use the wsdl.exe tool with the .NET framework. \r\n\r\n.. code-block:: bash\r\n\r\n\tC:\\Program Files\\Microsoft Visual Studio 8\\SDK\\v2.0\\Bin\\wsdl.exe\" /language:CS /protocol:SOAP /namespace:peoplesoft.com /out:myfilename.cs [path]\\myfilename.wsdl\r\n\r\n2. Add the ouput .cs file to your solution in Visual Studio.\r\n\r\n3. Finally,\r\n\r\n.. code-block:: java\r\n\r\n\tC_CURRENCY_CD_CIService service = new C_CURRENCY_CD_CIService();\r\n\tservice.Security = new SecurityTypeShape();\r\n\tGet__CompIntfc__C_CURRENCY_CD_CITypeShape type = new Get__CompIntfc__C_CURRENCY_CD_CITypeShape();\r\n\r\n\tservice.Security.UsernameToken = new UsernameTokenTypeShape();\r\n\tservice.Security.UsernameToken.Username = new UsernameTypeShape();\r\n\tservice.Security.UsernameToken.Password = new PasswordTypeShape();\r\n\r\n\tservice.Security.UsernameToken.Username.Value = ConfigurationManager.AppSettings[\"PeopleSoftUserName\"];\r\n\tservice.Security.UsernameToken.Password.Value = ConfigurationManager.AppSettings[\"PeopleSoftPassword\"];\r\n\r\n\ttype.CURRENCY_CD = new CURRENCY_CDTypeShape();\r\n\ttype.CURRENCY_CD.Value = currencyCode; //required parameter for this Get method\r\n\r\n\tGet__CompIntfc__C_CURRENCY_CD_CIResponseTypeShape response = service.Get__CompIntfc__C_CURRENCY_CD_CI(type);\r\n\r\nThe response now holds the SOAP response from the web service call.\r\n\r\nNote: You might run into a known problem in XmlSerializer Code Generation component: it cannot handle some cases of nested unbounded elements.  The Object Model it creates is not valid: user cannot use it to produce xml messages.\r\n\r\nUnfortunately to fix this you have to edit your schema to make sure that all array-like constructs will be handled properly.  See website for the rest of the problem description and hack fix: `Unable to generate a temporary class <http://social.msdn.microsoft.com/forums/en-US/asmxandxml/thread/e33305c3-b5f6-4922-8a3f-df202088d25a'>`_.", 
      "date_published": "2010-05-27 10:04:06", 
      "image_path": "", 
      "title_slug": "using-wsdl-hit-peoplesoft-service-net", 
      "rendered_body": "<ol class=\"arabic simple\">\n<li>The wsdl file needs a proxy class to be called from the .NET code.  To create this proxy class, use the wsdl.exe tool with the .NET framework.</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>C:<span class=\"se\">\\P</span>rogram Files<span class=\"se\">\\M</span>icrosoft Visual Studio 8<span class=\"se\">\\S</span>DK<span class=\"se\">\\v</span>2.0<span class=\"se\">\\B</span>in<span class=\"se\">\\w</span>sdl.exe<span class=\"err\">&quot;</span> /language:CS /protocol:SOAP /namespace:peoplesoft.com /out:myfilename.cs <span class=\"o\">[</span>path<span class=\"o\">]</span><span class=\"se\">\\m</span>yfilename.wsdl\n</pre></div>\n</div><ol class=\"arabic simple\" start=\"2\">\n<li>Add the ouput .cs file to your solution in Visual Studio.</li>\n<li>Finally,</li>\n</ol>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"n\">C_CURRENCY_CD_CIService</span> <span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">C_CURRENCY_CD_CIService</span><span class=\"o\">();</span>\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"na\">Security</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">SecurityTypeShape</span><span class=\"o\">();</span>\n<span class=\"n\">Get__CompIntfc__C_CURRENCY_CD_CITypeShape</span> <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Get__CompIntfc__C_CURRENCY_CD_CITypeShape</span><span class=\"o\">();</span>\n\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"na\">Security</span><span class=\"o\">.</span><span class=\"na\">UsernameToken</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">UsernameTokenTypeShape</span><span class=\"o\">();</span>\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"na\">Security</span><span class=\"o\">.</span><span class=\"na\">UsernameToken</span><span class=\"o\">.</span><span class=\"na\">Username</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">UsernameTypeShape</span><span class=\"o\">();</span>\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"na\">Security</span><span class=\"o\">.</span><span class=\"na\">UsernameToken</span><span class=\"o\">.</span><span class=\"na\">Password</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PasswordTypeShape</span><span class=\"o\">();</span>\n\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"na\">Security</span><span class=\"o\">.</span><span class=\"na\">UsernameToken</span><span class=\"o\">.</span><span class=\"na\">Username</span><span class=\"o\">.</span><span class=\"na\">Value</span> <span class=\"o\">=</span> <span class=\"n\">ConfigurationManager</span><span class=\"o\">.</span><span class=\"na\">AppSettings</span><span class=\"o\">[</span><span class=\"s\">&quot;PeopleSoftUserName&quot;</span><span class=\"o\">];</span>\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"na\">Security</span><span class=\"o\">.</span><span class=\"na\">UsernameToken</span><span class=\"o\">.</span><span class=\"na\">Password</span><span class=\"o\">.</span><span class=\"na\">Value</span> <span class=\"o\">=</span> <span class=\"n\">ConfigurationManager</span><span class=\"o\">.</span><span class=\"na\">AppSettings</span><span class=\"o\">[</span><span class=\"s\">&quot;PeopleSoftPassword&quot;</span><span class=\"o\">];</span>\n\n<span class=\"n\">type</span><span class=\"o\">.</span><span class=\"na\">CURRENCY_CD</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">CURRENCY_CDTypeShape</span><span class=\"o\">();</span>\n<span class=\"n\">type</span><span class=\"o\">.</span><span class=\"na\">CURRENCY_CD</span><span class=\"o\">.</span><span class=\"na\">Value</span> <span class=\"o\">=</span> <span class=\"n\">currencyCode</span><span class=\"o\">;</span> <span class=\"c1\">//required parameter for this Get method</span>\n\n<span class=\"n\">Get__CompIntfc__C_CURRENCY_CD_CIResponseTypeShape</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"na\">Get__CompIntfc__C_CURRENCY_CD_CI</span><span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">);</span>\n</pre></div>\n</div><p>The response now holds the SOAP response from the web service call.</p>\n<p>Note: You might run into a known problem in XmlSerializer Code Generation component: it cannot handle some cases of nested unbounded elements.  The Object Model it creates is not valid: user cannot use it to produce xml messages.</p>\n<p>Unfortunately to fix this you have to edit your schema to make sure that all array-like constructs will be handled properly.  See website for the rest of the problem description and hack fix: <a class=\"reference external\" href=\"http://social.msdn.microsoft.com/forums/en-US/asmxandxml/thread/e33305c3-b5f6-4922-8a3f-df202088d25a'\">Unable to generate a temporary class</a>.</p>\n", 
      "date_updated": "2011-04-13 22:48:25", 
      "demo": "", 
      "markup": "r", 
      "title": "Using wsdl to hit PeopleSoft service in .NET", 
      "source_path": "", 
      "collection": 1, 
      "summary": "One of the applications I am testing deals a lot with finance information. However, since most of the data is stored in a remote database, I can't collect or check all the data I want to. We only store a fraction of this information in our schema. I had the wsdl files from the finance department in order to make web service calls.  Here's how I did it.\r\n", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-05-27 10:05:17", 
       
      "tags": ".net csharp webservice wsdl"
    }
  }, 
  {
    "pk": 253, 
    "model": "blog.article", 
    "fields": {
      "body": "<h3>Experiment</h3>\r\n\r\nMy primitive experiment was to create two different Java programs where I kept declaring the variable in one and where I declared it once and then assigned in multiple times in another.\r\n\r\n<code class=\"java\">\r\nclass TestDeclareOnce {\r\n    public static void main(String[] args) {\r\n\tint x;\r\n\tfor (int i = 0; i < Integer.parseInt(args[0]); ++i) {\r\n\t    x = i;\r\n\t}\r\n    }\r\n}\r\n</code>\r\n\r\n<code class=\"java\">\r\nclass TestDeclareMany {\r\n    public static void main(String[] args) {\r\n\tfor (int i = 0; i < Integer.parseInt(args[0]); ++i) {\r\n\t    int x = i;\r\n\t}\r\n    }\r\n}\r\n</code>\r\n\r\nAnd run like so:\r\n\r\n<code class=\"bash\">\r\njava TestDeclareOnce [num-times-to-loop]\r\n</code>\r\n\r\nI wrote similar versions for java.util.List's, trying to determine whether or not constructing and assigning a larger object would change the pattern or not.  Of course, the declaration of an object is only a reference to somewhere in the heap, so I'm not sure what I was expecting, but I tried it all the same.  Those classes were very congruent in form to the first two, differing in this form:\r\n\r\n<code class=\"java\">\r\nList list = new ArrayList(i);\r\n</code>\r\n\r\nOne of my initial theories was that the Java compiler would optimize the difference away, making the byte code the same.  I diff'ed the resultant 2 bytecodes, however, and they are indeed different.\r\n\r\nSo, I instead ran these a few times and tried to determine the difference in time to completion.  I used the Unix 'time' function to record running time.  Who knows how accurate that is, but it was handy at the moment.\r\n\r\n<h3>Results</h3>\r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/LvQyLtgitOy4XVWZYjX7LQ?feat=embedwebsite\"><img src=\"http://lh6.ggpht.com/_5XZCKcD6--c/Sp6-v4GovRI/AAAAAAAAIWg/KlHJpd4HQsI/s400/VarDeclarationSpeedResults.png\" /></a>\r\n<br />\r\nI didn't run this test many times and look for the average or mean, so there are some outliers here.  But, I think there's a fairly obvious, if not conclusive, pattern.  Defining a variable outside the loop makes a bigger difference the more times you loop.  Even then, some of the time the results are very close or even contradict the previous statement.  Data sets used here weren't very large either, so the difference is less drastic.  \r\n\r\nThe conclusion?  It's not going to make a big difference whether you declare your variable inside or outside the loop when dealing with a small number of loop iterations.  Here, small has been demonstrated to be up to 100 million.  There may be some situations in which it matters more.  What has been your experience?", 
      "date_published": "2009-09-02 12:52:24", 
      "image_path": null, 
      "title_slug": "variable-declaration-performance", 
      "rendered_body": "<h3>Experiment</h3>\r\n\r\nMy primitive experiment was to create two different Java programs where I kept declaring the variable in one and where I declared it once and then assigned in multiple times in another.\r\n\r\n<code class=\"java\">\r\nclass TestDeclareOnce {\r\n    public static void main(String[] args) {\r\n\tint x;\r\n\tfor (int i = 0; i < Integer.parseInt(args[0]); ++i) {\r\n\t    x = i;\r\n\t}\r\n    }\r\n}\r\n</code>\r\n\r\n<code class=\"java\">\r\nclass TestDeclareMany {\r\n    public static void main(String[] args) {\r\n\tfor (int i = 0; i < Integer.parseInt(args[0]); ++i) {\r\n\t    int x = i;\r\n\t}\r\n    }\r\n}\r\n</code>\r\n\r\nAnd run like so:\r\n\r\n<code class=\"bash\">\r\njava TestDeclareOnce [num-times-to-loop]\r\n</code>\r\n\r\nI wrote similar versions for java.util.List's, trying to determine whether or not constructing and assigning a larger object would change the pattern or not.  Of course, the declaration of an object is only a reference to somewhere in the heap, so I'm not sure what I was expecting, but I tried it all the same.  Those classes were very congruent in form to the first two, differing in this form:\r\n\r\n<code class=\"java\">\r\nList list = new ArrayList(i);\r\n</code>\r\n\r\nOne of my initial theories was that the Java compiler would optimize the difference away, making the byte code the same.  I diff'ed the resultant 2 bytecodes, however, and they are indeed different.\r\n\r\nSo, I instead ran these a few times and tried to determine the difference in time to completion.  I used the Unix 'time' function to record running time.  Who knows how accurate that is, but it was handy at the moment.\r\n\r\n<h3>Results</h3>\r\n\r\n<a href=\"http://picasaweb.google.com/lh/photo/LvQyLtgitOy4XVWZYjX7LQ?feat=embedwebsite\"><img src=\"http://lh6.ggpht.com/_5XZCKcD6--c/Sp6-v4GovRI/AAAAAAAAIWg/KlHJpd4HQsI/s400/VarDeclarationSpeedResults.png\" /></a>\r\n<br />\r\nI didn't run this test many times and look for the average or mean, so there are some outliers here.  But, I think there's a fairly obvious, if not conclusive, pattern.  Defining a variable outside the loop makes a bigger difference the more times you loop.  Even then, some of the time the results are very close or even contradict the previous statement.  Data sets used here weren't very large either, so the difference is less drastic.  \r\n\r\nThe conclusion?  It's not going to make a big difference whether you declare your variable inside or outside the loop when dealing with a small number of loop iterations.  Here, small has been demonstrated to be up to 100 million.  There may be some situations in which it matters more.  What has been your experience?", 
      "date_updated": "2010-05-04 12:25:57", 
      "demo": null, 
      "markup": "h", 
      "title": "Variable Declaration Performance", 
      "source_path": null, 
      "collection": 1, 
      "summary": "Often when coding, we use a single local variable multiple times, overwriting the value many times.  It is considered good practice to move the variable out of the looping overwrite and into the smallest scope of code that is run once.  But, this makes the code a little bit less concise.  So, how useful is it, anyway?  I wanted to run a few little tests and see if there's really a noticable difference in performance.  \r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2009-09-02 12:57:18", 
       
      "tags": "java performance"
    }
  }, 
  {
    "pk": 105, 
    "model": "blog.article", 
    "fields": {
      "body": "As awesome as Linux is, I still have moments where I want something from the Windows world.  Shy of putting a whole dual-booted partition on my harddrive, I am doing the virtual machine gig.  I have tried VMWare before, but have just found the whole experience rather clunky.  I even found VirtualPC (running on Windows) more pleasing.  Another big kicker with VM's is performace -- I can't ever seem to get even comparable performance from a VM.  Several of my coworkers report, however, that they are please with the performance of Sun's VirtualBox.  I, therefore, am giving it a try.\r\n\r\nFirst, download the package:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install virtualbox-ose\r\n</code>\r\n\r\n(This fetched version 1.5x for me, but 2.0 is available as well.)\r\n\r\nDetermine your kernel version:\r\n\r\n<code class=\"bash\">\r\nuname -r\r\n# for me, yields: 2.6.24-19-generic\r\n</code>\r\n\r\nMatch a VirtualBox kernel driver to your version:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install virtualbox-ose-modules-2.6.24-19-generic \r\n</code>\r\n\r\nVirtualBox has set up a user group, verified here:\r\n\r\n<code class=\"bash\">\r\ngrep vboxusers /etc/group\r\n</code>\r\n\r\nThen add your user to the user group for the kernel driver:\r\n\r\n<code class=\"bash\">\r\nsudo usermod -a -G vboxusers jtsnake\r\n</code>\r\n\r\nThe -a option adds the group as a supplementary group and doesn't replace your primary group.  \r\n\r\nVerify that the group was added to your user:\r\n\r\n<code class=\"bash\">\r\nid jtsnake\r\n</code>\r\n\r\nLogout to allow the group addition to be activated.\r\n\r\nNow startup VirtualBox and let it walk you through the several-step process of creating a new VM.  I'm set mine up for WindowsXP, on a growable virtual drive, starting at 20 GB.  \r\n\r\nOnce it's all setup in VirtualBox, insert your alternative-OS CD, select your newly-created VM, and press Start.  Under the Devices menu, be sure to mount your CD.  By now, you probably have gotten an error message about the absence of bootable media.  Restart the VM and press F12 a couple seconds after startup to get the boot options.  Select option 3 for CD-ROM, and you should be in business to start installing files to the virtual drive.\r\n\r\nNow your virtual life is even more virtual, virtually.", 
      "date_published": "2008-11-19 14:58:00", 
      "image_path": null, 
      "title_slug": "virtual-box-ubuntu-linux", 
      "rendered_body": "As awesome as Linux is, I still have moments where I want something from the Windows world.  Shy of putting a whole dual-booted partition on my harddrive, I am doing the virtual machine gig.  I have tried VMWare before, but have just found the whole experience rather clunky.  I even found VirtualPC (running on Windows) more pleasing.  Another big kicker with VM's is performace -- I can't ever seem to get even comparable performance from a VM.  Several of my coworkers report, however, that they are please with the performance of Sun's VirtualBox.  I, therefore, am giving it a try.\r\n\r\nFirst, download the package:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install virtualbox-ose\r\n</code>\r\n\r\n(This fetched version 1.5x for me, but 2.0 is available as well.)\r\n\r\nDetermine your kernel version:\r\n\r\n<code class=\"bash\">\r\nuname -r\r\n# for me, yields: 2.6.24-19-generic\r\n</code>\r\n\r\nMatch a VirtualBox kernel driver to your version:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install virtualbox-ose-modules-2.6.24-19-generic \r\n</code>\r\n\r\nVirtualBox has set up a user group, verified here:\r\n\r\n<code class=\"bash\">\r\ngrep vboxusers /etc/group\r\n</code>\r\n\r\nThen add your user to the user group for the kernel driver:\r\n\r\n<code class=\"bash\">\r\nsudo usermod -a -G vboxusers jtsnake\r\n</code>\r\n\r\nThe -a option adds the group as a supplementary group and doesn't replace your primary group.  \r\n\r\nVerify that the group was added to your user:\r\n\r\n<code class=\"bash\">\r\nid jtsnake\r\n</code>\r\n\r\nLogout to allow the group addition to be activated.\r\n\r\nNow startup VirtualBox and let it walk you through the several-step process of creating a new VM.  I'm set mine up for WindowsXP, on a growable virtual drive, starting at 20 GB.  \r\n\r\nOnce it's all setup in VirtualBox, insert your alternative-OS CD, select your newly-created VM, and press Start.  Under the Devices menu, be sure to mount your CD.  By now, you probably have gotten an error message about the absence of bootable media.  Restart the VM and press F12 a couple seconds after startup to get the boot options.  Select option 3 for CD-ROM, and you should be in business to start installing files to the virtual drive.\r\n\r\nNow your virtual life is even more virtual, virtually.", 
      "date_updated": "2010-05-04 12:25:57", 
      "demo": null, 
      "markup": "h", 
      "title": "Virtual Box on Ubuntu Linux", 
      "source_path": null, 
      "collection": 1, 
      "summary": "As awesome as Linux is, I still have moments where I want something from the Windows world.  Shy of putting a whole dual-booted partition on my harddrive, I am doing the virtual machine gig.  I have tried VMWare before, but have just found the whole experience rather clunky.  I even found VirtualPC (running on Windows) more pleasing.  Another big kicker with VM's is performace -- I can't ever seem to get even comparable performance from a VM.  Several of my coworkers report, however, that they are please with the performance of Sun's VirtualBox.  I, therefore, am giving it a try.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 14:58:47", 
       
      "tags": "linux ubuntu virtualbox vm"
    }
  }, 
  {
    "pk": 109, 
    "model": "blog.article", 
    "fields": {
      "body": "It is one of the nicest things to be able to work remotely.  Almost all my jobs have allowed this.  My current job allows it on a limited basis as well.  It's even more attractive an option now that I have a nice desk chair at home, for which I currently long, because I'm currently typing up this post from a 2nd grader mini-chair while I wait for my lovely wife, April.\r\n\r\nCurrently, in order to work from home, I'm required to connect to the VPN or virtual private network.  This effectively puts me on the network at work as though I was there.  On Windows, I used the Cisco client for VPN.  On Linux, I also use a Cisco client via the shell.\r\n\r\nTo download the client:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install vpnc\r\n</code>\r\n\r\nThis install comes with an example config file\r\n\r\n<code class=\"bash\">\r\n# /etc/vpnc/example.conf\r\nIPSec gateway < gateway >\r\nIPSec ID < group-id >\r\nIPSec secret < group-psk >\r\nIKE Authmode hybrid\r\nXauth username < username >\r\nXauth password < password >\r\n</code>\r\n\r\nCopy it so you can do with it as you please:\r\n\r\n<code class=\"bash\">\r\ncd /etc/vpnc; sudo cp example.conf myconfig.conf\r\n</code>\r\n\r\nEdits to the config file will be according to the spec of your own network.  In my case, I set an IP address for the gateway, specify the group-id, the group-psk, get rid of the 'IKE Authmod hybrid' line and remove the '< password >' so that it prompts for the password upon connecting.  For me, the gateway was different on the outside of the network compared to VPN'ing inside the network.  Ensure that you have an IP or alias that is recognized from where you're trying to connect.\r\n\r\nTo connect to the VPN, append your command with the name of the config file you wish to use:\r\n\r\n<code class=\"bash\">\r\nsudo vpnc myconfig\r\n</code>\r\n\r\nNote, you can execute this from any directory in your path and not have to use the absolute path of the config file.\r\n\r\nTo disconnect, use this command, which effectively just kills the process -- nice!\r\n\r\n<code class=\"bash\">\r\nsudo vpnc-disconnect\r\n</code>\r\n\r\nBut whatever you do, just <a href=\"http://www.aprilandjake.com/content/intellij-8m1-ubuntu-8-ultimate-pleasure\" />enjoy the pleasure</a> of developing with pleasure on the OS of pleasure in the chair of pleasure.  And they call this work!!\r\n\r\n<h4>Update</h4>\r\n\r\nLately I've had problems with vpnc on Jaunty.  I keep getting this error when I try to start it up:\r\n\r\n<code class=\"bash\">\r\nresolvconf: Error: /etc/resolv.conf must be a symlink\r\n</code>\r\n\r\nMy buddy Steve gave me this solution:\r\n\r\n<code class=\"bash\">\r\nsudo vpnc-disconnect\r\nsudo ln -s /etc/resolvconf/run/resolv.conf /etc/resolv.conf\r\n</code>\r\n\r\nTry again, and you should be good.  This problem keeps coming back, however.  You might want to try writing a script to do it for you.  My friend Jeremy pointed me to <a href=\"https://bugs.launchpad.net/ubuntu/+source/network-manager/+bug/324233\">this</a>.", 
      "date_published": "2008-11-23 15:03:11", 
      "image_path": null, 
      "title_slug": "vpn-ubuntu-linux", 
      "rendered_body": "It is one of the nicest things to be able to work remotely.  Almost all my jobs have allowed this.  My current job allows it on a limited basis as well.  It's even more attractive an option now that I have a nice desk chair at home, for which I currently long, because I'm currently typing up this post from a 2nd grader mini-chair while I wait for my lovely wife, April.\r\n\r\nCurrently, in order to work from home, I'm required to connect to the VPN or virtual private network.  This effectively puts me on the network at work as though I was there.  On Windows, I used the Cisco client for VPN.  On Linux, I also use a Cisco client via the shell.\r\n\r\nTo download the client:\r\n\r\n<code class=\"bash\">\r\nsudo apt-get install vpnc\r\n</code>\r\n\r\nThis install comes with an example config file\r\n\r\n<code class=\"bash\">\r\n# /etc/vpnc/example.conf\r\nIPSec gateway < gateway >\r\nIPSec ID < group-id >\r\nIPSec secret < group-psk >\r\nIKE Authmode hybrid\r\nXauth username < username >\r\nXauth password < password >\r\n</code>\r\n\r\nCopy it so you can do with it as you please:\r\n\r\n<code class=\"bash\">\r\ncd /etc/vpnc; sudo cp example.conf myconfig.conf\r\n</code>\r\n\r\nEdits to the config file will be according to the spec of your own network.  In my case, I set an IP address for the gateway, specify the group-id, the group-psk, get rid of the 'IKE Authmod hybrid' line and remove the '< password >' so that it prompts for the password upon connecting.  For me, the gateway was different on the outside of the network compared to VPN'ing inside the network.  Ensure that you have an IP or alias that is recognized from where you're trying to connect.\r\n\r\nTo connect to the VPN, append your command with the name of the config file you wish to use:\r\n\r\n<code class=\"bash\">\r\nsudo vpnc myconfig\r\n</code>\r\n\r\nNote, you can execute this from any directory in your path and not have to use the absolute path of the config file.\r\n\r\nTo disconnect, use this command, which effectively just kills the process -- nice!\r\n\r\n<code class=\"bash\">\r\nsudo vpnc-disconnect\r\n</code>\r\n\r\nBut whatever you do, just <a href=\"http://www.aprilandjake.com/content/intellij-8m1-ubuntu-8-ultimate-pleasure\" />enjoy the pleasure</a> of developing with pleasure on the OS of pleasure in the chair of pleasure.  And they call this work!!\r\n\r\n<h4>Update</h4>\r\n\r\nLately I've had problems with vpnc on Jaunty.  I keep getting this error when I try to start it up:\r\n\r\n<code class=\"bash\">\r\nresolvconf: Error: /etc/resolv.conf must be a symlink\r\n</code>\r\n\r\nMy buddy Steve gave me this solution:\r\n\r\n<code class=\"bash\">\r\nsudo vpnc-disconnect\r\nsudo ln -s /etc/resolvconf/run/resolv.conf /etc/resolv.conf\r\n</code>\r\n\r\nTry again, and you should be good.  This problem keeps coming back, however.  You might want to try writing a script to do it for you.  My friend Jeremy pointed me to <a href=\"https://bugs.launchpad.net/ubuntu/+source/network-manager/+bug/324233\">this</a>.", 
      "date_updated": "2010-05-04 12:25:57", 
      "demo": null, 
      "markup": "h", 
      "title": "VPN on Ubuntu Linux", 
      "source_path": null, 
      "collection": 1, 
      "summary": "It is one of the nicest things to be able to work remotely.  Almost all my jobs have allowed this.  My current job allows it on a limited basis as well.  It's even more attractive an option now that I have a nice desk chair at home, for which I currently long, because I'm currently typing up this post from a 2nd grader mini-chair while I wait for my lovely wife, April.\r\n\r\nRemote working goodness is just a few shell commands away via Cisco VPN in Linux!", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 15:04:11", 
       
      "tags": "linux ubuntu vpn"
    }
  }, 
  {
    "pk": 344, 
    "model": "blog.article", 
    "fields": {
      "body": "Disable Internet Exporer 8's automatic proxy\r\n--------------------------------------------\r\n\r\nIf you don't do this, you will find that webdav on Windows 7 is extremely slow.  So slow, in fact, that it crashed Windows Explorer several times as I tried connecting to webdav and got the dreaded \"(Not Responding)\" text multiple times.\r\n\r\nTo disable, open up IE, and pull this action:\r\n\r\n1. Tools menu > Internet Options > Connections tab > LAN Settings button\r\n\r\n2. Uncheck \"Automatically detect settings\" box\r\n\r\nThis should noticeably improve your speed.\r\n\r\n\r\nOther Troubled-shots\r\n--------------------\r\n\r\nI tried a few other things that may/not help you in your quest for webdav'ery on Windows:\r\n\r\n* Allow for `basic authentication via webdav <http://support.microsoft.com/kb/841215>`_.\r\n\r\n* Use the `Oxygen <http://www.oxygenxml.com/download.html>`_ webdav interface.  It's faster that the Windows Explorer method (with auto proxy still enabled), but limited in its function.  You can't copy folders of things out of or into webdav.\r\n\r\n\r\nMake a webdav connection\r\n------------------------\r\n\r\nNow that you hopefully have your enemies to progress subdued, it's time to just make the connection.  The favored Windows 7 method is adding a network place:\r\n\r\n1. Start menu > Computer \r\n\r\n2. Right click in main window area > Add a network location\r\n\r\n3. Next > Next > Enter URL > Enter descriptive name > [enter credentials] > Finish\r\n\r\nNow your connection should be saved for the next time you log into your computer and are ready to face the perils of webdav once more.", 
      "date_published": "2010-10-05 12:58:20", 
      "image_path": "", 
      "title_slug": "webdav-windows-7", 
      "rendered_body": "<div class=\"section\" id=\"disable-internet-exporer-8-s-automatic-proxy\">\n<h1>Disable Internet Exporer 8's automatic proxy</h1>\n<p>If you don't do this, you will find that webdav on Windows 7 is extremely slow.  So slow, in fact, that it crashed Windows Explorer several times as I tried connecting to webdav and got the dreaded &quot;(Not Responding)&quot; text multiple times.</p>\n<p>To disable, open up IE, and pull this action:</p>\n<ol class=\"arabic simple\">\n<li>Tools menu &gt; Internet Options &gt; Connections tab &gt; LAN Settings button</li>\n<li>Uncheck &quot;Automatically detect settings&quot; box</li>\n</ol>\n<p>This should noticeably improve your speed.</p>\n</div>\n<div class=\"section\" id=\"other-troubled-shots\">\n<h1>Other Troubled-shots</h1>\n<p>I tried a few other things that may/not help you in your quest for webdav'ery on Windows:</p>\n<ul class=\"simple\">\n<li>Allow for <a class=\"reference external\" href=\"http://support.microsoft.com/kb/841215\">basic authentication via webdav</a>.</li>\n<li>Use the <a class=\"reference external\" href=\"http://www.oxygenxml.com/download.html\">Oxygen</a> webdav interface.  It's faster that the Windows Explorer method (with auto proxy still enabled), but limited in its function.  You can't copy folders of things out of or into webdav.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"make-a-webdav-connection\">\n<h1>Make a webdav connection</h1>\n<p>Now that you hopefully have your enemies to progress subdued, it's time to just make the connection.  The favored Windows 7 method is adding a network place:</p>\n<ol class=\"arabic simple\">\n<li>Start menu &gt; Computer</li>\n<li>Right click in main window area &gt; Add a network location</li>\n<li>Next &gt; Next &gt; Enter URL &gt; Enter descriptive name &gt; [enter credentials] &gt; Finish</li>\n</ol>\n<p>Now your connection should be saved for the next time you log into your computer and are ready to face the perils of webdav once more.</p>\n</div>\n", 
      "date_updated": "2010-10-07 12:30:55", 
      "demo": "", 
      "markup": "r", 
      "title": "WebDAV on Windows 7", 
      "source_path": "", 
      "collection": 1, 
      "summary": "The spectre of webdav has again appeared before me.  This time's it's on Windows.  My last experience on webdav was in the dojo of Linux.  Now, my Linuxy nun chucks aren't quite as deadly.  I must tame this beast.  Here's a Windows-webdav must.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-10-05 12:59:04", 
       
      "tags": "marklogic webdav windows7"
    }
  }, 
  {
    "pk": 330, 
    "model": "blog.article", 
    "fields": {
      "body": "You also need to override hashCode(), because HashSet first compares hashCode(), and then equals(). In other words, two objects which are equal() but have different hashCode()s will never match. Therefore, contains() never returns true.", 
      "date_published": "2010-08-02 12:15:40", 
      "image_path": "", 
      "title_slug": "whats-really-going-hashsetcontains-method", 
      "rendered_body": "You also need to override hashCode(), because HashSet first compares hashCode(), and then equals(). In other words, two objects which are equal() but have different hashCode()s will never match. Therefore, contains() never returns true.", 
      "date_updated": "2010-08-06 13:04:12", 
      "demo": "", 
      "markup": "h", 
      "title": "What's REALLY going on in that HashSet.contains() method", 
      "source_path": "", 
      "collection": 1, 
      "summary": "We all know that contains() is a handy way to check for the presence of an item in a HashSet. The java docs state: \"Returns true if this collection contains the specified element. More formally, returns true if and only if this collection contains at least one element e such that (o==null ? e==null : o.equals(e)).\" So, you just need to override equals() the way you want, and everything's hunky-dory, right? Wrong!", 
      "source": "", 
      "user": 6, 
      "active": true, 
      "date_created": "2010-08-02 12:20:38", 
       
      "tags": "java"
    }
  }, 
  {
    "pk": 98, 
    "model": "blog.article", 
    "fields": {
      "body": "My friend Josh introduced me to a good little captcha for Django: <a href=\"http://django.agami.at/media/captcha/\">Captcha for Django 1.1</a>.  There are several other captchas out there: <a href=\"http://code.google.com/p/django-captcha/\">Djaptcha</a>, <a href=\"http://www.mysoftparade.com/blog/mathematical-captcha/\">MathCaptchaForm</a> and some good <a href=\"http://www.rkblog.rk.edu.pl/w/p/django-and-captcha-images/\">tutorials</a>.  But, I like this captcha solution for a couple reasons: \r\n- Josh suggested it, and let's face it, that carries a lot of weight. ;)\r\n- This solution jives well with ModelForm, which I use for all of my comment forms.  Most of the other code that I found was for forms.Form.\r\n- This solution favors composition over inheritance:  It is a form field instead of a subclass form type.\r\n\r\nYou can download the tarball <a href=\"http://django.agami.at/media/captcha/captcha.tar.gz\">here</a>.  Also available <a href=\"http://code.google.com/p/django-captchas/source/browse/trunk/captchas/imagecaptcha.py\">here</a>.\r\n\r\nA short explanation of the file is available <a href=\"http://django.agami.at/media/captcha/\">here</a>.\r\n\r\nThe explanation prompts you to unload the tar into the django.contrib directory.  I'm thinking this is probably how things used to jive in Django Land, but I didn't put it there and just put it in my project.  site-packages might have been a better place.  \r\n\r\nYou can attach the captcha field to any model form by just including it in the class:\r\n\r\n<code class=\"python\">\r\nfrom django.newforms import ModelForm\r\nfrom aprilandjake.captcha import CaptchaField\r\n\r\nfrom aprilandjake.blog.models import EntryComment\r\n\t\r\nclass EntryCommentForm(ModelForm):\r\n\tclass Meta:\r\n\t\tmodel = EntryComment\r\n\t\texclude = ('active', 'entry')\r\n\tcaptcha = CaptchaField(label='Captcha', options={'fgcolor': '#0099ff', 'bgcolor': '#efefef' } )\r\n</code>\r\n\r\nAlso seen are just a few of the many options for the CaptchaField.  You can apply these for every captcha field you write or globally in settings.py:\r\n\r\n<code class=\"python\">\r\nCAPTCHA = {\r\n        'fgcolor': '#000000', # default:  '#000000' (color for characters and lines)\r\n        'bgcolor': '#ffffff', # default:  '#ffffff' (color for background)\r\n        'captchas_dir': None, # default:  None (uses MEDIA_ROOT/captchas)\r\n        'upload_url': None, # default:  None (uses MEDIA_URL/captchas)\r\n        'captchaconf_dir': None, # default:  None  (uses the directory of the captcha module)\r\n        'auto_cleanup': True, # default:  True (delete all captchas older than 20 minutes)\r\n        'minmaxvpos': (8, 15), # default:  (8, 15) (vertical position of characters)\r\n        'minmaxrotations': (-30,31), # default:  (-30,31) (rotate characters)\r\n        'minmaxheight': (30,45), # default:  (30,45) (font size)\r\n        'minmaxkerning': (-2,1), # default:  (-2,1) (space between characters)\r\n        'alphabet': \"abdeghkmnqrt2346789AEFGHKMNRT\", # default:  \"abdeghkmnqrt2346789AEFGHKMNRT\"\r\n        'num_lines': 1, # default: 1\r\n        'line_weight': 3, # default: 3\r\n        'imagesize': (190,55), # default: (200,60)\r\n        'iterations': 1, # default 1 (change to a high value (200 is a good choice)\r\n                         # for trying out new settings\r\n                         # WARNING: changing this value will lead to as many images in your\r\n                         # \"captchas\" directory!)\r\n        }\r\n</code>\r\n\r\nWhen I implemented this for aprilandjake.com, Josh helped me out and showed me where the code needed to be tweaked:  On line 174:\r\n\r\n<code class=\"python\">\r\ndef value_from_datadict(self, data, name):\r\n</code>\r\n\r\nwas changed to\r\n\r\n<code class=\"python\">\r\ndef value_from_datadict(self, data, files, name):\r\n</code>\r\n\r\nVoila!  It worked like a charm.\r\n\r\nBut then I uploaded it to my server and tried it out -- no dice.  I couldn't figure it out.  A couple days later, I was determined to find the problem...  After a frustrating while and some good 'ol debugging print statements, I determined that the problem was that because I put my project under version control and didn't bother to remove .svn folders from production, they were being pulled in by the captcha code, thinking it was an option for a font in the 'fonts' subdirectory of the module.  To get around the problem, I needed to change the code around line 110 from:\r\n\r\n<code class=\"python\">\r\nfontdir = path.join(cs['captchaconf_dir'], 'fonts')\r\nfontnames = [path.join(fontdir, x) for x in listdir(fontdir) ]\r\n</code>\r\n\r\nto\r\n\r\n<code class=\"python\">\r\nimport glob\r\n/** ... */\r\nfontdir = path.join(cs['captchaconf_dir'], 'fonts', '*.ttf')\r\nfontnames = [path.join(fontdir, x) for x in glob.glob(fontdir) ]\r\n</code>\r\n\r\nUsing the wildcard *.ttf protected against using non-fonts in PIL as ImageFont objects.  listdir() doesn't support wildcards, so glob.glob() was required.\r\n\r\nTake that, spam!", 
      "date_published": "2008-08-26 14:47:44", 
      "image_path": null, 
      "title_slug": "will-captcha-block-spam", 
      "rendered_body": "My friend Josh introduced me to a good little captcha for Django: <a href=\"http://django.agami.at/media/captcha/\">Captcha for Django 1.1</a>.  There are several other captchas out there: <a href=\"http://code.google.com/p/django-captcha/\">Djaptcha</a>, <a href=\"http://www.mysoftparade.com/blog/mathematical-captcha/\">MathCaptchaForm</a> and some good <a href=\"http://www.rkblog.rk.edu.pl/w/p/django-and-captcha-images/\">tutorials</a>.  But, I like this captcha solution for a couple reasons: \r\n- Josh suggested it, and let's face it, that carries a lot of weight. ;)\r\n- This solution jives well with ModelForm, which I use for all of my comment forms.  Most of the other code that I found was for forms.Form.\r\n- This solution favors composition over inheritance:  It is a form field instead of a subclass form type.\r\n\r\nYou can download the tarball <a href=\"http://django.agami.at/media/captcha/captcha.tar.gz\">here</a>.  Also available <a href=\"http://code.google.com/p/django-captchas/source/browse/trunk/captchas/imagecaptcha.py\">here</a>.\r\n\r\nA short explanation of the file is available <a href=\"http://django.agami.at/media/captcha/\">here</a>.\r\n\r\nThe explanation prompts you to unload the tar into the django.contrib directory.  I'm thinking this is probably how things used to jive in Django Land, but I didn't put it there and just put it in my project.  site-packages might have been a better place.  \r\n\r\nYou can attach the captcha field to any model form by just including it in the class:\r\n\r\n<code class=\"python\">\r\nfrom django.newforms import ModelForm\r\nfrom aprilandjake.captcha import CaptchaField\r\n\r\nfrom aprilandjake.blog.models import EntryComment\r\n\t\r\nclass EntryCommentForm(ModelForm):\r\n\tclass Meta:\r\n\t\tmodel = EntryComment\r\n\t\texclude = ('active', 'entry')\r\n\tcaptcha = CaptchaField(label='Captcha', options={'fgcolor': '#0099ff', 'bgcolor': '#efefef' } )\r\n</code>\r\n\r\nAlso seen are just a few of the many options for the CaptchaField.  You can apply these for every captcha field you write or globally in settings.py:\r\n\r\n<code class=\"python\">\r\nCAPTCHA = {\r\n        'fgcolor': '#000000', # default:  '#000000' (color for characters and lines)\r\n        'bgcolor': '#ffffff', # default:  '#ffffff' (color for background)\r\n        'captchas_dir': None, # default:  None (uses MEDIA_ROOT/captchas)\r\n        'upload_url': None, # default:  None (uses MEDIA_URL/captchas)\r\n        'captchaconf_dir': None, # default:  None  (uses the directory of the captcha module)\r\n        'auto_cleanup': True, # default:  True (delete all captchas older than 20 minutes)\r\n        'minmaxvpos': (8, 15), # default:  (8, 15) (vertical position of characters)\r\n        'minmaxrotations': (-30,31), # default:  (-30,31) (rotate characters)\r\n        'minmaxheight': (30,45), # default:  (30,45) (font size)\r\n        'minmaxkerning': (-2,1), # default:  (-2,1) (space between characters)\r\n        'alphabet': \"abdeghkmnqrt2346789AEFGHKMNRT\", # default:  \"abdeghkmnqrt2346789AEFGHKMNRT\"\r\n        'num_lines': 1, # default: 1\r\n        'line_weight': 3, # default: 3\r\n        'imagesize': (190,55), # default: (200,60)\r\n        'iterations': 1, # default 1 (change to a high value (200 is a good choice)\r\n                         # for trying out new settings\r\n                         # WARNING: changing this value will lead to as many images in your\r\n                         # \"captchas\" directory!)\r\n        }\r\n</code>\r\n\r\nWhen I implemented this for aprilandjake.com, Josh helped me out and showed me where the code needed to be tweaked:  On line 174:\r\n\r\n<code class=\"python\">\r\ndef value_from_datadict(self, data, name):\r\n</code>\r\n\r\nwas changed to\r\n\r\n<code class=\"python\">\r\ndef value_from_datadict(self, data, files, name):\r\n</code>\r\n\r\nVoila!  It worked like a charm.\r\n\r\nBut then I uploaded it to my server and tried it out -- no dice.  I couldn't figure it out.  A couple days later, I was determined to find the problem...  After a frustrating while and some good 'ol debugging print statements, I determined that the problem was that because I put my project under version control and didn't bother to remove .svn folders from production, they were being pulled in by the captcha code, thinking it was an option for a font in the 'fonts' subdirectory of the module.  To get around the problem, I needed to change the code around line 110 from:\r\n\r\n<code class=\"python\">\r\nfontdir = path.join(cs['captchaconf_dir'], 'fonts')\r\nfontnames = [path.join(fontdir, x) for x in listdir(fontdir) ]\r\n</code>\r\n\r\nto\r\n\r\n<code class=\"python\">\r\nimport glob\r\n/** ... */\r\nfontdir = path.join(cs['captchaconf_dir'], 'fonts', '*.ttf')\r\nfontnames = [path.join(fontdir, x) for x in glob.glob(fontdir) ]\r\n</code>\r\n\r\nUsing the wildcard *.ttf protected against using non-fonts in PIL as ImageFont objects.  listdir() doesn't support wildcards, so glob.glob() was required.\r\n\r\nTake that, spam!", 
      "date_updated": "2010-05-04 12:25:57", 
      "demo": null, 
      "markup": "h", 
      "title": "Will a captcha block spam?", 
      "source_path": null, 
      "collection": 1, 
      "summary": "I really need an answer to this question.  Why?  Because I was, until recently, on the verge of shutting down the comments on the site because of the load of blog spam that I was receiving.  It was insufferable.  But, luckily, Django came to my rescue again and made a potential solution very pain-free -- except for one problem.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2008-12-23 14:48:25", 
       
      "tags": "captcha django pil python spam-filter"
    }
  }, 
  {
    "pk": 349, 
    "model": "blog.article", 
    "fields": {
      "body": "The good things\r\n---------------\r\n\r\n- **No Synergy** - Synergy can be a really great tool, but the reason I was using it was because I never really chose to get rid of Windows.  The reasons are mostly app-related: Outlook, Powerpoint, and Photoshop.  Now, because I don't use Synergy, I don't have to log off two computers, I don't need as many monitors, I have sound for all my running apps, I don't have to use the cloud to transfer files between apps (though Dropbox is great) and I take all my tools with me on my dev laptop.  I don't need two machines.  \r\n\r\n- **No VMs** - This good thing is closely tied to \"no Synergy\".  I have used VMware and VirtualBox for essentially the same purpose: running apps that weren't available to me on Linux -- most notably here, Internet Explorer.  My main beef with VMs has been performance -- they're generally resource hogs and slow.\r\n\r\n- **Photoshop** - This is a wonderful tool that I am way more adept at using, especially compared the Linux \"equivalent\", Gimp.  \r\n\r\n- **Outlook** - I am not forced into the Outlook web client any more, which is dumbed down for the browser and supremely dumbed down for anything except Internet Explorer.  I can easily sync my mail, contacts, and calendar with the rest of the organization.  This is huge.\r\n\r\n- **Fast startup** - When I used to boot both my Windows and Lucid Lynx machines, they would get to login at almost the exact same time.\r\n\r\n- **Sleep works** - This is closely tied to the fast startup reason -- I have fewer shutdowns and startups during the day because sleep actually works.  \r\n\r\n- **Symlinks** - I remember one of my main reasons for going to Linux in the first place was symlinks.  Seriously.  Now, since Vista, the Windows mklink command gives us the same power.  This is fantastic and makes me smile broadly.\r\n\r\n- **Pleasing UI** - The Windows 7 UI is very smooth and nice-looking.  The taskbar and startbar pinning of apps is way convenient.  The flyout menus for docs opened with said apps makes recent documents very reachable.  The window grouping and previews keep piles of windows sectioned off well.  There are a couple things that I miss that from the Compiz Fusion windows manager enhancements, such as tiling the windows so they're all visible, ala Mac, and multiple desktops.  \r\n\r\n- **Windows Search works** - Ok, not as good as grep or find, nor is it from the command line, but it has vastly improved.  It sits right on the Windows Explorer window, so it's immediately contextual, and it's fairly speedy.  \r\n\r\n- **Internet Explorer** - This browser is no good to anyone, unless you get a cut of all the OEM install $$.  But, if you are forced under threat of job loss to code to support it, it's way nice to be able to boot it for some cross-browser testing and not require a VM.  \r\n\r\n- **Audio Volume** - I think this must be a driver support issue, but I can crank out so much more volume on my laptop speakers using Windows compared to Ubuntu.\r\n\r\n- **Plug and Play** - I get a seamless experience in docking and undocking -- although, I've had it freeze up on me a few times to.  I automatically get external displays and projectors detected.  The resolution is correct.  This is a huge plus around the office when I take my lappy from my desk docking station to a mtg and then quickly present something on a projector.\r\n\r\n- **Num Pad** - This was a joke in Ubuntu.  In Windows 7, I can at least rely on my number pad always working. \r\n\r\n- **WebDAV is a little better** - WebDAV stinks in my experience with MarkLogic, but at least in Windows the experience is a little bit better from a stability, read, copy, and UI experience.\r\n\r\n- **Steam** - After a good day of dev, and if the eyes aren't yet too strained, it's time for some Monkey Island remakes on Steam.  When is this coming to Linux?! :)\r\n\r\n\r\nThe bad things\r\n--------------\r\n\r\n- **Michael Jackson** - or Weird Al.  Oh, wait, that's Fat.\r\n\r\n- **Filesystem speed** - Yeah, NTFS shows its age.  Filesystem reads and writes seem quite a bit slower.  I also spend a lot of time in IntelliJ, where file opening and tab switching is also noticably slower.  \r\n\r\n- **Mouse time** - I'm handling the mouse a LOT more.  My superuser status is threatened with the lack of keyboard koolness here.\r\n\r\n- **Terminal** - Er, command line.  And PowerShell?  Not worthy of the name.  In fact, it's sometimes less powerful than vanilla cmd at times.\r\n\r\n- **Home directory layout** - Deep in the directory structure.  And spaces -- Ick!\r\n\r\n- **Backslashes** - Eeeegggh...\r\n\r\n- **Social acceptance** - I got thrown out of a few geek clubs.  But, on the bright side, I can communicate and debug and get support from more users around the office because most of them use Windows as well.\r\n\r\n- **No gnome-do** - I love this app.  The others that are available aren't nearly as elegant.  Start menu app search isn't bad, but it doesn't have all the other plugins of gnome-do.\r\n\r\n- **Price** - I can't get the latest release for free.\r\n\r\n- **File printing** - Print to PDF not built in\r\n\r\n- **No sudo** - Super user process contains more annoying dialogs and is harder to get to w/out re-opening applications like cmd.\r\n\r\n\r\nIt's a tie\r\n----------\r\n\r\n- **Wireless** - Wireless networking setup is about as streamlined in each.  I like the UI a bit better in Windows.  I have full control over how I join networks in Ubuntu, but then again I don't have to specify everything everytime on Windows.  Of course, now I'm having a problem when trying to connect to a wireless network on a different domain on my Windows box, and it's giving me severe headaches.  It's like software is built of twine or something.\r\n", 
      "date_published": "2010-11-01 11:45:50", 
      "image_path": "", 
      "title_slug": "windows-7-dev-environment", 
      "rendered_body": "The good things\r\n---------------\r\n\r\n- **No Synergy** - Synergy can be a really great tool, but the reason I was using it was because I never really chose to get rid of Windows.  The reasons are mostly app-related: Outlook, Powerpoint, and Photoshop.  Now, because I don't use Synergy, I don't have to log off two computers, I don't need as many monitors, I have sound for all my running apps, I don't have to use the cloud to transfer files between apps (though Dropbox is great) and I take all my tools with me on my dev laptop.  I don't need two machines.  \r\n\r\n- **No VMs** - This good thing is closely tied to \"no Synergy\".  I have used VMware and VirtualBox for essentially the same purpose: running apps that weren't available to me on Linux -- most notably here, Internet Explorer.  My main beef with VMs has been performance -- they're generally resource hogs and slow.\r\n\r\n- **Photoshop** - This is a wonderful tool that I am way more adept at using, especially compared the Linux \"equivalent\", Gimp.  \r\n\r\n- **Outlook** - I am not forced into the Outlook web client any more, which is dumbed down for the browser and supremely dumbed down for anything except Internet Explorer.  I can easily sync my mail, contacts, and calendar with the rest of the organization.  This is huge.\r\n\r\n- **Fast startup** - When I used to boot both my Windows and Lucid Lynx machines, they would get to login at almost the exact same time.\r\n\r\n- **Sleep works** - This is closely tied to the fast startup reason -- I have fewer shutdowns and startups during the day because sleep actually works.  \r\n\r\n- **Symlinks** - I remember one of my main reasons for going to Linux in the first place was symlinks.  Seriously.  Now, since Vista, the Windows mklink command gives us the same power.  This is fantastic and makes me smile broadly.\r\n\r\n- **Pleasing UI** - The Windows 7 UI is very smooth and nice-looking.  The taskbar and startbar pinning of apps is way convenient.  The flyout menus for docs opened with said apps makes recent documents very reachable.  The window grouping and previews keep piles of windows sectioned off well.  There are a couple things that I miss that from the Compiz Fusion windows manager enhancements, such as tiling the windows so they're all visible, ala Mac, and multiple desktops.  \r\n\r\n- **Windows Search works** - Ok, not as good as grep or find, nor is it from the command line, but it has vastly improved.  It sits right on the Windows Explorer window, so it's immediately contextual, and it's fairly speedy.  \r\n\r\n- **Internet Explorer** - This browser is no good to anyone, unless you get a cut of all the OEM install $$.  But, if you are forced under threat of job loss to code to support it, it's way nice to be able to boot it for some cross-browser testing and not require a VM.  \r\n\r\n- **Audio Volume** - I think this must be a driver support issue, but I can crank out so much more volume on my laptop speakers using Windows compared to Ubuntu.\r\n\r\n- **Plug and Play** - I get a seamless experience in docking and undocking -- although, I've had it freeze up on me a few times to.  I automatically get external displays and projectors detected.  The resolution is correct.  This is a huge plus around the office when I take my lappy from my desk docking station to a mtg and then quickly present something on a projector.\r\n\r\n- **Num Pad** - This was a joke in Ubuntu.  In Windows 7, I can at least rely on my number pad always working. \r\n\r\n- **WebDAV is a little better** - WebDAV stinks in my experience with MarkLogic, but at least in Windows the experience is a little bit better from a stability, read, copy, and UI experience.\r\n\r\n- **Steam** - After a good day of dev, and if the eyes aren't yet too strained, it's time for some Monkey Island remakes on Steam.  When is this coming to Linux?! :)\r\n\r\n\r\nThe bad things\r\n--------------\r\n\r\n- **Michael Jackson** - or Weird Al.  Oh, wait, that's Fat.\r\n\r\n- **Filesystem speed** - Yeah, NTFS shows its age.  Filesystem reads and writes seem quite a bit slower.  I also spend a lot of time in IntelliJ, where file opening and tab switching is also noticably slower.  \r\n\r\n- **Mouse time** - I'm handling the mouse a LOT more.  My superuser status is threatened with the lack of keyboard koolness here.\r\n\r\n- **Terminal** - Er, command line.  And PowerShell?  Not worthy of the name.  In fact, it's sometimes less powerful than vanilla cmd at times.\r\n\r\n- **Home directory layout** - Deep in the directory structure.  And spaces -- Ick!\r\n\r\n- **Backslashes** - Eeeegggh...\r\n\r\n- **Social acceptance** - I got thrown out of a few geek clubs.  But, on the bright side, I can communicate and debug and get support from more users around the office because most of them use Windows as well.\r\n\r\n- **No gnome-do** - I love this app.  The others that are available aren't nearly as elegant.  Start menu app search isn't bad, but it doesn't have all the other plugins of gnome-do.\r\n\r\n- **Price** - I can't get the latest release for free.\r\n\r\n- **File printing** - Print to PDF not built in\r\n\r\n- **No sudo** - Super user process contains more annoying dialogs and is harder to get to w/out re-opening applications like cmd.\r\n\r\n\r\nIt's a tie\r\n----------\r\n\r\n- **Wireless** - Wireless networking setup is about as streamlined in each.  I like the UI a bit better in Windows.  I have full control over how I join networks in Ubuntu, but then again I don't have to specify everything everytime on Windows.  Of course, now I'm having a problem when trying to connect to a wireless network on a different domain on my Windows box, and it's giving me severe headaches.  It's like software is built of twine or something.\r\n", 
      "date_updated": "2010-11-01 13:08:47", 
      "demo": "", 
      "markup": "h", 
      "title": "Windows 7 Dev Environment", 
      "source_path": "", 
      "collection": 1, 
      "summary": "I recently rebuilt my dev box into a Windows 7 environment, coming from Ubuntu 10.04 Lucid Lynx.  The reasons were varied, and most weren't very significant at all.  Perhaps I just needed another beast to tame.  And an OS can be quite a beast.  But, since I've switched to daily dev on Windows 7, I've been mostly happy in a number of ways.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-11-01 11:47:16", 
       
      "tags": "windows7"
    }
  }, 
  {
    "pk": 345, 
    "model": "blog.article", 
    "fields": {
      "body": "The links I started with are here: http://confluence.jetbrains.net/display/TCD5/Custom+Build+Trigger and http://confluence.jetbrains.net/display/TCD5/Plugins+Packaging\r\n\r\n1. Create new Java project (I used IntelliJ Community Edition)\r\n2. Your custom trigger needs to extend BuildTriggerService. Be sure to implement all the abstract members.  Also, if you want any UI showing on the webpage, you'll have to override the \"getEditParametersUrl\" as well (not an abstract method).\r\n3. Another class needs to extend the PolledBuildTrigger.  The abstract method to override is \"triggerBuild\".  This is where your logic would work and then add to the queue by build name.\r\n4. Another class needs to extend SimplePageExtension which helps convert your .jsp file to .html (to be used by the TeamCity core stuff).\r\n5. You'll need a Spring bean context file.  I named mine: build-server-plugin-CustomTrigger.xml.  This is placed according to the article linked above.\r\n6. I also created a default MANIFEST.MF file and my .jsp file.\r\n7. You'll want to reference these jars from TeamCity: common-api.jar, server-api.jar, openapi.jar, servlet-api.jar, annotations.jar, jdom.jar, openapi.jar, spring-webmvc.jar, spring.jar, util.jar.\r\n\r\n8. In the Jar Artifact created, you'll want the spring bean xml file, the jsp file, and the code.  This is pretty basic stuff.\r\n\r\nHere is the code:\r\n\r\n.. code-block :: java\r\n\r\n  package core;\r\n  import jetbrains.buildServer.web.openapi.PagePlaces;\r\n  import jetbrains.buildServer.web.openapi.SimplePageExtension;\r\n  import jetbrains.buildServer.web.util.WebUtil;\r\n  import org.jetbrains.annotations.NotNull;\r\n  import javax.servlet.http.HttpServletRequest;\r\n\r\n  public class CustomPageExtension extends SimplePageExtension {\r\n     public CustomPageExtension(PagePlaces pagePlaces) {\r\n         super(pagePlaces);\r\n     }\r\n \r\n     @Override\r\n     public boolean isAvailable(@NotNull final HttpServletRequest request) {\r\n         return WebUtil.getPathWithoutAuthenticationType(request).startsWith(\"/customDetails.html\");\r\n     }\r\n  }\r\n\r\n\r\n.. code-block:: java\r\n\r\n package core;\r\n import jetbrains.buildServer.buildTriggers.BuildTriggerException;\r\n import jetbrains.buildServer.buildTriggers.PolledBuildTrigger;\r\n import jetbrains.buildServer.buildTriggers.PolledTriggerContext;\r\n import jetbrains.buildServer.serverSide.SBuildType;\r\n\r\n public class CustomPolledBuildTrigger extends PolledBuildTrigger {\r\n\r\n    private String project;\r\n\r\n    public String getProject() {\r\n        return project;\r\n    }\r\n\r\n    public void setProject(String project) {\r\n        this.project = project;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if a pending build exists.  If yes, it will add the build to the queue.\r\n     */\r\n    @Override\r\n    public void triggerBuild(PolledTriggerContext ptc) throws BuildTriggerException {\r\n\r\n        //Logic goes here\r\n\r\n        String buildName = getProject() + \"_Dynamic\";\r\n\r\n        if (DatabaseParser.hasPendingRow(getProject().toLowerCase())) {\r\n            ptc.getBuildType().addToQueue(buildName);\r\n        }\r\n    }\r\n }\r\n\r\n\r\n.. code-block:: java\r\n\r\n package core;\r\n import jetbrains.buildServer.buildTriggers.BuildTriggerDescriptor;\r\n import jetbrains.buildServer.buildTriggers.BuildTriggerService;\r\n import jetbrains.buildServer.buildTriggers.BuildTriggeringPolicy;\r\n import org.jetbrains.annotations.NotNull;\r\n\r\n public class CustomTrigger extends BuildTriggerService {\r\n\r\n    //This file MUST be placed in <Team City install dir>\\webapps\\ROOT\\admin\\triggers\r\n    private final String editParametersUrl = \"customDetails.jsp\";\r\n\r\n    private String project;\r\n\r\n    public String getProject() {\r\n        return project;\r\n    }\r\n\r\n    public void setProject(String project) {\r\n        this.project = project;\r\n    }\r\n\r\n    @Override\r\n    @NotNull\r\n    public String getName() {\r\n        return \"CustomTrigger\";\r\n    }\r\n\r\n    @Override\r\n    @NotNull\r\n    public String getDisplayName() {\r\n        return \"Our Custom Trigger\";\r\n    }\r\n\r\n    @Override\r\n    @NotNull\r\n    public String describeTrigger(BuildTriggerDescriptor btd) {\r\n        return \"A Custom Trigger to queue up dynamic builds.\";\r\n    }\r\n\r\n    @Override\r\n    @NotNull\r\n    public BuildTriggeringPolicy getBuildTriggeringPolicy() {\r\n        CustomPolledBuildTrigger tt = new CustomPolledBuildTrigger();\r\n        tt.setProject(getProject());\r\n        return (BuildTriggeringPolicy) tt;\r\n    }\r\n\r\n    @Override\r\n    public boolean isMultipleTriggersPerBuildTypeAllowed(){\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public String getEditParametersUrl(){\r\n        //This is mandatory if you want the web UI to show in the select/edit Trigger Details popup modal.\r\n        return editParametersUrl;\r\n    }\r\n }\r\n\r\n\r\n.. code-block:: xml\r\n\r\n <?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n <beans default-autowire=\"constructor\" xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-2.5.xsd \">\r\n\r\n\r\n    <bean id=\"customTriggerBean\" class=\"core.CustomTrigger\">\r\n        <property name=\"project\" value=\"Custom\"/>\r\n    </bean>\r\n\r\n    <bean id=\"polledBuildTriggerBean\" class=\"core.CustomPolledBuildTrigger\" scope=\"session\">\r\n        <property name=\"project\" ref=\"customTriggerBean.project\"/>\r\n    </bean>\r\n\r\n    <bean id=\"myExtensionBean\" class=\"core.CustomPageExtension\">\r\n            <property name=\"placeId\" value=\"EDIT_BUILD_RUNNER_SETTINGS_FRAGMENT\"/>\r\n            <property name=\"pluginName\" value=\"CustomTrigger\"/>\r\n            <property name=\"includeUrl\" value=\"customDetails.jsp\"/>\r\n    </bean>\r\n </beans>\r\n\r\n\r\n", 
      "date_published": "2010-10-07 12:03:09", 
      "image_path": "", 
      "title_slug": "writing-custom-build-trigger-teamcity", 
      "rendered_body": "<p>The links I started with are here: <a class=\"reference external\" href=\"http://confluence.jetbrains.net/display/TCD5/Custom+Build+Trigger\">http://confluence.jetbrains.net/display/TCD5/Custom+Build+Trigger</a> and <a class=\"reference external\" href=\"http://confluence.jetbrains.net/display/TCD5/Plugins+Packaging\">http://confluence.jetbrains.net/display/TCD5/Plugins+Packaging</a></p>\n<ol class=\"arabic simple\">\n<li>Create new Java project (I used IntelliJ Community Edition)</li>\n<li>Your custom trigger needs to extend BuildTriggerService. Be sure to implement all the abstract members.  Also, if you want any UI showing on the webpage, you'll have to override the &quot;getEditParametersUrl&quot; as well (not an abstract method).</li>\n<li>Another class needs to extend the PolledBuildTrigger.  The abstract method to override is &quot;triggerBuild&quot;.  This is where your logic would work and then add to the queue by build name.</li>\n<li>Another class needs to extend SimplePageExtension which helps convert your .jsp file to .html (to be used by the TeamCity core stuff).</li>\n<li>You'll need a Spring bean context file.  I named mine: build-server-plugin-CustomTrigger.xml.  This is placed according to the article linked above.</li>\n<li>I also created a default MANIFEST.MF file and my .jsp file.</li>\n<li>You'll want to reference these jars from TeamCity: common-api.jar, server-api.jar, openapi.jar, servlet-api.jar, annotations.jar, jdom.jar, openapi.jar, spring-webmvc.jar, spring.jar, util.jar.</li>\n<li>In the Jar Artifact created, you'll want the spring bean xml file, the jsp file, and the code.  This is pretty basic stuff.</li>\n</ol>\n<p>Here is the code:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kn\">package</span> <span class=\"n\">core</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jetbrains.buildServer.web.openapi.PagePlaces</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jetbrains.buildServer.web.openapi.SimplePageExtension</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jetbrains.buildServer.web.util.WebUtil</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.jetbrains.annotations.NotNull</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">javax.servlet.http.HttpServletRequest</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CustomPageExtension</span> <span class=\"kd\">extends</span> <span class=\"n\">SimplePageExtension</span> <span class=\"o\">{</span>\n   <span class=\"kd\">public</span> <span class=\"nf\">CustomPageExtension</span><span class=\"o\">(</span><span class=\"n\">PagePlaces</span> <span class=\"n\">pagePlaces</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n       <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">pagePlaces</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"nd\">@Override</span>\n   <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isAvailable</span><span class=\"o\">(</span><span class=\"nd\">@NotNull</span> <span class=\"kd\">final</span> <span class=\"n\">HttpServletRequest</span> <span class=\"n\">request</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n       <span class=\"k\">return</span> <span class=\"n\">WebUtil</span><span class=\"o\">.</span><span class=\"na\">getPathWithoutAuthenticationType</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">).</span><span class=\"na\">startsWith</span><span class=\"o\">(</span><span class=\"s\">&quot;/customDetails.html&quot;</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div><div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kn\">package</span> <span class=\"n\">core</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jetbrains.buildServer.buildTriggers.BuildTriggerException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jetbrains.buildServer.buildTriggers.PolledBuildTrigger</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jetbrains.buildServer.buildTriggers.PolledTriggerContext</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jetbrains.buildServer.serverSide.SBuildType</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CustomPolledBuildTrigger</span> <span class=\"kd\">extends</span> <span class=\"n\">PolledBuildTrigger</span> <span class=\"o\">{</span>\n\n   <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">project</span><span class=\"o\">;</span>\n\n   <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getProject</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n       <span class=\"k\">return</span> <span class=\"n\">project</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setProject</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n       <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">project</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"c\">/**</span>\n<span class=\"c\">    * Checks to see if a pending build exists.  If yes, it will add the build to the queue.</span>\n<span class=\"c\">    */</span>\n   <span class=\"nd\">@Override</span>\n   <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">triggerBuild</span><span class=\"o\">(</span><span class=\"n\">PolledTriggerContext</span> <span class=\"n\">ptc</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">BuildTriggerException</span> <span class=\"o\">{</span>\n\n       <span class=\"c\">//Logic goes here</span>\n\n       <span class=\"n\">String</span> <span class=\"n\">buildName</span> <span class=\"o\">=</span> <span class=\"n\">getProject</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">&quot;_Dynamic&quot;</span><span class=\"o\">;</span>\n\n       <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">DatabaseParser</span><span class=\"o\">.</span><span class=\"na\">hasPendingRow</span><span class=\"o\">(</span><span class=\"n\">getProject</span><span class=\"o\">().</span><span class=\"na\">toLowerCase</span><span class=\"o\">()))</span> <span class=\"o\">{</span>\n           <span class=\"n\">ptc</span><span class=\"o\">.</span><span class=\"na\">getBuildType</span><span class=\"o\">().</span><span class=\"na\">addToQueue</span><span class=\"o\">(</span><span class=\"n\">buildName</span><span class=\"o\">);</span>\n       <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div><div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"kn\">package</span> <span class=\"n\">core</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jetbrains.buildServer.buildTriggers.BuildTriggerDescriptor</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jetbrains.buildServer.buildTriggers.BuildTriggerService</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jetbrains.buildServer.buildTriggers.BuildTriggeringPolicy</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.jetbrains.annotations.NotNull</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CustomTrigger</span> <span class=\"kd\">extends</span> <span class=\"n\">BuildTriggerService</span> <span class=\"o\">{</span>\n\n   <span class=\"c\">//This file MUST be placed in &lt;Team City install dir&gt;\\webapps\\ROOT\\admin\\triggers</span>\n   <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">editParametersUrl</span> <span class=\"o\">=</span> <span class=\"s\">&quot;customDetails.jsp&quot;</span><span class=\"o\">;</span>\n\n   <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">project</span><span class=\"o\">;</span>\n\n   <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getProject</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n       <span class=\"k\">return</span> <span class=\"n\">project</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setProject</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n       <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">project</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"nd\">@Override</span>\n   <span class=\"nd\">@NotNull</span>\n   <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n       <span class=\"k\">return</span> <span class=\"s\">&quot;CustomTrigger&quot;</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"nd\">@Override</span>\n   <span class=\"nd\">@NotNull</span>\n   <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getDisplayName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n       <span class=\"k\">return</span> <span class=\"s\">&quot;Our Custom Trigger&quot;</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"nd\">@Override</span>\n   <span class=\"nd\">@NotNull</span>\n   <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">describeTrigger</span><span class=\"o\">(</span><span class=\"n\">BuildTriggerDescriptor</span> <span class=\"n\">btd</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n       <span class=\"k\">return</span> <span class=\"s\">&quot;A Custom Trigger to queue up dynamic builds.&quot;</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"nd\">@Override</span>\n   <span class=\"nd\">@NotNull</span>\n   <span class=\"kd\">public</span> <span class=\"n\">BuildTriggeringPolicy</span> <span class=\"nf\">getBuildTriggeringPolicy</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n       <span class=\"n\">CustomPolledBuildTrigger</span> <span class=\"n\">tt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">CustomPolledBuildTrigger</span><span class=\"o\">();</span>\n       <span class=\"n\">tt</span><span class=\"o\">.</span><span class=\"na\">setProject</span><span class=\"o\">(</span><span class=\"n\">getProject</span><span class=\"o\">());</span>\n       <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">BuildTriggeringPolicy</span><span class=\"o\">)</span> <span class=\"n\">tt</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"nd\">@Override</span>\n   <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isMultipleTriggersPerBuildTypeAllowed</span><span class=\"o\">(){</span>\n       <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n\n   <span class=\"nd\">@Override</span>\n   <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getEditParametersUrl</span><span class=\"o\">(){</span>\n       <span class=\"c\">//This is mandatory if you want the web UI to show in the select/edit Trigger Details popup modal.</span>\n       <span class=\"k\">return</span> <span class=\"n\">editParametersUrl</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div><div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"cp\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class=\"nt\">&lt;beans</span> <span class=\"na\">default-autowire=</span><span class=\"s\">&quot;constructor&quot;</span> <span class=\"na\">xmlns=</span><span class=\"s\">&quot;http://www.springframework.org/schema/beans&quot;</span>\n      <span class=\"na\">xmlns:xsi=</span><span class=\"s\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>\n      <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">&quot;http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-2.5.xsd &quot;</span><span class=\"nt\">&gt;</span>\n\n\n   <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&quot;customTriggerBean&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;core.CustomTrigger&quot;</span><span class=\"nt\">&gt;</span>\n       <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&quot;project&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Custom&quot;</span><span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;/bean&gt;</span>\n\n   <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&quot;polledBuildTriggerBean&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;core.CustomPolledBuildTrigger&quot;</span> <span class=\"na\">scope=</span><span class=\"s\">&quot;session&quot;</span><span class=\"nt\">&gt;</span>\n       <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&quot;project&quot;</span> <span class=\"na\">ref=</span><span class=\"s\">&quot;customTriggerBean.project&quot;</span><span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;/bean&gt;</span>\n\n   <span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">&quot;myExtensionBean&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;core.CustomPageExtension&quot;</span><span class=\"nt\">&gt;</span>\n           <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&quot;placeId&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;EDIT_BUILD_RUNNER_SETTINGS_FRAGMENT&quot;</span><span class=\"nt\">/&gt;</span>\n           <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&quot;pluginName&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;CustomTrigger&quot;</span><span class=\"nt\">/&gt;</span>\n           <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">&quot;includeUrl&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;customDetails.jsp&quot;</span><span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;/bean&gt;</span>\n<span class=\"nt\">&lt;/beans&gt;</span>\n</pre></div>\n</div>", 
      "date_updated": "2010-10-07 13:18:35", 
      "demo": "", 
      "markup": "r", 
      "title": "Writing Custom Build Trigger For TeamCity", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Lately, I've been working on creating a custom build trigger for Team City.  We need to monitor an external database for changes which will add a build to the queue.  It sure was a lot of work but well worth it.", 
      "source": "", 
      "user": 3, 
      "active": true, 
      "date_created": "2010-10-07 12:22:03", 
       
      "tags": "plugins teamcity"
    }
  }, 
  {
    "pk": 346, 
    "model": "blog.article", 
    "fields": {
      "body": "<div style=\"width:425px\" id=\"__ss_5423499\"><strong style=\"display:block;margin:12px 0 4px\"><a href=\"http://www.slideshare.net/rockycode/jake-trent-writingjqueryplugins-5423499\" title=\"Writing Jquery Plugins\">Writing Jquery Plugins</a></strong><object id=\"__sse5423499\" width=\"425\" height=\"355\"><param name=\"movie\" value=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=jaketrentwritingjqueryplugins-101012075852-phpapp02&rel=0&stripped_title=jake-trent-writingjqueryplugins-5423499&userName=rockycode\" /><param name=\"allowFullScreen\" value=\"true\"/><param name=\"allowScriptAccess\" value=\"always\"/><embed name=\"__sse5423499\" src=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=jaketrentwritingjqueryplugins-101012075852-phpapp02&rel=0&stripped_title=jake-trent-writingjqueryplugins-5423499&userName=rockycode\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"425\" height=\"355\"></embed></object><div style=\"padding:5px 0 12px\">View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=\"http://www.slideshare.net/rockycode\">rockycode</a>.</div></div>\r\n\r\nPlugins aren't magical or anything.  In fact, any code that you can produce that's delivered as a plugin can be written without a plugin.  Jquery itself is just a bunch of javascript code written in a way that is packaged nicely, ready for distribution, and has a cleaned up API.  That's one of the things that makes it a joy to use.  Compare that with seeing a .js file full of line after line of function() { ... } and either choosing to copy paste bits and pieces or having to sift through it to determine which methods you should or want to call.  Plugins provide an elegant way to create cohesive code and then distribute the idea so that others will be able to pick it up and use it more easily.\r\n\r\nFor the demo used in conjunction with this presentation, visit the <a href=\"http://bitbucket.org/jtsnake/jquery-photopeek\">Bitbucket Jquery Photopeek</a> repo (hg).", 
      "date_published": "2010-10-12 06:54:09", 
      "image_path": "", 
      "title_slug": "writing-jquery-plugins", 
      "rendered_body": "<div style=\"width:425px\" id=\"__ss_5423499\"><strong style=\"display:block;margin:12px 0 4px\"><a href=\"http://www.slideshare.net/rockycode/jake-trent-writingjqueryplugins-5423499\" title=\"Writing Jquery Plugins\">Writing Jquery Plugins</a></strong><object id=\"__sse5423499\" width=\"425\" height=\"355\"><param name=\"movie\" value=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=jaketrentwritingjqueryplugins-101012075852-phpapp02&rel=0&stripped_title=jake-trent-writingjqueryplugins-5423499&userName=rockycode\" /><param name=\"allowFullScreen\" value=\"true\"/><param name=\"allowScriptAccess\" value=\"always\"/><embed name=\"__sse5423499\" src=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=jaketrentwritingjqueryplugins-101012075852-phpapp02&rel=0&stripped_title=jake-trent-writingjqueryplugins-5423499&userName=rockycode\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"425\" height=\"355\"></embed></object><div style=\"padding:5px 0 12px\">View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=\"http://www.slideshare.net/rockycode\">rockycode</a>.</div></div>\r\n\r\nPlugins aren't magical or anything.  In fact, any code that you can produce that's delivered as a plugin can be written without a plugin.  Jquery itself is just a bunch of javascript code written in a way that is packaged nicely, ready for distribution, and has a cleaned up API.  That's one of the things that makes it a joy to use.  Compare that with seeing a .js file full of line after line of function() { ... } and either choosing to copy paste bits and pieces or having to sift through it to determine which methods you should or want to call.  Plugins provide an elegant way to create cohesive code and then distribute the idea so that others will be able to pick it up and use it more easily.\r\n\r\nFor the demo used in conjunction with this presentation, visit the <a href=\"http://bitbucket.org/jtsnake/jquery-photopeek\">Bitbucket Jquery Photopeek</a> repo (hg).", 
      "date_updated": "2010-10-12 07:04:19", 
      "demo": "jtsnake/photopeek/docs/demo/index.html", 
      "markup": "h", 
      "title": "Writing Jquery Plugins", 
      "source_path": "http://bitbucket.org/jtsnake/jquery-photopeek", 
      "collection": 1, 
      "summary": "Jquery has made developing javascript fun and enjoyable.  It is a fantastic library that essentially allows the creation of library extensions on top of it via plugins.  Jquery plugins are surprisingly easy to write and elegant to read and use.  Here are a few tips on where to find good plugin candidates, design principles for plugins, and an outline of the basic structure that I have found most useful when writing plugins.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-10-12 06:54:54", 
       
      "tags": "javascript jquery plugins"
    }
  }, 
  {
    "pk": 362, 
    "model": "blog.article", 
    "fields": {
      "body": "My voice is my passport...\r\n--------------------------\r\n\r\nI was debugging some xdmp:login() goodness and realized that sometimes the SEC-PRIV exception wasn't thrown.  It seems that if the xdmp:login() doesn't recognize the username as a user known to the system, it won't login.  Thus, if I code this beauty:\r\n\r\n.. code-block:: xquery\r\n\r\n xdmp:login(\"asdf\")\r\n\r\nIt won't even try.  It just doesn't do anything, assuming \"asdf\" really isn't a known user in your app.\r\n\r\nSession Masquerade\r\n------------------\r\n\r\nMake sure that you realize, as I failed to scrutinize in my quick glance at the `xdmp:login() API <http://developer.marklogic.com/pubs/4.2/apidocs/AppServerBuiltins.html#xdmp:login>`_, that by default xdmp:login() logs in as the specified user for the entire session.  The last (optional) parameter, $set-session is true by default.  What will stop the masquerade?  Only session timeout or a call to xdmp:logout().  Don't want to have to rip the mask off your user every time?  Try:\r\n\r\n.. code-block:: xquery\r\n\r\n xdmp:login($username, (), fn:false())\r\n\r\nBut, if session logins are what you're craving, you may run into the same issue I did... On a dark dreary night I crept to the monitor, brought up my code and began pressing the keys... typity, typity.  The branches of the tree outside scraped across the moonlit window.  Breathing more quickly now, I focused back at the flickering monitor.  I did an xdmp:login() to a user that didn't have the xdmp-login execute privilege.  It worked.  But then to my horror, the second time it failed.  But, why?  Thinking that I might have to beat back the horrors of the night at any time with a flashlight, I stumbled to my feet.  Then, I realized that I was now permanently (at least for the duration of the session) an unprivileged peon and could not enjoy the warmth that privilege had once bought me.  After this realization, my nocturnal hallucination suddenly seemed less harrowing, less threatening, and I committed my code and went to sleep.\r\n\r\nObviously not wanting to relive such an experience, just realize that you'll need more logic around when to xdmp:login() and, in this case more importantly, when to not login.\r\n\r\nAnd now a word about amps\r\n-------------------------\r\n\r\nAnother experience to not forget (and also, thankfully, not embellish to such great, un-useful lengths) is that amps on the filesystem act a little bit differently than everywhere else.  That is, when I was trying to define xdmp-login privileges for the function that performed the password-less xdmp:login(), I couldn't seem to get them to take on the filesystem.  That is because my deployment mechanism doesn't apply amps to the filesystem.  If you want that goodness, make sure you do something as sweet as this:\r\n\r\n.. code-block:: xquery\r\n\r\n xdmp:amp($namespace, $localname, $module-uri, xs:unsignedLong(0))\r\n\r\nWhere the \"0\" represents the filesystem instead of a deployed Modules database.\r\n\r\n... verify me.\r\n", 
      "date_published": "2011-02-03 14:22:12", 
      "image_path": "", 
      "title_slug": "xdmp-login-love", 
      "rendered_body": "<div class=\"section\" id=\"my-voice-is-my-passport\">\n<h1>My voice is my passport...</h1>\n<p>I was debugging some xdmp:login() goodness and realized that sometimes the SEC-PRIV exception wasn't thrown.  It seems that if the xdmp:login() doesn't recognize the username as a user known to the system, it won't login.  Thus, if I code this beauty:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xdmp:login(&quot;asdf&quot;)\n</pre></div>\n</div><p>It won't even try.  It just doesn't do anything, assuming &quot;asdf&quot; really isn't a known user in your app.</p>\n</div>\n<div class=\"section\" id=\"session-masquerade\">\n<h1>Session Masquerade</h1>\n<p>Make sure that you realize, as I failed to scrutinize in my quick glance at the <a class=\"reference external\" href=\"http://developer.marklogic.com/pubs/4.2/apidocs/AppServerBuiltins.html#xdmp:login\">xdmp:login() API</a>, that by default xdmp:login() logs in as the specified user for the entire session.  The last (optional) parameter, $set-session is true by default.  What will stop the masquerade?  Only session timeout or a call to xdmp:logout().  Don't want to have to rip the mask off your user every time?  Try:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xdmp:login($username, (), fn:false())\n</pre></div>\n</div><p>But, if session logins are what you're craving, you may run into the same issue I did... On a dark dreary night I crept to the monitor, brought up my code and began pressing the keys... typity, typity.  The branches of the tree outside scraped across the moonlit window.  Breathing more quickly now, I focused back at the flickering monitor.  I did an xdmp:login() to a user that didn't have the xdmp-login execute privilege.  It worked.  But then to my horror, the second time it failed.  But, why?  Thinking that I might have to beat back the horrors of the night at any time with a flashlight, I stumbled to my feet.  Then, I realized that I was now permanently (at least for the duration of the session) an unprivileged peon and could not enjoy the warmth that privilege had once bought me.  After this realization, my nocturnal hallucination suddenly seemed less harrowing, less threatening, and I committed my code and went to sleep.</p>\n<p>Obviously not wanting to relive such an experience, just realize that you'll need more logic around when to xdmp:login() and, in this case more importantly, when to not login.</p>\n</div>\n<div class=\"section\" id=\"and-now-a-word-about-amps\">\n<h1>And now a word about amps</h1>\n<p>Another experience to not forget (and also, thankfully, not embellish to such great, un-useful lengths) is that amps on the filesystem act a little bit differently than everywhere else.  That is, when I was trying to define xdmp-login privileges for the function that performed the password-less xdmp:login(), I couldn't seem to get them to take on the filesystem.  That is because my deployment mechanism doesn't apply amps to the filesystem.  If you want that goodness, make sure you do something as sweet as this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xdmp:amp($namespace, $localname, $module-uri, xs:unsignedLong(0))\n</pre></div>\n</div><p>Where the &quot;0&quot; represents the filesystem instead of a deployed Modules database.</p>\n<p>... verify me.</p>\n</div>\n", 
      "date_updated": "2011-02-03 20:03:35", 
      "demo": "", 
      "markup": "r", 
      "title": "Xdmp:Login Love", 
      "source_path": "", 
      "collection": 1, 
      "summary": "How do you log into a MarkLogic application to run as a user besides the default app server user?  Use xdmp:login(), baby!  User/role management can be awesome -- when it's done and coded.  For now, let's sing out a few important things to remember about xdmp:login() and all its hidden secrets.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-02-03 14:22:57", 
       
      "tags": "marklogic security xquery"
    }
  }, 
  {
    "pk": 380, 
    "model": "blog.article", 
    "fields": {
      "body": "Within the browser, a user can store their preferred language.  The w3c has a `nice browser list <http://www.w3.org/International/questions/qa-lang-priorities#changing>`_ to give some terse instructions on how to set your language in your browser.\r\n\r\nYour app might read the browser preference differently, but at least one component is consistent.  Your browser is going to pass an `HTTP header <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>`_ called \"Accept-Language\" to your app.  In a recent app, I read this using XQuery:\r\n\r\n.. code-block:: xquery\r\n\r\n xdmp:get-request-header(\"Accept-Language\")\r\n\r\nThat's going to return a string something like this one, which is mine:\r\n\r\n.. code-block:: text\r\n\r\n  en-US,en;q=0.8\r\n\r\nThis is a comma-delimited list of 2-letter `language codes <http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes>`_ and 2-letter `locale codes <http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>`_, informally \"language-locale\".\r\n\r\nThe \"q=#\" describes the quality of the language.  The higher, the quality, the more preferred.  Notice that in my header, \"en-US\", American English, does not have a \"q=\" attribute.  The lack of \"q=\" indicates a default, actually the highest preference, of 1.0.\r\n\r\nThere's also a Content-Language header, that I suppose you could use if you were making a differentiation for what language the actual content was using compared to the site chrome.  But, as far as I can tell, this is used less.  Even less by myself.  (Never.)\r\n\r\nHere's a full XQuery implementation for MarkLogic that will read the header and parse out the preferred language.  In my implementation, I don't care about the locale, so I'm paying attention only to the language code.  The regex used is an adjustment of `this original php regex <http://www.thefutureoftheweb.com/blog/use-accept-language-header>`_:\r\n\r\n.. code-block:: xquery\r\n\r\n  xquery version \"1.0-ml\";\r\n\r\n  declare option xdmp:mapping \"false\";\r\n\r\n  declare function local:get-browser-lang() as xs:string? {\r\n    let $header := xdmp:get-request-header(\"Accept-Language\")\r\n    return if (fn:exists($header)) then\r\n      local:get-top-hit-lang($header)\r\n    else\r\n      ()\r\n  };\r\n\r\n  declare private function local:get-top-hit-lang($header as xs:string) as xs:string? {\r\n    let $langs :=\r\n      for $entry in fn:tokenize(local:parse-header($header), \",\")\r\n      let $data := fn:tokenize($entry, \"q=\")\r\n      let $quality := $data[2]\r\n      order by\r\n        if (fn:exists($quality) and fn:string-length($quality) gt 0) then\r\n          xs:float($quality)\r\n        else\r\n          xs:float(1.0)\r\n        descending\r\n      return $data[1]\r\n    return $langs[1]\r\n  };\r\n\r\n  declare private function local:parse-header($header as xs:string) as xs:string {\r\n    let $regex := \"(([a-z]{1,8})(-[a-z]{1,8})?)\\s*(;\\s*q\\s*=\\s*(1|0\\.[0-9]+))?\"\r\n    let $flags := \"i\"\r\n    let $format := \"$2q=$5\"\r\n    return fn:replace(fn:lower-case($header), $regex, $format)\r\n  };\r\n\r\n  local:get-browser-lang()\r\n\r\nThis implementation just takes the top language, no matter what.  You might want to check to see if your site actually supports the language before picking from the browser preference.  While you're looping through the list of acceptable languages in get-top-hit-lang(), you could add a where clause to check for support.\r\n\r\nDo you find that the sites you visit respect this header?\r\n\r\nUpdate\r\n---------\r\n\r\nHere's an updated version of the code that respects secondary language selections as well (not just first choice):\r\n\r\n.. code-block:: xquery\r\n\r\n\txquery version \"1.0-ml\";\r\n\r\n\tdeclare option xdmp:mapping \"false\";\r\n\r\n\tdeclare function local:get-browser-lang() as xs:string? {\r\n\t  let $header := xdmp:get-request-header(\"Accept-Language\")\r\n\t  return if (fn:exists($header)) then\r\n\t    local:get-top-supported-lang(local:get-browser-langs($header), (\"en\", \"es\", \"it\"))\r\n\t  else\r\n\t    ()\r\n\t};\r\n\r\n\tdeclare function local:get-top-supported-lang($ordered-langs as xs:string*, $translations as xs:string*) as xs:string? {\r\n\t  if (fn:empty($ordered-langs)) then\r\n\t    ()\r\n\t  else\r\n\t    let $lang := $ordered-langs[1]\r\n\t    return if ($lang = $translations) then\r\n\t      $lang\r\n\t    else\r\n\t      local:get-top-supported-lang(fn:subsequence($ordered-langs, 2), $translations)\r\n\t};\r\n\r\n\tdeclare private function local:get-browser-langs($header as xs:string) as xs:string* {\r\n\t  let $langs :=\r\n\t    for $entry in fn:tokenize(local:parse-header($header), \",\")\r\n\t    let $data := fn:tokenize($entry, \"q=\")\r\n\t    let $quality := $data[2]\r\n\t    order by\r\n\t      if (fn:exists($quality) and fn:string-length($quality) gt 0) then\r\n\t\txs:float($quality)\r\n\t      else\r\n\t\txs:float(1.0)\r\n\t      descending\r\n\t    return $data[1]\r\n\t  return $langs\r\n\t};\r\n\r\n\tdeclare private function local:parse-header($header as xs:string) as xs:string {\r\n\t  let $regex := \"(([a-z]{1,8})(-[a-z]{1,8})?)\\s*(;\\s*q\\s*=\\s*(1|0\\.[0-9]+))?\"\r\n\t  let $flags := \"i\"\r\n\t  let $format := \"$2q=$5\"\r\n\t  return fn:replace(fn:lower-case($header), $regex, $format)\r\n\t};\r\n\r\n\tlocal:get-browser-lang()\r\n\r\n", 
      "date_published": "2011-05-06 15:07:40", 
      "image_path": "", 
      "title_slug": "xquery-browser-language-detection", 
      "rendered_body": "<p>Within the browser, a user can store their preferred language.  The w3c has a <a class=\"reference external\" href=\"http://www.w3.org/International/questions/qa-lang-priorities#changing\">nice browser list</a> to give some terse instructions on how to set your language in your browser.</p>\n<p>Your app might read the browser preference differently, but at least one component is consistent.  Your browser is going to pass an <a class=\"reference external\" href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\">HTTP header</a> called &quot;Accept-Language&quot; to your app.  In a recent app, I read this using XQuery:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xdmp:get-request-header(&quot;Accept-Language&quot;)\n</pre></div>\n</div><p>That's going to return a string something like this one, which is mine:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>en-US,en;q=0.8\n</pre></div>\n</div><p>This is a comma-delimited list of 2-letter <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">language codes</a> and 2-letter <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">locale codes</a>, informally &quot;language-locale&quot;.</p>\n<p>The &quot;q=#&quot; describes the quality of the language.  The higher, the quality, the more preferred.  Notice that in my header, &quot;en-US&quot;, American English, does not have a &quot;q=&quot; attribute.  The lack of &quot;q=&quot; indicates a default, actually the highest preference, of 1.0.</p>\n<p>There's also a Content-Language header, that I suppose you could use if you were making a differentiation for what language the actual content was using compared to the site chrome.  But, as far as I can tell, this is used less.  Even less by myself.  (Never.)</p>\n<p>Here's a full XQuery implementation for MarkLogic that will read the header and parse out the preferred language.  In my implementation, I don't care about the locale, so I'm paying attention only to the language code.  The regex used is an adjustment of <a class=\"reference external\" href=\"http://www.thefutureoftheweb.com/blog/use-accept-language-header\">this original php regex</a>:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0-ml&quot;;\n\ndeclare option xdmp:mapping &quot;false&quot;;\n\ndeclare function local:get-browser-lang() as xs:string? {\n  let $header := xdmp:get-request-header(&quot;Accept-Language&quot;)\n  return if (fn:exists($header)) then\n    local:get-top-hit-lang($header)\n  else\n    ()\n};\n\ndeclare private function local:get-top-hit-lang($header as xs:string) as xs:string? {\n  let $langs :=\n    for $entry in fn:tokenize(local:parse-header($header), &quot;,&quot;)\n    let $data := fn:tokenize($entry, &quot;q=&quot;)\n    let $quality := $data[2]\n    order by\n      if (fn:exists($quality) and fn:string-length($quality) gt 0) then\n        xs:float($quality)\n      else\n        xs:float(1.0)\n      descending\n    return $data[1]\n  return $langs[1]\n};\n\ndeclare private function local:parse-header($header as xs:string) as xs:string {\n  let $regex := &quot;(([a-z]{1,8})(-[a-z]{1,8})?)\\s*(;\\s*q\\s*=\\s*(1|0\\.[0-9]+))?&quot;\n  let $flags := &quot;i&quot;\n  let $format := &quot;$2q=$5&quot;\n  return fn:replace(fn:lower-case($header), $regex, $format)\n};\n\nlocal:get-browser-lang()\n</pre></div>\n</div><p>This implementation just takes the top language, no matter what.  You might want to check to see if your site actually supports the language before picking from the browser preference.  While you're looping through the list of acceptable languages in get-top-hit-lang(), you could add a where clause to check for support.</p>\n<p>Do you find that the sites you visit respect this header?</p>\n<div class=\"section\" id=\"update\">\n<h1>Update</h1>\n<p>Here's an updated version of the code that respects secondary language selections as well (not just first choice):</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0-ml&quot;;\n\ndeclare option xdmp:mapping &quot;false&quot;;\n\ndeclare function local:get-browser-lang() as xs:string? {\n  let $header := xdmp:get-request-header(&quot;Accept-Language&quot;)\n  return if (fn:exists($header)) then\n    local:get-top-supported-lang(local:get-browser-langs($header), (&quot;en&quot;, &quot;es&quot;, &quot;it&quot;))\n  else\n    ()\n};\n\ndeclare function local:get-top-supported-lang($ordered-langs as xs:string*, $translations as xs:string*) as xs:string? {\n  if (fn:empty($ordered-langs)) then\n    ()\n  else\n    let $lang := $ordered-langs[1]\n    return if ($lang = $translations) then\n      $lang\n    else\n      local:get-top-supported-lang(fn:subsequence($ordered-langs, 2), $translations)\n};\n\ndeclare private function local:get-browser-langs($header as xs:string) as xs:string* {\n  let $langs :=\n    for $entry in fn:tokenize(local:parse-header($header), &quot;,&quot;)\n    let $data := fn:tokenize($entry, &quot;q=&quot;)\n    let $quality := $data[2]\n    order by\n      if (fn:exists($quality) and fn:string-length($quality) gt 0) then\n        xs:float($quality)\n      else\n        xs:float(1.0)\n      descending\n    return $data[1]\n  return $langs\n};\n\ndeclare private function local:parse-header($header as xs:string) as xs:string {\n  let $regex := &quot;(([a-z]{1,8})(-[a-z]{1,8})?)\\s*(;\\s*q\\s*=\\s*(1|0\\.[0-9]+))?&quot;\n  let $flags := &quot;i&quot;\n  let $format := &quot;$2q=$5&quot;\n  return fn:replace(fn:lower-case($header), $regex, $format)\n};\n\nlocal:get-browser-lang()\n</pre></div>\n</div></div>\n", 
      "date_updated": "2011-06-16 15:01:08", 
      "demo": "", 
      "markup": "r", 
      "title": "XQuery Browser Language Detection", 
      "source_path": "", 
      "collection": 1, 
      "summary": "If you've created an internationalized website lately, you've probably implemented some sort of language chooser widget in your site ui to allow your users to indicate which language they would like to see content displayed in.  What I often forget is that the user may have already made this indication previous to visiting your site, and you might be like to think about respecting their previously indicated preference.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-05-06 15:08:39", 
       
      "tags": "browser http marklogic xquery"
    }
  }, 
  {
    "pk": 377, 
    "model": "blog.article", 
    "fields": {
      "body": "So how do you do it?\r\n\r\nFirst generate your code: Here is an example function you might call passing in your generated XQuery code as the $content parameter:\r\n\r\n.. code-block:: xquery\r\n\r\n\tdeclare function generateSomeXqueryWithGenerationWarning($content as xs:string) {\r\n\tlet $doc := fn:string-join((\r\n\t'(:================================================================\r\n\t  THIS FILE IS GENERATED! DO NOT MODIFY THIS FILE MANUALLY. \r\n\t  IT WILL BE OVERWRITTEN.\r\n\t  GENERATED: ',xs:string(fn:current-dateTime()),'\r\n\t  ================================================================:)\r\n\t\r\n\t',$content,'\r\n\t\r\n\t(:================================================================\r\n\t  END OF GENERATED FILE \r\n\t  ================================================================:)\r\n\t'\r\n\t)\r\n\t,'')}}\r\n\treturn $doc\r\n\t};\r\n\t\r\nNow with that generated file, call this function to save it either to the Modules database or to the filesystem (whichever your app server is using). The $uri parameter is relative to the modules-root. Don't start it with a slash \"/\".\r\n\r\n.. code-block:: xquery\r\n\r\n\tdeclare function saveModuleFile($uri as xs:string,$doc as xs:string) {\r\n\t\t if(xdmp:modules-database() = 0) then\r\n\t\t \t(: Save it to the filesystem relative where the app server is pointing to :)\r\n\t\t \txdmp:save(fn:concat(xdmp:modules-root(),$uri), document { text { $doc })\r\n\t\t else\r\n\t\t \t(: Invoke to a module that puts it in the Modules db relative where the app server is pointing to :)\r\n\t\t \tlet $ret := xdmp:invoke('saveModuleFile.xqy',\r\n\t\t\t\t(\r\n\t\t\t\t\txs:QName(\"uri\"), $uri,\r\n\t\t\t\t\txs:QName(\"doc\"), document { text { $doc } }\r\n\t\t\t\t),\r\n\t\t\t\t<options xmlns=\"xdmp:eval\">\r\n\t\t\t\t\t<database>{ xdmp:modules-database() }</database>\r\n\t\t\t\t\t<isolation>different-transaction</isolation>\r\n\t\t\t\t</options> \r\n\t\t\t)\r\n\t\treturn ()\r\n\t};\r\n\r\nRemember that the xqy module won't be available in this transaction.\r\n\r\nThe file that is invoked from this function looks something like this:\r\n\r\n.. code-block:: xquery\r\n\r\n\txquery version \"1.0-ml\";\r\n\tdeclare option xdmp:mapping \"false\";\r\n\t\r\n\tdeclare variable $uri external;\r\n\tdeclare variable $doc external;\r\n\t\r\n\txdmp:document-insert($uri,$doc)\r\n\r\nThe same technique can be used to remove a modules file that is no longer needed.\r\n\r\nNow just call in to the generated module from the app server, or use xdmp:function and xdmp:apply to call a function in in it.\r\n\r\nIt's that easy, the hard part is generating the actual code you want.\r\n\r\n", 
      "date_published": "2011-04-27 07:41:05", 
      "image_path": "", 
      "title_slug": "xquery-code-generation", 
      "rendered_body": "<p>So how do you do it?</p>\n<p>First generate your code: Here is an example function you might call passing in your generated XQuery code as the $content parameter:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>declare function generateSomeXqueryWithGenerationWarning($content as xs:string) {\nlet $doc := fn:string-join((\n&#39;(:================================================================\n  THIS FILE IS GENERATED! DO NOT MODIFY THIS FILE MANUALLY.\n  IT WILL BE OVERWRITTEN.\n  GENERATED: &#39;,xs:string(fn:current-dateTime()),&#39;\n  ================================================================:)\n\n&#39;,$content,&#39;\n\n(:================================================================\n  END OF GENERATED FILE\n  ================================================================:)\n&#39;\n)\n,&#39;&#39;)}}\nreturn $doc\n};\n</pre></div>\n</div><p>Now with that generated file, call this function to save it either to the Modules database or to the filesystem (whichever your app server is using). The $uri parameter is relative to the modules-root. Don't start it with a slash &quot;/&quot;.</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>declare function saveModuleFile($uri as xs:string,$doc as xs:string) {\n         if(xdmp:modules-database() = 0) then\n                (: Save it to the filesystem relative where the app server is pointing to :)\n                xdmp:save(fn:concat(xdmp:modules-root(),$uri), document { text { $doc })\n         else\n                (: Invoke to a module that puts it in the Modules db relative where the app server is pointing to :)\n                let $ret := xdmp:invoke(&#39;saveModuleFile.xqy&#39;,\n                        (\n                                xs:QName(&quot;uri&quot;), $uri,\n                                xs:QName(&quot;doc&quot;), document { text { $doc } }\n                        ),\n                        &lt;options xmlns=&quot;xdmp:eval&quot;&gt;\n                                &lt;database&gt;{ xdmp:modules-database() }&lt;/database&gt;\n                                &lt;isolation&gt;different-transaction&lt;/isolation&gt;\n                        &lt;/options&gt;\n                )\n        return ()\n};\n</pre></div>\n</div><p>Remember that the xqy module won't be available in this transaction.</p>\n<p>The file that is invoked from this function looks something like this:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>xquery version &quot;1.0-ml&quot;;\ndeclare option xdmp:mapping &quot;false&quot;;\n\ndeclare variable $uri external;\ndeclare variable $doc external;\n\nxdmp:document-insert($uri,$doc)\n</pre></div>\n</div><p>The same technique can be used to remove a modules file that is no longer needed.</p>\n<p>Now just call in to the generated module from the app server, or use xdmp:function and xdmp:apply to call a function in in it.</p>\n<p>It's that easy, the hard part is generating the actual code you want.</p>\n", 
      "date_updated": "2011-04-27 10:38:50", 
      "demo": "", 
      "markup": "r", 
      "title": "XQuery Code Generation", 
      "source_path": "", 
      "collection": 1, 
      "summary": "In order to improve performance and scalability, sometimes it makes sense to turn html (embedded with some tag library or Xquery code) into real XQuery code. It can then be put in the Modules database making it immediately available for use. This is just like what Java Server Pages does!", 
      "source": "", 
      "user": 10, 
      "active": true, 
      "date_created": "2011-04-27 07:42:22", 
       
      "tags": "jsp performance xquery"
    }
  }, 
  {
    "pk": 360, 
    "model": "blog.article", 
    "fields": {
      "body": "Length\r\n------\r\n\r\nRidiculously long.  Example that speaks for itself:\r\n\r\n.. code-block :: xquery\r\n\r\n\timport module namespace translate = \"http://aprilandjake.com/audience/modules/content/translate\" at \"/modules/content/translate.xqy\";\r\n\r\nOk, some of the blame here lies with me for picking a ridiculous namespace.  But it seems conventional to stick the domain on the front in proper URL fashion.  And then, I'm mirroring the path from app server root as the rest of the namespace, which takes me to repetition:\r\n\r\nRepetition\r\n----------\r\n\r\nDoesn't it seem like we have the same data listed here twice.  From what I'm getting from the `W3C Xquery Spec <http://www.w3.org/TR/xquery/#id-module-import>`_:\r\n\r\n   The URILiterals that follow the at keyword are optional location hints, and can be interpreted or disregarded in an implementation-defined way.\r\n\r\nThe implementation I'm operating in is MarkLogic.  As far as I can tell, then url after the \"at\" is required in this implementation.  Can anyone fulfill a boyish dream of mine and tell me otherwise?  Please!\r\n\r\nSo, I thought I was pretty cool creating a Live Template in IntelliJ to throw down this nasty import for my current project and save me a few keystrokes:\r\n\r\n.. code-block:: xquery\r\n\r\n   import module namespace $NAME$ = \"http://aprilandjake.com/audience$PATH$\" at \"$PATH$.xqy\";\r\n\r\nSo, then I could type the path from app server root to the library module file once and it would be duplicated, but now I get bitten by paths:\r\n\r\nPaths\r\n-----\r\n\r\nIt seems like most of the Xquery code that I see uses absolute paths after the \"at\" in the import, as in:\r\n\r\n.. code-block :: xquery\r\n\r\n   import module namespace myns = \"http://super.long/namespace/of/modules/death\" at \"/modules/death.xqy\";\r\n\r\nNote the leading slash.  So, I have done this in most of my code.  Remember, it helps my live template work as well (less typing overall).  Well, it seems that I may need to change my standard here, because the leading slash limits me, as I see it, in my code reuse.  Paraphrasing from the `MarkLogic Documentation <http://docs.marklogic.com/4.2doc/docapp.xqy#display.xqy?fname=http://pubs/4.2doc/xml/dev_guide/import_modules.xml%2329407>`_:\r\n\r\n\tPaths in imports are resolved as follows:\r\n\r\n\t1. Starts with \"/\", look under Modules subdir in MarkLogic install\r\n\t2. Starts with \"/\", look under App Server root\r\n\t3. Doesn't start with \"/\", look relative to location of referencing module\r\n\t4. Contains scheme/network location (eg, \"http://\"), throw exception\r\n\r\nSo, everything's all well and good using leading \"/\" in the \"at\" expression until you want to reference the same code from multiple locations (really only a problem in local filesystem development thus far).  For Example:  \r\n\r\n- App Server 1 - This app server's root is pointed to its own code.  Absolute paths work fine. Bam!\r\n- App Server 2 - This app server's root is different.  It has its own code and also has a maven dependency declared on the code that's currently being run on App Server 1.  App Server 1 code is a module that I've packaged up and sent to the maven repo, but developing locally, I don't have a compile or package phase for running my app, so I create a symlink with the same name as the artifactId to where the code is that I want to reference.  To get my import statements that link App Server 2 to App Server 1 code to work, I have to add the artifactId at the front of the absolute path.  But, now the problem is the code within App Server 1, where it links to itself.  Because it uses the leading \"/\" (absolute), MarkLogic tries to resolve it under App Server root, which in this case is a different App Server entirely.  \r\n\r\nSo, am I stuck using relative paths at least inside of the App Server 1 code?\r\n\r\nDreams\r\n------\r\n\r\nAll I want in an import statement is to declare to my language that I want to use code that is stored elsewhere.  Can't we do that in fewer than 80 chars?  And couldn't there be a really cool convention (over configuration), for developers like me whose fingers tire from writing ranting blog posts, that, for example, could derive a path to the .xqy file from the namespace that follows said convention?  Finally, I can't help but think that there has to be an easier way for me to find and run bits of code from places besides my App Server root, even in local filesystem dev mode.\r\n\r\nHelp me, Obi-wan Kenobi, you're my only hope.", 
      "date_published": "2011-01-28 15:06:47", 
      "image_path": "", 
      "title_slug": "xquery-imports-marklogic", 
      "rendered_body": "<div class=\"section\" id=\"length\">\n<h1>Length</h1>\n<p>Ridiculously long.  Example that speaks for itself:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>import module namespace translate = &quot;http://aprilandjake.com/audience/modules/content/translate&quot; at &quot;/modules/content/translate.xqy&quot;;\n</pre></div>\n</div><p>Ok, some of the blame here lies with me for picking a ridiculous namespace.  But it seems conventional to stick the domain on the front in proper URL fashion.  And then, I'm mirroring the path from app server root as the rest of the namespace, which takes me to repetition:</p>\n</div>\n<div class=\"section\" id=\"repetition\">\n<h1>Repetition</h1>\n<p>Doesn't it seem like we have the same data listed here twice.  From what I'm getting from the <a class=\"reference external\" href=\"http://www.w3.org/TR/xquery/#id-module-import\">W3C Xquery Spec</a>:</p>\n<blockquote>\nThe URILiterals that follow the at keyword are optional location hints, and can be interpreted or disregarded in an implementation-defined way.</blockquote>\n<p>The implementation I'm operating in is MarkLogic.  As far as I can tell, then url after the &quot;at&quot; is required in this implementation.  Can anyone fulfill a boyish dream of mine and tell me otherwise?  Please!</p>\n<p>So, I thought I was pretty cool creating a Live Template in IntelliJ to throw down this nasty import for my current project and save me a few keystrokes:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>import module namespace $NAME$ = &quot;http://aprilandjake.com/audience$PATH$&quot; at &quot;$PATH$.xqy&quot;;\n</pre></div>\n</div><p>So, then I could type the path from app server root to the library module file once and it would be duplicated, but now I get bitten by paths:</p>\n</div>\n<div class=\"section\" id=\"paths\">\n<h1>Paths</h1>\n<p>It seems like most of the Xquery code that I see uses absolute paths after the &quot;at&quot; in the import, as in:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>import module namespace myns = &quot;http://super.long/namespace/of/modules/death&quot; at &quot;/modules/death.xqy&quot;;\n</pre></div>\n</div><p>Note the leading slash.  So, I have done this in most of my code.  Remember, it helps my live template work as well (less typing overall).  Well, it seems that I may need to change my standard here, because the leading slash limits me, as I see it, in my code reuse.  Paraphrasing from the <a class=\"reference external\" href=\"http://docs.marklogic.com/4.2doc/docapp.xqy#display.xqy?fname=http://pubs/4.2doc/xml/dev_guide/import_modules.xml%2329407\">MarkLogic Documentation</a>:</p>\n<blockquote>\n<p>Paths in imports are resolved as follows:</p>\n<ol class=\"arabic simple\">\n<li>Starts with &quot;/&quot;, look under Modules subdir in MarkLogic install</li>\n<li>Starts with &quot;/&quot;, look under App Server root</li>\n<li>Doesn't start with &quot;/&quot;, look relative to location of referencing module</li>\n<li>Contains scheme/network location (eg, &quot;<a class=\"reference external\" href=\"http://\">http://</a>&quot;), throw exception</li>\n</ol>\n</blockquote>\n<p>So, everything's all well and good using leading &quot;/&quot; in the &quot;at&quot; expression until you want to reference the same code from multiple locations (really only a problem in local filesystem development thus far).  For Example:</p>\n<ul class=\"simple\">\n<li>App Server 1 - This app server's root is pointed to its own code.  Absolute paths work fine. Bam!</li>\n<li>App Server 2 - This app server's root is different.  It has its own code and also has a maven dependency declared on the code that's currently being run on App Server 1.  App Server 1 code is a module that I've packaged up and sent to the maven repo, but developing locally, I don't have a compile or package phase for running my app, so I create a symlink with the same name as the artifactId to where the code is that I want to reference.  To get my import statements that link App Server 2 to App Server 1 code to work, I have to add the artifactId at the front of the absolute path.  But, now the problem is the code within App Server 1, where it links to itself.  Because it uses the leading &quot;/&quot; (absolute), MarkLogic tries to resolve it under App Server root, which in this case is a different App Server entirely.</li>\n</ul>\n<p>So, am I stuck using relative paths at least inside of the App Server 1 code?</p>\n</div>\n<div class=\"section\" id=\"dreams\">\n<h1>Dreams</h1>\n<p>All I want in an import statement is to declare to my language that I want to use code that is stored elsewhere.  Can't we do that in fewer than 80 chars?  And couldn't there be a really cool convention (over configuration), for developers like me whose fingers tire from writing ranting blog posts, that, for example, could derive a path to the .xqy file from the namespace that follows said convention?  Finally, I can't help but think that there has to be an easier way for me to find and run bits of code from places besides my App Server root, even in local filesystem dev mode.</p>\n<p>Help me, Obi-wan Kenobi, you're my only hope.</p>\n</div>\n", 
      "date_updated": "2011-05-17 21:05:32", 
      "demo": "", 
      "markup": "r", 
      "title": "Xquery Imports on MarkLogic", 
      "source_path": "", 
      "collection": 1, 
      "summary": "When a person looks at an Xquery module import, ... um, sorry... he usually gets distracted by something else before he can get to the semicolon at the end of the statement.  They're seriously long!  Few are the files in which one-line imports adhere to an 80 character width limit.  Read on for my other Martin Luther-spirited grievances.", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-01-28 15:07:36", 
       
      "tags": "marklogic maven xquery"
    }
  }, 
  {
    "pk": 323, 
    "model": "blog.article", 
    "fields": {
      "body": "\r\n* Flatten your query - This means push your where clause into the xpath at the beginning of your FLOWR statement, limiting the amount of work you have to do once you're inside the for statement.\r\n\r\n* Limit your data set - Do whatever it takes.  You just want to get to the smallest set of data possible in the most direct way.  For us, that has meant putting the most specific predicate first or keeping active datasets in a collection (king of AoP-like, not affecting persisted XML data)\r\n\r\n* Query once, reference later - This comes pretty naturally in a, say, Oracle world, because it takes so much work to get down to the persistence layer and retrieve the data.  In xquery, the data sits so much closer to your app layer, giving you plenty of easy access.  Just think of it as taking another needless roundtrip to the database every time you want to run a little xpath action.\r\n\r\n* Favor xdmp:estimate() - If you can, use xdmp:estimate() because it's faster.  And, it's accurate if counting at fragment boundaries (doc roots).\r\n\r\n* Beware calculations - \"select count (id)\" might work snappy quick in sql, but do the same thing in xquery, and depending on your xpath or where clause, it's gonna work as slow as snot.  The biggest difference?  Probably that documents may need read into memory in their entirety for even a simple result like a count.  Lots of times, it might be good to design for pre-calculations, that happen before the calculation is actually even needed.  For instance, you could put all id's for docs in a certain state inside of a single doc, which is much cheaper to query than many.\r\n\r\n* Know your indexes - I'm definitely still learning this one:  which ones are being used implicitly w/o being setup by an admin.  Here's a pearl that we just picked up: Range indexes will significantly increase the performance of your order by clauses that use those indexed elements/attributes (including fn:distinct-values()).\r\n\r\n* Limit logging - By nature, file i/o can be expensive.  If you want to keep it in, but turn it off, protect it with a conditional (it's a lazy calculation and hopefully a cheap one too).\r\n\r\n* Beware the double slash - This is a given, even for the xquery newb.  This is tree traversal galore.  Then again, don't be afraid to use it, when helpful, for data sets that are always guaranteed to be known and small.\r\n\r\n* Utilize search functions - MarkLogic, for instance, has many performance optimizations built into its search capability.  Sometimes it will be more performant to use a search function as opposed to raw xpath.  For example, if an element personId is supplant deep in the bowels of an xml document, requiring xpath muscle to get in, find docs with a particular personId, and return the set, you could do something simple like cts:search(/doc,cts:element-word-query(xs:QName(\"personId\"), $personId)) that could be legions faster.\r\n\r\nThose are some dev tips, here are your tools, really quickly:\r\n\r\n* Known and love `CQ <http://developer.marklogic.com/code/cq>`_ and its profiler\r\n\r\n* xdmp:query-trace() and  xdmp:query-meters()\r\n\r\n* Some code to generate large amounts of data for you to test on\r\n\r\nFinally:\r\n\r\n* There are a few more tips in the Priscilla Walmsley `XQuery <http://www.amazon.com/XQuery-Priscilla-Walmsley/dp/0596006349/ref=sr_1_1?ie=UTF8&s=books&qid=1278002233&sr=8-1>`_ book, chapter 15.\r\n\r\n- Performance guide available at `developer.marklogic.org <http://developer.marklogic.com/docs>`_.\r\n\r\nHappy coding.  And remember, it's always possible to write bad, unperformant code.\r\n\r\n", 
      "date_published": "2010-07-01 10:39:04", 
      "image_path": "", 
      "title_slug": "xquery-optimization-tips", 
      "rendered_body": "<ul class=\"simple\">\n<li>Flatten your query - This means push your where clause into the xpath at the beginning of your FLOWR statement, limiting the amount of work you have to do once you're inside the for statement.</li>\n<li>Limit your data set - Do whatever it takes.  You just want to get to the smallest set of data possible in the most direct way.  For us, that has meant putting the most specific predicate first or keeping active datasets in a collection (king of AoP-like, not affecting persisted XML data)</li>\n<li>Query once, reference later - This comes pretty naturally in a, say, Oracle world, because it takes so much work to get down to the persistence layer and retrieve the data.  In xquery, the data sits so much closer to your app layer, giving you plenty of easy access.  Just think of it as taking another needless roundtrip to the database every time you want to run a little xpath action.</li>\n<li>Favor xdmp:estimate() - If you can, use xdmp:estimate() because it's faster.  And, it's accurate if counting at fragment boundaries (doc roots).</li>\n<li>Beware calculations - &quot;select count (id)&quot; might work snappy quick in sql, but do the same thing in xquery, and depending on your xpath or where clause, it's gonna work as slow as snot.  The biggest difference?  Probably that documents may need read into memory in their entirety for even a simple result like a count.  Lots of times, it might be good to design for pre-calculations, that happen before the calculation is actually even needed.  For instance, you could put all id's for docs in a certain state inside of a single doc, which is much cheaper to query than many.</li>\n<li>Know your indexes - I'm definitely still learning this one:  which ones are being used implicitly w/o being setup by an admin.  Here's a pearl that we just picked up: Range indexes will significantly increase the performance of your order by clauses that use those indexed elements/attributes (including fn:distinct-values()).</li>\n<li>Limit logging - By nature, file i/o can be expensive.  If you want to keep it in, but turn it off, protect it with a conditional (it's a lazy calculation and hopefully a cheap one too).</li>\n<li>Beware the double slash - This is a given, even for the xquery newb.  This is tree traversal galore.  Then again, don't be afraid to use it, when helpful, for data sets that are always guaranteed to be known and small.</li>\n<li>Utilize search functions - MarkLogic, for instance, has many performance optimizations built into its search capability.  Sometimes it will be more performant to use a search function as opposed to raw xpath.  For example, if an element personId is supplant deep in the bowels of an xml document, requiring xpath muscle to get in, find docs with a particular personId, and return the set, you could do something simple like cts:search(/doc,cts:element-word-query(xs:QName(&quot;personId&quot;), $personId)) that could be legions faster.</li>\n</ul>\n<p>Those are some dev tips, here are your tools, really quickly:</p>\n<ul class=\"simple\">\n<li>Known and love <a class=\"reference external\" href=\"http://developer.marklogic.com/code/cq\">CQ</a> and its profiler</li>\n<li>xdmp:query-trace() and  xdmp:query-meters()</li>\n<li>Some code to generate large amounts of data for you to test on</li>\n</ul>\n<p>Finally:</p>\n<ul class=\"simple\">\n<li>There are a few more tips in the Priscilla Walmsley <a class=\"reference external\" href=\"http://www.amazon.com/XQuery-Priscilla-Walmsley/dp/0596006349/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1278002233&amp;sr=8-1\">XQuery</a> book, chapter 15.</li>\n</ul>\n<ul class=\"simple\">\n<li>Performance guide available at <a class=\"reference external\" href=\"http://developer.marklogic.com/docs\">developer.marklogic.org</a>.</li>\n</ul>\n<p>Happy coding.  And remember, it's always possible to write bad, unperformant code.</p>\n", 
      "date_updated": "2010-07-01 10:39:58", 
      "demo": "", 
      "markup": "r", 
      "title": "Xquery Optimization Tips", 
      "source_path": "", 
      "collection": 1, 
      "summary": "My first xquery experience has been on the MarkLogic platform.  The project that we just released was written entirely in xquery and on that platform.  As our site continues to gains popularity, we continue to realize how little about xquery we knew or know.  Sometimes and in some places, the site is just really not that performant.  \"But I thought MarkLogic/xquery is super-scalable,\" some exclaim indignantly.  If you do it right, an Oracle relational database can be made to scale.  Done wrong, a MarkLogic database can be made to not scale at all.  There's a lot to be said about knowledge of the platform, the language, and how to wrestle it to do your bidding.  Here are a few optimization ditties that I've collected as of late that might help in your future xquery dev.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2010-07-01 10:39:58", 
       
      "tags": "marklogic performance xquery"
    }
  }, 
  {
    "pk": 383, 
    "model": "blog.article", 
    "fields": {
      "body": "But we could easily add another module for displaying a breadcrumb, because our code is properly decoupled.  I created this module to accompany a presentation at the MarkLogic Users Conference on unit testing XQuery on MarkLogic, but the original idea for such data and such a website widget came from the lds.org site of the Church of Jesus Christ of Latter-day Saints.\r\n\r\nThe code is broken down into two main functions:\r\n\r\n* The site's important links are taken from the \"channel\" data in XML and queried based on the site visitor's current url.  A subset of the channel data is filtered with the path down the channel hierarchy to the active path marked.\r\n* The active channel XML element is then passed to a function that transforms the data into HTML to be rendered in the web browser.\r\n\r\nThe project was \"recorded\" in a series of git checkins to show the evolution of the code through the process of test-driven development.  Normally, one would probably not check in all the states that I did, but I wanted to clearly show that a test is written first, fails, then code is written, and the test suite now passes.  So, when inspecting the revisions, start at revision 0, where essentially no source code is written and the first tests are added, and one will see a series of alternating \"red\" and \"green\"-labelled git log notes.\r\n\r\nThe tests are written in XQuery to be ran in a test runner called XqTest.  The test runner was being actively developed at the same time I wrote xquery-suez, so there were some necessary changes to the api late in the process.  For example, don't worry so much about actual function names used for things like assertions early in the revisions as much as just the actions being made to assert.\r\n\r\nFor one either unfamiliar with the test-driven development process or with the XQuery language itself, I hope the examiner finds a few things to help him by working through the xquery-suez revisions:\r\n\r\n* The test-driven development workflow and rhythm.  I can really work!\r\n* The phases of development.  For example, starting from earlier revisions working forward, I see phases in my own development such as:\r\n\r\n  * Separation of concern\r\n  * Basic requirements implementation\r\n  * Clean up and bug fixing\r\n  * Testing requirement boundaries\r\n  * Expanding feature set and adding tests\r\n  * Integration of decoupled modules\r\n\r\n* Where I made mistakes or changed things but still made it through:\r\n\r\n  * Renaming, rethinking function and module boundaries\r\n  * Cleaning naming\r\n  * Adjusted function signatures\r\n  * Fixed test data\r\n  * Adjusted tests\r\n  * Updated the test runner API\r\n\r\nThe process is not perfect.  This was a partially scripted exercise, and there were still bugs found, tests that weren\u2019t 100% accurate when first written, separation of concern that happened along the way, and not even a perfect implementation when used at the end.  But I think the exercise meets its purpose in showing the evolution and rhythm of test-driven development, all in XQuery.  So, please be patient with my XQuery kung fu.  \r\n", 
      "date_published": "2011-05-27 11:26:32", 
      "image_path": "", 
      "title_slug": "xquery-suez", 
      "rendered_body": "<p>But we could easily add another module for displaying a breadcrumb, because our code is properly decoupled.  I created this module to accompany a presentation at the MarkLogic Users Conference on unit testing XQuery on MarkLogic, but the original idea for such data and such a website widget came from the lds.org site of the Church of Jesus Christ of Latter-day Saints.</p>\n<p>The code is broken down into two main functions:</p>\n<ul class=\"simple\">\n<li>The site's important links are taken from the &quot;channel&quot; data in XML and queried based on the site visitor's current url.  A subset of the channel data is filtered with the path down the channel hierarchy to the active path marked.</li>\n<li>The active channel XML element is then passed to a function that transforms the data into HTML to be rendered in the web browser.</li>\n</ul>\n<p>The project was &quot;recorded&quot; in a series of git checkins to show the evolution of the code through the process of test-driven development.  Normally, one would probably not check in all the states that I did, but I wanted to clearly show that a test is written first, fails, then code is written, and the test suite now passes.  So, when inspecting the revisions, start at revision 0, where essentially no source code is written and the first tests are added, and one will see a series of alternating &quot;red&quot; and &quot;green&quot;-labelled git log notes.</p>\n<p>The tests are written in XQuery to be ran in a test runner called XqTest.  The test runner was being actively developed at the same time I wrote xquery-suez, so there were some necessary changes to the api late in the process.  For example, don't worry so much about actual function names used for things like assertions early in the revisions as much as just the actions being made to assert.</p>\n<p>For one either unfamiliar with the test-driven development process or with the XQuery language itself, I hope the examiner finds a few things to help him by working through the xquery-suez revisions:</p>\n<ul class=\"simple\">\n<li>The test-driven development workflow and rhythm.  I can really work!</li>\n<li>The phases of development.  For example, starting from earlier revisions working forward, I see phases in my own development such as:<ul>\n<li>Separation of concern</li>\n<li>Basic requirements implementation</li>\n<li>Clean up and bug fixing</li>\n<li>Testing requirement boundaries</li>\n<li>Expanding feature set and adding tests</li>\n<li>Integration of decoupled modules</li>\n</ul>\n</li>\n<li>Where I made mistakes or changed things but still made it through:<ul>\n<li>Renaming, rethinking function and module boundaries</li>\n<li>Cleaning naming</li>\n<li>Adjusted function signatures</li>\n<li>Fixed test data</li>\n<li>Adjusted tests</li>\n<li>Updated the test runner API</li>\n</ul>\n</li>\n</ul>\n<p>The process is not perfect.  This was a partially scripted exercise, and there were still bugs found, tests that weren\u2019t 100% accurate when first written, separation of concern that happened along the way, and not even a perfect implementation when used at the end.  But I think the exercise meets its purpose in showing the evolution and rhythm of test-driven development, all in XQuery.  So, please be patient with my XQuery kung fu.</p>\n", 
      "date_updated": "2011-05-27 11:28:05", 
      "demo": "", 
      "markup": "r", 
      "title": "Xquery Suez", 
      "source_path": "", 
      "collection": 1, 
      "summary": "The xquery-suez project is a case study in test-driven development in XQuery.  It is a small demo app that takes data that essentially represents a sitemap for important locations on a website, and then transforms them into navigation elements based on the current context of the site visitor.  For example, the code currently has code for a navigation sidebar:\r\n", 
      "source": "", 
      "user": 1, 
      "active": false, 
      "date_created": "2011-05-27 11:28:05", 
       
      "tags": "marklogic unit-testing xquery"
    }
  }, 
  {
    "pk": 376, 
    "model": "blog.article", 
    "fields": {
      "body": "Code for the helper should be available as soon as permission has been granted to share it.\r\n\r\nMore to come...", 
      "date_published": "2011-04-26 20:27:29", 
      "image_path": "", 
      "title_slug": "xquery-transaction-helper", 
      "rendered_body": "<p>Code for the helper should be available as soon as permission has been granted to share it.</p>\n<p>More to come...</p>\n", 
      "date_updated": "2011-04-26 22:47:24", 
      "demo": "tyrian66/TransactionHelper.pdf", 
      "markup": "r", 
      "title": "XQuery Transaction Helper", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Transactions in MarkLogic can sometimes be challenging to work with due to restrictions such as inter-transaction visibility, transaction control, single update limitations, and non-transactional file system updates. Isolating code that updates portions of documents that may be called multiple times during a transaction can be complicated. Check out a simple transaction helper framework that addresses these difficulties.\r\n\r\nThe demo is a link to a presentation given at the 2011 MarkLogic Conference in San Francisco.", 
      "source": "", 
      "user": 10, 
      "active": true, 
      "date_created": "2011-04-26 20:31:50", 

      "tags": "marklogic transactions xquery"
    }
  }, 
  {
    "pk": 357, 
    "model": "blog.article", 
    "fields": {
      "body": "First of all, you need an xsd schema to show the database what you expect your data to look like.  From the w3schools xsd example , `here's a sweet schema <http://www.w3schools.com/schema/schema_howto.asp>`_:\r\n\r\n.. code-block:: xml\r\n\r\n\t<?xml version=\"1.0\"?>\r\n\t<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\r\n\ttargetNamespace=\"http://www.w3schools.com\"\r\n\txmlns=\"http://www.w3schools.com\"\r\n\telementFormDefault=\"qualified\">\r\n\r\n\t<xs:element name=\"note\">\r\n\t  <xs:complexType>\r\n\t\t<xs:sequence>\r\n\t\t  <xs:element name=\"to\" type=\"xs:string\"/>\r\n\t\t  <xs:element name=\"from\" type=\"xs:string\"/>\r\n\t\t  <xs:element name=\"heading\" type=\"xs:string\"/>\r\n\t\t  <xs:element name=\"body\" type=\"xs:string\"/>\r\n\t\t</xs:sequence>\r\n\t  </xs:complexType>\r\n\t</xs:element>\r\n\r\n\t</xs:schema>\r\n\r\nFirst, save the xsd in the Schemas database.  If you want to webdav in, connect to port 8902 and create a directory structure that matches the xsd target namespace:\r\n\r\n.. code-block:: general\r\n\r\n\thttp://  >  www.w3schools.com \r\n\t\r\nAnd drop your schema in there.\r\n\r\nIf you want to verify the location of your xsds, run a little cmd in CQ against the Schemas db:\r\n\r\n.. code-block:: xquery\r\n\r\n\tfn:base-uri(/xs:schema)\r\n\t\r\nNext, let's get us a document to validate (again, from w3schools' example):\r\n\r\n.. code-block:: xml\r\n\r\n\t<note>\r\n\t  <to>April</to>\r\n\t  <from>Jake</from>\r\n\t  <heading>Reminder</heading>\r\n\t  <body>Don't forget me this weekend!</body>\r\n\t</note>\r\n\t\r\nAnd finally to validate.  There are two modes, strict (default) and lax.  I've been using strict, because lax really is.  And a little more CQ action:\r\n\r\n.. code-block:: xquery\r\n\r\n\timport module namespace functx = \"http://www.functx.com\" at \"/MarkLogic/functx/functx-1.0-nodoc-2007-01.xqy\";\r\n\r\n\tlet $document := \r\n\t\t<note>\r\n\t\t  <to>April</to>\r\n\t\t  <from>Jake</from>\r\n\t\t  <heading>Reminder</heading>\r\n\t\t  <body>Don't forget me this weekend!</body>\r\n\t\t</note>\r\n\tlet $doc-to-validate := functx:change-element-ns-deep( $document, \"http://www.w3schools.com\", \"awesome\" )\r\n\treturn validate strict { $doc-to-validate }\r\n\t\r\nTo explain, we pull in our doc, we attach a namespace to it (since we didn't already specify one), and validate away.  If your doc fails validation against the schema, prepare to see the first error encountered.  In another experiment, I was getting beauties like these:\r\n\r\n- validate strict { $doc-to-validate } -- Missing element declaration: Expected declaration for node ...\r\n- validate strict { $doc-to-validate } -- Missing required attribute: Found () but required (@type & @uuid? ...\r\n- validate strict { $doc-to-validate } -- Invalid node type: @type lexical value \"asdf\" invalid for expected type ...\r\n\r\nBeauties, eh?\r\n\r\nThe one-at-a-time error reported stinketh a bit to me.  With a function whose job it is to provide a picture of how well (or not) a document matches a schema, I think it would be more fitting to provide a report (perhaps in beautiful xml) of what all the issues are that were found.  \r\n\r\nCheers!  And a happy new year filled with valid documents.\r\n", 
      "date_published": "2011-01-04 14:45:43", 
      "image_path": "", 
      "title_slug": "xsd-validation-marklogic", 
      "rendered_body": "<p>First of all, you need an xsd schema to show the database what you expect your data to look like.  From the w3schools xsd example , <a class=\"reference external\" href=\"http://www.w3schools.com/schema/schema_howto.asp\">here's a sweet schema</a>:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"cp\">&lt;?xml version=&quot;1.0&quot;?&gt;</span>\n<span class=\"nt\">&lt;xs:schema</span> <span class=\"na\">xmlns:xs=</span><span class=\"s\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>\n<span class=\"na\">targetNamespace=</span><span class=\"s\">&quot;http://www.w3schools.com&quot;</span>\n<span class=\"na\">xmlns=</span><span class=\"s\">&quot;http://www.w3schools.com&quot;</span>\n<span class=\"na\">elementFormDefault=</span><span class=\"s\">&quot;qualified&quot;</span><span class=\"nt\">&gt;</span>\n\n<span class=\"nt\">&lt;xs:element</span> <span class=\"na\">name=</span><span class=\"s\">&quot;note&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;xs:complexType&gt;</span>\n        <span class=\"nt\">&lt;xs:sequence&gt;</span>\n          <span class=\"nt\">&lt;xs:element</span> <span class=\"na\">name=</span><span class=\"s\">&quot;to&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;xs:string&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;xs:element</span> <span class=\"na\">name=</span><span class=\"s\">&quot;from&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;xs:string&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;xs:element</span> <span class=\"na\">name=</span><span class=\"s\">&quot;heading&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;xs:string&quot;</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;xs:element</span> <span class=\"na\">name=</span><span class=\"s\">&quot;body&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;xs:string&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/xs:sequence&gt;</span>\n  <span class=\"nt\">&lt;/xs:complexType&gt;</span>\n<span class=\"nt\">&lt;/xs:element&gt;</span>\n\n<span class=\"nt\">&lt;/xs:schema&gt;</span>\n</pre></div>\n</div><p>First, save the xsd in the Schemas database.  If you want to webdav in, connect to port 8902 and create a directory structure that matches the xsd target namespace:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>http://  &gt;  www.w3schools.com\n</pre></div>\n</div><p>And drop your schema in there.</p>\n<p>If you want to verify the location of your xsds, run a little cmd in CQ against the Schemas db:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>fn:base-uri(/xs:schema)\n</pre></div>\n</div><p>Next, let's get us a document to validate (again, from w3schools' example):</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;note&gt;</span>\n  <span class=\"nt\">&lt;to&gt;</span>April<span class=\"nt\">&lt;/to&gt;</span>\n  <span class=\"nt\">&lt;from&gt;</span>Jake<span class=\"nt\">&lt;/from&gt;</span>\n  <span class=\"nt\">&lt;heading&gt;</span>Reminder<span class=\"nt\">&lt;/heading&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>Don&#39;t forget me this weekend!<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/note&gt;</span>\n</pre></div>\n</div><p>And finally to validate.  There are two modes, strict (default) and lax.  I've been using strict, because lax really is.  And a little more CQ action:</p>\n<div class=\"codeblock\"><div class=\"highlight\"><pre>import module namespace functx = &quot;http://www.functx.com&quot; at &quot;/MarkLogic/functx/functx-1.0-nodoc-2007-01.xqy&quot;;\n\nlet $document :=\n        &lt;note&gt;\n          &lt;to&gt;April&lt;/to&gt;\n          &lt;from&gt;Jake&lt;/from&gt;\n          &lt;heading&gt;Reminder&lt;/heading&gt;\n          &lt;body&gt;Don&#39;t forget me this weekend!&lt;/body&gt;\n        &lt;/note&gt;\nlet $doc-to-validate := functx:change-element-ns-deep( $document, &quot;http://www.w3schools.com&quot;, &quot;awesome&quot; )\nreturn validate strict { $doc-to-validate }\n</pre></div>\n</div><p>To explain, we pull in our doc, we attach a namespace to it (since we didn't already specify one), and validate away.  If your doc fails validation against the schema, prepare to see the first error encountered.  In another experiment, I was getting beauties like these:</p>\n<ul class=\"simple\">\n<li>validate strict { $doc-to-validate } -- Missing element declaration: Expected declaration for node ...</li>\n<li>validate strict { $doc-to-validate } -- Missing required attribute: Found () but required (&#64;type &amp; &#64;uuid? ...</li>\n<li>validate strict { $doc-to-validate } -- Invalid node type: &#64;type lexical value &quot;asdf&quot; invalid for expected type ...</li>\n</ul>\n<p>Beauties, eh?</p>\n<p>The one-at-a-time error reported stinketh a bit to me.  With a function whose job it is to provide a picture of how well (or not) a document matches a schema, I think it would be more fitting to provide a report (perhaps in beautiful xml) of what all the issues are that were found.</p>\n<p>Cheers!  And a happy new year filled with valid documents.</p>\n", 
      "date_updated": "2011-01-04 14:47:23", 
      "demo": "", 
      "markup": "r", 
      "title": "XSD Validation in MarkLogic", 
      "source_path": "", 
      "collection": 1, 
      "summary": "Sometimes you want to ensure that your xml document matches a given schema (xsd).  Xquery on MarkLogic gives you a few tools to do this.  If you want to validate your xml against an xsd, read on fair reader.\r\n", 
      "source": "", 
      "user": 1, 
      "active": true, 
      "date_created": "2011-01-04 14:46:21", 
       
      "tags": "marklogic xml xquery xsd"
    }
  }, 
  {
    "pk": 1, 
    "model": "blog.profile", 
    "fields": {
      "website": "http://builtbyjake.com", 
      "bio": "Jake wrestles mean codes during the day, comes home to his beautiful wife, superstar son and delightful daughter in the evenings, and enjoys every day of it.  RockyCode is one of his brain children, a prize of battle, won after a legendary struggle with his innermost thoughts and unwieldy hex digits.  ", 
      "image_path": "http://lh6.ggpht.com/_5XZCKcD6--c/S-CmqxTKNaI/AAAAAAAAMps/sqEbr8uAEnQ/s800/jake-avatar.jpg", 
      "google_chatback": "http://www.google.com/talk/service/badge/Start?tk=z01q6amlqv37opf4bgh3sl1lkfomakiu4p5obp7p7f7s5j3jhcrjgu524hs827rfh7b58g3cg95rtldocd1gc8fdsgn7095sl4e0tirahjpjhat1tpq3c6sfk8cc3b9oghrgkpe6lk4agjks2vhvkfgsd94d88p0gr91a53cc", 
      "twitter": "http://www.twitter.com/aprilandjake", 
      "linkedin": "", 
      "location": "Salt Lake City, Utah", 
      "user": 1
    }
  }, 
  {
    "pk": 2, 
    "model": "blog.profile", 
    "fields": {
      "website": "", 
      "bio": "Olyo (Steven Douglas Olson) has been a software developer for twenty years, starting with Fortran, Pascal, Basic, and later, C at a company called Signetics. While at Novell, he began dabbling in Java, and in 1995, he was among the first to join Novell's Java development group. He's since consulted or worked directly for eight other companies, writing primarily in Java. He currently works as a consultant for the Church of Jesus Christ of Latter-day Saints in Salt Lake City, Utah.", 
      "image_path": "http://www.steveolyo.com/timp0210.jpeg", 
      "google_chatback": "", 
      "twitter": "", 
      "linkedin": "", 
      "location": "", 
      "user": 2
    }
  }, 
  {
    "pk": 3, 
    "model": "blog.profile", 
    "fields": {
      "website": "", 
      "bio": "I have worked in software development since 2007. After graduating college in Information Systems Security, the QA world was opened unto me.  It didn't take long to pick up the automation testing and stick with it.\r\n\r\nI love building code to do the testing for me.  I currently use a custom built framework using C#, WatiN and WebDriver, NAnt, NUnit and Team City.\r\n\r\nI currently work as a QA Engineer in Riverton, Utah.  I am married with 3 kids, who like to keep us on our toes!", 
      "image_path": "http://bryanandcheryl.smugmug.com/Vacation/2009-San-Diego-Trip-Misc/SanDiegoTrip20095-552/735015985_vtgCM-Ti.jpg", 
      "google_chatback": "http://www.google.com/talk/service/badge/Start?tk=z01q6amlq18f1ee4tpbjl21nsr4ne220bq61f18ur4hiulbsb32lu9eq6mfv6v7dqcr9s75nh0t8f0e2q78rnnl8nrqi04ia044klf7n3q1l2800vgakq4g7obkr0h5b1qqu6tps0kg3hi3mffjtgp5m1no42l5necu07ivkk ", 
      "twitter": "", 
      "linkedin": "http://www.linkedin.com/pub/bryan-robinson/5/502/663", 
      "location": "Riverton, UT", 
      "user": 3
    }
  }, 
  {
    "pk": 4, 
    "model": "blog.profile", 
    "fields": {
      "website": "http://www.codekoala.com/", 
      "bio": "Josh is a software architect and web developer.  He's been playing with computers just about since the time he could reach a keyboard as a kid, and he began teaching himself how to program at the age of 10.  Josh studied computer science, computer information technology, and accounting at Brigham Young University - Idaho.  He served for two years as a missionary of the Church of Jesus Christ of Latter-day Saints in Romania from the end of 2003 to the end of 2005.\r\n\r\nJosh married Mindy Bartoli in April of 2007, and they had their first baby in August 2009.  His name is Logan, and he is one of the happiest babies you'll ever encounter.  Josh is currently working as a software architect, writing Python code all day long, for ScienceLogic LLC in Reston, VA.", 
      "image_path": "http://2ze.us/i_M", 
      "google_chatback": "", 
      "twitter": "codekoala", 
      "linkedin": "", 
      "location": "NOVA", 
      "user": 4
    }
  }, 
  {
    "pk": 5, 
    "model": "blog.profile", 
    "fields": {
      "website": "", 
      "bio": "Colin took an internship with a radio station back in 1996 hoping to start a career in broadcast. Instead of doing anything on air, he ended up writing raw html when the web was still young and got his first tastes of web programming. He hasn't looked back since (though still wonders 'what could have been...?'). Colin has spent more time programming in less traditional languages like XSLT and XQuery, but adds php, java, javascript, css, even a bit of objective-c and cocoa.", 
      "image_path": "http://sphotos.ak.fbcdn.net/photos-ak-snc1/v1511/29/91/642391924/n642391924_1231382_7592.jpg", 
      "google_chatback": "", 
      "twitter": "http://www.twitter.com/colinkun", 
      "linkedin": "", 
      "location": "Salt Lake City, UT", 
      "user": 5
    }
  }, 
  {
    "pk": 6, 
    "model": "blog.profile", 
    "fields": {
      "website": "", 
      "bio": "Ted (pronounced \"ED-ward\") is a linux proselytizer who really wishes he had enough money to be a Mac proselytizer. He considers himself to be a configuration geek simply because he figured out how to configure his e-mail client to work with his company's Microsoft Exchange Server. He thought he loved Java until he discovered that \"Love means never having to say you're static.\" He now professes his adoration for Ruby.", 
      "image_path": "http://lh3.googleusercontent.com/_mA-9kCcx0bs/TbhHGcx9NmI/AAAAAAAAADc/KE6GZL3e1b0/s800/ted.jpg", 
      "google_chatback": "", 
      "twitter": "", 
      "linkedin": "", 
      "location": "Salt Lake City", 
      "user": 6
    }
  }, 
  {
    "pk": 7, 
    "model": "blog.profile", 
    "fields": {
      "website": "http://raztus.blogspot.com/", 
      "bio": "John graduated from Utah State University with a BA in Management Information Systems.  He works full-time doing web development, currently utilizing MarkLogic and XQuery.  His primary technological interest currently lies in discovering new (and very old) scripting languages, and he's currently enamored by TCL.  He pretends to be a Linux evangelist, but he's really still in the hobbyist stage, though his allegiance is rapidly waxing.  His time not in front of a glowing rectangle is spent chasing his bride of one year.  ", 
      "image_path": "http://lh6.googleusercontent.com/_mA-9kCcx0bs/TbhHIJGtc7I/AAAAAAAAADg/kGV9kE2a-p4/s800/coulter.jpg", 
      "google_chatback": "http://www.google.com/talk/service/badge/Start?tk=z01q6amlq1bbg0rl2fsenijk7v4fpgiu4o07v6anmi40rvak0ojqgfo7u9lmvrv6fq9ellt12bpbp1jprgproierfaabpub8p77j8s5btse1c2tsso7spo2onc66chpes4ho1dms9tq6omppa4hpo1ljob4vtrh84f3ekkmh2", 
      "twitter": "http://twitter.com/raztus_", 
      "linkedin": "", 
      "location": "Eagle Mountain, Utah", 
      "user": 7
    }
  }, 
  {
    "pk": 8, 
    "model": "blog.profile", 
    "fields": {
      "website": "http://ldstech.org", 
      "bio": "David Hale dabbled with Java during college back in 1995 but didn't work with it in earnest until ten years later. David prefers working smarter over working harder and has been known to go to great lengths to avoid repetitive work even if it means spending more time on the solution over all.  He keeps busy with six kids, boy scouts, a garden, and a flock of laying hens. (He is working on a rotating coop design to get easy eggs and the best garden soil will minimal maintenance.)", 
      "image_path": "http://lh4.ggpht.com/_a8s_ucNbPN8/SxMnTQyHMNI/AAAAAAAAAuY/s6OMCKBwjBY/s128/avatar2.jpg", 
      "google_chatback": "", 
      "twitter": "http://twitter.com/davidnhale", 
      "linkedin": "http://www.linkedin.com/in/davidnhale", 
      "location": "Herriman, Utah", 
      "user": 8
    }
  }, 
  {
    "pk": 9, 
    "model": "blog.profile", 
    "fields": {
      "website": "", 
      "bio": "David  has 24 years experience working as software engineer and architect in varying fields, including health care, medical decision support systems, eCommerce, messaging, manufacturing and business simulation, statistical analysis, application server and language design and implementation. He has participated in internet standards work and holds multiple patents for GE Healthcare. He has 3 years of intense MarkLogic and XQuery enterprise experience, including design and implementation of enterprise application deployment.", 
      "image_path": "http://lh3.googleusercontent.com/_mA-9kCcx0bs/Tbee0UmOUsI/AAAAAAAAADI/KEerKrUjlQU/s800/DavidSteinerProfile100.jpg", 
      "google_chatback": "", 
      "twitter": "", 
      "linkedin": "", 
      "location": "Utah, USA", 
      "user": 10
    }
  }, 
  {
    "pk": 1, 
    "model": "flatpages.flatpage", 
    "fields": {
      "registration_required": false, 
      "title": "Awesome Sauce", 
      "url": "/awesome-sauce/", 
      "template_name": "templates/flatpages/default.html", 
      "sites": [
        1
      ], 
      "content": "<img src=\"http://3.bp.blogspot.com/_e5Uvvhvshuo/RsMuyJANUvI/AAAAAAAAAIk/FXPS9wBuWr4/s1600-h/Nacho.jpg\" />", 
      "enable_comments": false
    }
  }, 
  {
    "pk": 22, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_logentry", 
      "name": "Can add log entry", 
      "content_type": [
        "admin", 
        "logentry"
      ]
    }
  }, 
  {
    "pk": 23, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_logentry", 
      "name": "Can change log entry", 
      "content_type": [
        "admin", 
        "logentry"
      ]
    }
  }, 
  {
    "pk": 24, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_logentry", 
      "name": "Can delete log entry", 
      "content_type": [
        "admin", 
        "logentry"
      ]
    }
  }, 
  {
    "pk": 4, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_group", 
      "name": "Can add group", 
      "content_type": [
        "auth", 
        "group"
      ]
    }
  }, 
  {
    "pk": 5, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_group", 
      "name": "Can change group", 
      "content_type": [
        "auth", 
        "group"
      ]
    }
  }, 
  {
    "pk": 6, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_group", 
      "name": "Can delete group", 
      "content_type": [
        "auth", 
        "group"
      ]
    }
  }, 
  {
    "pk": 10, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_message", 
      "name": "Can add message", 
      "content_type": [
        "auth", 
        "message"
      ]
    }
  }, 
  {
    "pk": 11, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_message", 
      "name": "Can change message", 
      "content_type": [
        "auth", 
        "message"
      ]
    }
  }, 
  {
    "pk": 12, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_message", 
      "name": "Can delete message", 
      "content_type": [
        "auth", 
        "message"
      ]
    }
  }, 
  {
    "pk": 1, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_permission", 
      "name": "Can add permission", 
      "content_type": [
        "auth", 
        "permission"
      ]
    }
  }, 
  {
    "pk": 2, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_permission", 
      "name": "Can change permission", 
      "content_type": [
        "auth", 
        "permission"
      ]
    }
  }, 
  {
    "pk": 3, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_permission", 
      "name": "Can delete permission", 
      "content_type": [
        "auth", 
        "permission"
      ]
    }
  }, 
  {
    "pk": 7, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_user", 
      "name": "Can add user", 
      "content_type": [
        "auth", 
        "user"
      ]
    }
  }, 
  {
    "pk": 8, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_user", 
      "name": "Can change user", 
      "content_type": [
        "auth", 
        "user"
      ]
    }
  }, 
  {
    "pk": 9, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_user", 
      "name": "Can delete user", 
      "content_type": [
        "auth", 
        "user"
      ]
    }
  }, 
  {
    "pk": 55, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_article", 
      "name": "Can add article", 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 56, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_article", 
      "name": "Can change article", 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 57, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_article", 
      "name": "Can delete article", 
      "content_type": [
        "blog", 
        "article"
      ]
    }
  }, 
  {
    "pk": 52, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_collection", 
      "name": "Can add collection", 
      "content_type": [
        "blog", 
        "collection"
      ]
    }
  }, 
  {
    "pk": 53, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_collection", 
      "name": "Can change collection", 
      "content_type": [
        "blog", 
        "collection"
      ]
    }
  }, 
  {
    "pk": 54, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_collection", 
      "name": "Can delete collection", 
      "content_type": [
        "blog", 
        "collection"
      ]
    }
  }, 
  {
    "pk": 58, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_profile", 
      "name": "Can add profile", 
      "content_type": [
        "blog", 
        "profile"
      ]
    }
  }, 
  {
    "pk": 59, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_profile", 
      "name": "Can change profile", 
      "content_type": [
        "blog", 
        "profile"
      ]
    }
  }, 
  {
    "pk": 60, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_profile", 
      "name": "Can delete profile", 
      "content_type": [
        "blog", 
        "profile"
      ]
    }
  }, 
  {
    "pk": 49, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_template", 
      "name": "Can add template", 
      "content_type": [
        "blog", 
        "template"
      ]
    }
  }, 
  {
    "pk": 50, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_template", 
      "name": "Can change template", 
      "content_type": [
        "blog", 
        "template"
      ]
    }
  }, 
  {
    "pk": 51, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_template", 
      "name": "Can delete template", 
      "content_type": [
        "blog", 
        "template"
      ]
    }
  }, 
  {
    "pk": 13, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_contenttype", 
      "name": "Can add content type", 
      "content_type": [
        "contenttypes", 
        "contenttype"
      ]
    }
  }, 
  {
    "pk": 14, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_contenttype", 
      "name": "Can change content type", 
      "content_type": [
        "contenttypes", 
        "contenttype"
      ]
    }
  }, 
  {
    "pk": 15, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_contenttype", 
      "name": "Can delete content type", 
      "content_type": [
        "contenttypes", 
        "contenttype"
      ]
    }
  }, 
  {
    "pk": 61, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_flatpage", 
      "name": "Can add flat page", 
      "content_type": [
        "flatpages", 
        "flatpage"
      ]
    }
  }, 
  {
    "pk": 62, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_flatpage", 
      "name": "Can change flat page", 
      "content_type": [
        "flatpages", 
        "flatpage"
      ]
    }
  }, 
  {
    "pk": 63, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_flatpage", 
      "name": "Can delete flat page", 
      "content_type": [
        "flatpages", 
        "flatpage"
      ]
    }
  }, 
  {
    "pk": 16, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_session", 
      "name": "Can add session", 
      "content_type": [
        "sessions", 
        "session"
      ]
    }
  }, 
  {
    "pk": 17, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_session", 
      "name": "Can change session", 
      "content_type": [
        "sessions", 
        "session"
      ]
    }
  }, 
  {
    "pk": 18, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_session", 
      "name": "Can delete session", 
      "content_type": [
        "sessions", 
        "session"
      ]
    }
  }, 
  {
    "pk": 19, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_site", 
      "name": "Can add site", 
      "content_type": [
        "sites", 
        "site"
      ]
    }
  }, 
  {
    "pk": 20, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_site", 
      "name": "Can change site", 
      "content_type": [
        "sites", 
        "site"
      ]
    }
  }, 
  {
    "pk": 21, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_site", 
      "name": "Can delete site", 
      "content_type": [
        "sites", 
        "site"
      ]
    }
  }, 
  {
    "pk": 25, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_tag", 
      "name": "Can add tag", 
      "content_type": [
        "tagging", 
        "tag"
      ]
    }
  }, 
  {
    "pk": 26, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_tag", 
      "name": "Can change tag", 
      "content_type": [
        "tagging", 
        "tag"
      ]
    }
  }, 
  {
    "pk": 27, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_tag", 
      "name": "Can delete tag", 
      "content_type": [
        "tagging", 
        "tag"
      ]
    }
  }, 
  {
    "pk": 28, 
    "model": "auth.permission", 
    "fields": {
      "codename": "add_taggeditem", 
      "name": "Can add tagged item", 
      "content_type": [
        "tagging", 
        "taggeditem"
      ]
    }
  }, 
  {
    "pk": 29, 
    "model": "auth.permission", 
    "fields": {
      "codename": "change_taggeditem", 
      "name": "Can change tagged item", 
      "content_type": [
        "tagging", 
        "taggeditem"
      ]
    }
  }, 
  {
    "pk": 30, 
    "model": "auth.permission", 
    "fields": {
      "codename": "delete_taggeditem", 
      "name": "Can delete tagged item", 
      "content_type": [
        "tagging", 
        "taggeditem"
      ]
    }
  }, 
  {
    "pk": 1, 
    "model": "auth.group", 
    "fields": {
      "name": "Contributor", 
      "permissions": [
        [
          "add_article", 
          "blog", 
          "article"
        ], 
        [
          "change_article", 
          "blog", 
          "article"
        ], 
        [
          "delete_article", 
          "blog", 
          "article"
        ], 
        [
          "add_profile", 
          "blog", 
          "profile"
        ], 
        [
          "change_profile", 
          "blog", 
          "profile"
        ], 
        [
          "delete_profile", 
          "blog", 
          "profile"
        ], 
        [
          "add_tag", 
          "tagging", 
          "tag"
        ], 
        [
          "add_taggeditem", 
          "tagging", 
          "taggeditem"
        ], 
        [
          "change_taggeditem", 
          "tagging", 
          "taggeditem"
        ], 
        [
          "delete_taggeditem", 
          "tagging", 
          "taggeditem"
        ]
      ]
    }
  }, 
  {
    "pk": 1, 
    "model": "auth.user", 
    "fields": {
      "username": "jtsnake", 
      "first_name": "Jake", 
      "last_name": "Trent", 
      "is_active": true, 
      "is_superuser": true, 
      "is_staff": true, 
      "last_login": "2011-10-11 20:46:34", 
      "groups": [], 
      "user_permissions": [], 
      "password": "sha1$9603b$c5afe951da8c2c1ff3cc8c09d43d8fe347f7b127", 
      "email": "trent.jake@gmail.com", 
      "date_joined": "2009-10-25 16:54:52"
    }
  }, 
  {
    "pk": 2, 
    "model": "auth.user", 
    "fields": {
      "username": "steveo", 
      "first_name": "Steve", 
      "last_name": "Olson", 
      "is_active": true, 
      "is_superuser": false, 
      "is_staff": true, 
      "last_login": "2011-04-18 09:09:28", 
      "groups": [
        1
      ], 
      "user_permissions": [], 
      "password": "sha1$cdb00$398bd143c7ccdce0e2b40e860ff45cdd65e502c3", 
      "email": "steveolyo@gmail.com", 
      "date_joined": "2010-05-05 14:03:38"
    }
  }, 
  {
    "pk": 3, 
    "model": "auth.user", 
    "fields": {
      "username": "brobinson", 
      "first_name": "Bryan", 
      "last_name": "Robinson", 
      "is_active": true, 
      "is_superuser": false, 
      "is_staff": true, 
      "last_login": "2011-08-12 12:36:21", 
      "groups": [
        1
      ], 
      "user_permissions": [], 
      "password": "sha1$30b3e$b6006a043995f6b8e40c9d3fb4ee812c8ec50ac1", 
      "email": "argie9999@gmail.com", 
      "date_joined": "2010-05-07 07:45:01"
    }
  }, 
  {
    "pk": 4, 
    "model": "auth.user", 
    "fields": {
      "username": "codekoala", 
      "first_name": "Josh", 
      "last_name": "Vanderlinden", 
      "is_active": true, 
      "is_superuser": false, 
      "is_staff": true, 
      "last_login": "2010-05-07 11:15:01", 
      "groups": [
        1
      ], 
      "user_permissions": [], 
      "password": "sha1$7ea57$ac45454484835161cdc2846ab20a610b676003da", 
      "email": "wheaties.box@gmail.com", 
      "date_joined": "2010-05-07 08:53:24"
    }
  }, 
  {
    "pk": 5, 
    "model": "auth.user", 
    "fields": {
      "username": "clewis", 
      "first_name": "Colin", 
      "last_name": "Lewis", 
      "is_active": true, 
      "is_superuser": false, 
      "is_staff": true, 
      "last_login": "2010-06-09 13:27:06", 
      "groups": [
        1
      ], 
      "user_permissions": [], 
      "password": "sha1$6dc0c$520b2e444e52d72fb45c495c785b6e28cdfebe6d", 
      "email": "lewiscolin@gmail.com", 
      "date_joined": "2010-05-20 16:22:54"
    }
  }, 
  {
    "pk": 6, 
    "model": "auth.user", 
    "fields": {
      "username": "buffalobillion", 
      "first_name": "Ted", 
      "last_name": "Jenkins", 
      "is_active": true, 
      "is_superuser": false, 
      "is_staff": true, 
      "last_login": "2011-01-28 08:05:09", 
      "groups": [
        1
      ], 
      "user_permissions": [], 
      "password": "sha1$6cabb$d37630a5155f2c5f0dfce31892eb04f1f313e8f3", 
      "email": "buffalobillion@gmail.com", 
      "date_joined": "2010-07-19 10:29:21"
    }
  }, 
  {
    "pk": 7, 
    "model": "auth.user", 
    "fields": {
      "username": "raztus", 
      "first_name": "John", 
      "last_name": "Coulter", 
      "is_active": true, 
      "is_superuser": false, 
      "is_staff": true, 
      "last_login": "2011-10-31 13:54:06", 
      "groups": [
        1
      ], 
      "user_permissions": [], 
      "password": "sha1$d0576$034d7935e986a24f5f85d64c24867d4c71b468c7", 
      "email": "jbcoulter@gmail.com", 
      "date_joined": "2010-07-20 14:06:43"
    }
  }, 
  {
    "pk": 8, 
    "model": "auth.user", 
    "fields": {
      "username": "davidnhale", 
      "first_name": "David", 
      "last_name": "Hale", 
      "is_active": true, 
      "is_superuser": false, 
      "is_staff": true, 
      "last_login": "2010-08-12 16:24:33", 
      "groups": [
        1
      ], 
      "user_permissions": [], 
      "password": "sha1$33086$eccacde9fca277c80dc229fd6956756a479391ae", 
      "email": "davidnhale@gmail.com", 
      "date_joined": "2010-08-11 09:19:28"
    }
  }, 
  {
    "pk": 9, 
    "model": "auth.user", 
    "fields": {
      "username": "j", 
      "first_name": "Jonathan", 
      "last_name": "Geddes", 
      "is_active": true, 
      "is_superuser": false, 
      "is_staff": true, 
      "last_login": "2010-10-26 10:06:51", 
      "groups": [
        1
      ], 
      "user_permissions": [], 
      "password": "sha1$14aa9$28401350ce434e67c2f3965ceb4815be53d9a09f", 
      "email": "geddes.jonathan@gmail.com", 
      "date_joined": "2010-10-26 10:06:51"
    }
  }, 
  {
    "pk": 10, 
    "model": "auth.user", 
    "fields": {
      "username": "tyrian66", 
      "first_name": "David", 
      "last_name": "Steiner", 
      "is_active": true, 
      "is_superuser": false, 
      "is_staff": true, 
      "last_login": "2011-04-21 16:08:06", 
      "groups": [
        1
      ], 
      "user_permissions": [], 
      "password": "sha1$27615$7091b17583b6b10ab2dfa75d7cd0f93171273f58", 
      "email": "tyrian66@gmail.com", 
      "date_joined": "2011-03-30 10:18:21"
    }
  }, 
  {
    "pk": 11, 
    "model": "auth.user", 
    "fields": {
      "username": "tvalletta", 
      "first_name": "Tom", 
      "last_name": "Valletta", 
      "is_active": true, 
      "is_superuser": false, 
      "is_staff": true, 
      "last_login": "2011-04-05 10:39:04", 
      "groups": [
        1
      ], 
      "user_permissions": [], 
      "password": "sha1$8368c$83a75bf92ddab43ec7cf575a93942fbe4ee1d660", 
      "email": "thomas.a.valletta@gmail.com", 
      "date_joined": "2011-04-05 10:39:04"
    }
  }
]